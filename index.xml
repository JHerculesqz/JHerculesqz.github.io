<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>妙木山</title><link>https://jherculesqz.github.io/</link><description>Recent content on 妙木山</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 30 Jan 2023 10:00:59 +0800</lastBuildDate><atom:link href="https://jherculesqz.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>关于</title><link>https://jherculesqz.github.io/about/</link><pubDate>Thu, 05 Aug 2021 13:01:37 +0800</pubDate><guid>https://jherculesqz.github.io/about/</guid><description>&lt;h1 id="关于博客">关于博客&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>独立&lt;/strong>：一直在写技术博客，从微信公众号、头条号、SegmentFault、掘金、简书一路折腾过来，还是希望有一个自己独立的空间。&lt;/li>
&lt;li>&lt;strong>坚持&lt;/strong>：随着年龄增长，逐渐欲说还休，还是文字更有韵味，希望自己能坚持写下去。&lt;/li>
&lt;li>&lt;strong>浪漫&lt;/strong>：按照&lt;a href="https://archiveprogram.github.com">Archive Program&lt;/a>计划的愿景，我的博客会在&amp;rdquo; GitHub北极代码库&amp;quot;中保存千年。想想1000年以后，我的后代们能读到我这个中二祖先的文字，还是一件挺浪漫的事儿。&lt;/li>
&lt;li>&lt;strong>感谢&lt;/strong>：感谢GitHub Pages、Hugo、Jane提供的技术支持。&lt;/li>
&lt;li>&lt;strong>妙木山&lt;/strong>：妙木山是修炼仙术的地方，作为火影的死忠粉，&amp;ldquo;妙木山&amp;quot;无比适合这个博客的定位——修炼、探索。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/about/MiaoMu.png" alt="MiaoMu">&lt;/p>
&lt;h1 id="关于我">关于我&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>行业&lt;/strong>：软件行业16年，无法用语言表达对编程的喜爱——举个栗子吧：有段时间喜欢在酒吧里写代码，同去的小伙伴无聊地陌陌上约人，自我介绍就是&amp;quot;A+吧台，旁边有个写代码的沙雕&amp;rdquo;。&lt;/li>
&lt;li>&lt;strong>技术方向&lt;/strong>：近几年痴迷语言和编译器技术，还有点痴迷计算机图形学。
&lt;ul>
&lt;li>&lt;strong>编程语言&lt;/strong>：目前工作Java和JavaScript用的最多，但我最喜欢C#——PHP是最好的语言，行了吧！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>哲学&lt;/strong>：不知何时，开始期待理解生命的意义。东一本西一本的书拿来乱翻，也没找到答案。不过，也不是全无收获——能模模糊糊地体会诗词的意境、能回味出毛选的奇妙、能敬畏金刚经的高深……继续求索吧……&lt;/li>
&lt;li>&lt;strong>兴趣&lt;/strong>：年轻的时候，喜欢轮滑、滑板、快乐肥仔水。现在，喜欢滑雪、乒乓球、茶(特指正山小种)。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/about/Me.png" alt="Me">&lt;/p></description></item><item><title>【SpringOne 2022】2.Introducing Spring Boot 3.0</title><link>https://jherculesqz.github.io/post/spring%E6%8B%BE%E9%81%97/springone-20222.introducing-spring-boot-3.0/</link><pubDate>Mon, 30 Jan 2023 10:00:59 +0800</pubDate><guid>https://jherculesqz.github.io/post/spring%E6%8B%BE%E9%81%97/springone-20222.introducing-spring-boot-3.0/</guid><description>&lt;p>SpringOne 2022第2个议题《Introducing Spring Boot 3.0》，主要展示Spring Boot 3.0的性能以及要点，演讲者：DaShaun Carter。&lt;/p>
&lt;h1 id="1测试前提">1.测试前提&lt;/h1>
&lt;h2 id="硬件">硬件&lt;/h2>
&lt;p>演讲者强调了测试的两款典型的CPU：&lt;code>Apple M1&lt;/code>和&lt;code>Raspberry Pi(Broadcom BCM2711)&lt;/code>。&lt;/p>
&lt;p>本文不展开两款CPU对比的性能差异，如果您对这两种CPU的性能参数感兴趣，可以在此看到详细的参数对比：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.cpu-monkey.com/en/compare_cpu-raspberry_pi_4_b_broadcom_bcm2711-vs-apple_m1_max_24_gpu">https://www.cpu-monkey.com/en/compare_cpu-raspberry_pi_4_b_broadcom_bcm2711-vs-apple_m1_max_24_gpu&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130160044858.png" alt="image-20230130160044858">&lt;/p>
&lt;h2 id="被测对象">被测对象&lt;/h2>
&lt;p>执行如下脚本，可获得被测对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl https://start.spring.io/starter.tgz &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-d dependencies-web, actuator &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-d &lt;span class="nv">javaVersion&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-d &lt;span class="nv">bootVersion&lt;/span>&lt;span class="o">=&lt;/span>3.0.0-RC2 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-d &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>maven-project &lt;span class="p">|&lt;/span> tar -xzf -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="代码归档">代码归档&lt;/h2>
&lt;p>测试代码归档在此：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/dashaun/spring-boot-3-with-aot-processing">https://github.com/dashaun/spring-boot-3-with-aot-processing&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130160316666.png" alt="image-20230130160316666">&lt;/p>
&lt;h2 id="java版本">Java版本&lt;/h2>
&lt;p>采用GraalVM：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130160356760.png" alt="image-20230130160356760">&lt;/p>
&lt;h1 id="2测试mvnw-vs-mvnd">2.测试：mvnw vs mvnd&lt;/h1>
&lt;p>演讲者对比测试了&lt;code>mvnw clean package&lt;/code>和&lt;code>mvnd clean package&lt;/code>，对比了&lt;code>mvnw&lt;/code>和&lt;code>mvnd&lt;/code>的性能差异。&lt;/p>
&lt;h2 id="mvnw-clean-package">mvnw clean package&lt;/h2>
&lt;blockquote>
&lt;p>测试结果：8.3s&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130161233119.png" alt="image-20230130161233119">&lt;/p>
&lt;h2 id="mvnd-clean-package">mvnd clean package&lt;/h2>
&lt;blockquote>
&lt;p>测试结果：5.6s&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130161255058.png" alt="image-20230130161255058">&lt;/p>
&lt;h2 id="结论mvnd构建性能优于mvnw">结论：&lt;code>mvnd&lt;/code>构建性能优于&lt;code>mvnw&lt;/code>&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130161311506.png" alt="image-20230130161311506">&lt;/p>
&lt;h2 id="对mvnd的延伸阅读">对mvnd的延伸阅读&lt;/h2>
&lt;p>&lt;code>mvnd&lt;/code>也是一种maven wrapper，相比&lt;code>mvnw&lt;/code>性能更好。详细资料如下：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/apache/maven-mvnd">https://github.com/apache/maven-mvnd&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130160948600.png" alt="image-20230130160948600">&lt;/p>
&lt;h1 id="3测试graalvm-aot">3.测试：GraalVM AOT&lt;/h1>
&lt;p>演讲者展示了采用&lt;code>AOT&lt;/code>技术构建Spring Boot 3.0应用，体现了性能的差异。&lt;/p>
&lt;h2 id="mvnw--pnative-nativecompile">mvnw -Pnative native:compile&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>构建时间延长至分钟级&lt;/strong>：使用&lt;code>mvnw -Pnative native:compile&lt;/code>构建，构建时间长达6分钟。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130161937854.png" alt="image-20230130161937854">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>启动时间缩短50%&lt;/strong>：未采用&lt;code>AOT&lt;/code>方式的SpringBoot进程启动时间通常在1.5s左右，采用&lt;code>AOT&lt;/code>方式缩短至0.7s。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130162028761.png" alt="image-20230130162028761">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>资源消耗下降66%&lt;/strong>：未采用&lt;code>AOT&lt;/code>方式的SpringBoot进程通常占用120m物理内存，采用&lt;code>AOT&lt;/code>方式占用38m物理内存。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%912.IntroducingSpringBoot3.0/image-20230130162322180.png" alt="image-20230130162322180">&lt;/p>
&lt;h2 id="结论aot可极大缩短热启动时间和资源消耗">结论：AOT可极大缩短热启动时间和资源消耗&lt;/h2>
&lt;p>AOT方式虽然延长了构建时间，但运行时的资源消耗会极大降低。&lt;/p>
&lt;h1 id="4开发建议">4.开发建议&lt;/h1>
&lt;p>演讲者给出了4点建议：&lt;/p>
&lt;ul>
&lt;li>The paved path to production starts at your laptop.&lt;/li>
&lt;li>Deploy all the things on your laptop.&lt;/li>
&lt;li>Scale to zero：Startup quickly, Chaos Happens.&lt;/li>
&lt;li>Be a better consumer of infrastructure.&lt;/li>
&lt;/ul>
&lt;p>这4点建议的本质是：Spring Boot 3.0更强调单体服务的&lt;strong>小型化&lt;/strong>，进而支撑将所有的微服务部署在1台笔记本上。&lt;/p>
&lt;p>在1台笔记本上就能把整个产品中的各种微服务都跑起来，才能提升开发效率(&lt;strong>尽快Startup，尽快暴露问题&lt;/strong>)。&lt;/p>
&lt;p>&lt;strong>小型化&lt;/strong>一定是有微服务实战经验后才能体会的&lt;strong>重要经验&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>在微服务架构兴起之初，&lt;/p>
&lt;p>笔者曾经所在的产品团队仅仅学会了微服务架构的形(把1个单进程盲目地拆解成了N个微服务进程)，但没有学会微服务的神(面向接口)，&lt;/p>
&lt;p>导致开发阶段对服务器等环境资源极度依赖，最终导致开发效率极低。&lt;/p>
&lt;/blockquote>
&lt;h1 id="5总结">5.总结&lt;/h1>
&lt;ul>
&lt;li>在本议题，演讲者DaShaun提供了&lt;code>AOT&lt;/code>、&lt;code>mvnd&lt;/code>等手段降低单体服务的资源消耗。&lt;/li>
&lt;li>Spring Boot 3.0的核心思想也是在强调&lt;strong>小型化&lt;/strong>(小到可以部署到1台笔记本上)有助于&lt;strong>提升开发效率&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>小型化&lt;/strong>与&lt;strong>微服务架构&lt;/strong>不仅不矛盾，而且是微服务架构&lt;strong>重要的实践经验&lt;/strong>。&lt;/li>
&lt;/ul></description></item><item><title>【SpringOne 2022】1.Introducing Spring Framework 6</title><link>https://jherculesqz.github.io/post/spring%E6%8B%BE%E9%81%97/springone-20221.introducing-spring-framework-6/</link><pubDate>Sat, 28 Jan 2023 10:00:59 +0800</pubDate><guid>https://jherculesqz.github.io/post/spring%E6%8B%BE%E9%81%97/springone-20221.introducing-spring-framework-6/</guid><description>&lt;p>SpringOne 2022第1个议题《Introducing Spring Framework 6》，主要介绍了Spring Framework6的关键特性以及里程碑，演讲者：Juergen Hoeller。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%911.IntroducingSpringFramework6/image-20230128153953141.png" alt="image-20230128153953141">&lt;/p>
&lt;h1 id="1版本里程碑">1.版本里程碑&lt;/h1>
&lt;h2 id="2个ga版本">2个GA版本&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>2022-11，发布&lt;code>Spring Framework 6.0 GA&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Spring Framework 6.0 GA&lt;/code>配套&lt;code>Java 17/18/19&lt;/code>&lt;/li>
&lt;li>匹配&lt;code>Spring Boot 3.0&amp;amp;3.1&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>2023-07，发布&lt;code>Spring Framework 6.1 GA&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Spring Framework 6.1 GA&lt;/code>配套&lt;code>Java 17/18/19/20/21&lt;/code>&lt;/li>
&lt;li>匹配&lt;code>Spring Boot 3.2&amp;amp;3.3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%911.IntroducingSpringFramework6/image-20230128165742669.png" alt="image-20230128165742669">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>详细日程表&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Spring%E6%8B%BE%E9%81%97/%E3%80%90SpringOne2022%E3%80%911.IntroducingSpringFramework6/image-20230128170617815.png" alt="image-20230128170617815">&lt;/p>
&lt;h2 id="6x-vs-53x">&lt;code>6.x&lt;/code> vs &lt;code>5.3.x&lt;/code>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Spring Framework 5.3.x&lt;/th>
&lt;th>Spring Framework 6.x&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Java版本&lt;/td>
&lt;td>&lt;code>Java 8/11/17&lt;/code>&lt;/td>
&lt;td>&lt;code>Java 17+&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java EE版本&lt;/td>
&lt;td>&lt;code>Java EE 7/8&lt;/code>(javax namespace)&lt;/td>
&lt;td>&lt;code>Jakarta EE 9/10&lt;/code>(jakarta namespace)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>命令式编程模型&lt;/code>和&lt;code>响应式编程模型&lt;/code>&lt;/td>
&lt;td>新增&lt;/td>
&lt;td>继承&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配套&lt;code>Spring Boot&lt;/code>&lt;/td>
&lt;td>&lt;code>Spring Boot 2.7.x&lt;/code>&lt;/td>
&lt;td>&lt;code>Spring Boot 3.x&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AOT&lt;/code>(Ahead-Of-Time)&lt;/td>
&lt;td>-&lt;/td>
&lt;td>新增&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>虚拟线程&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>新增(基于Loom)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="2java对spring-framework的影响">2.Java对Spring Framework的影响&lt;/h1>
&lt;p>如下列举了对&lt;code>Spring Framework&lt;/code>产生影响的&lt;code>Java 17新特性&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>语言层&lt;/strong>：text blocks、switch改进
&lt;ul>
&lt;li>&lt;strong>类型系统&lt;/strong>：records、sealed classes&lt;/li>
&lt;li>&lt;strong>代码组织形式&lt;/strong>：module introspection、module path scanning&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>标准库&lt;/strong>：集合的工厂方法(&lt;code>collection factory methods&lt;/code>)
&lt;ul>
&lt;li>如：&lt;code>List&amp;lt;Integer&amp;gt; list = List.of();&lt;/code>&lt;/li>
&lt;li>参考：https://stackoverflow.com/questions/43533835/java-9-what-are-collection-factory-methods&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="3java-ee对spring-framework的影响">3.Java EE对Spring Framework的影响&lt;/h1>
&lt;p>从&lt;code>Java EE 8&lt;/code>到&lt;code>Jakarta EE 9&lt;/code>的升级，也会对&lt;code>Spring Framework&lt;/code>产生影响：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>Servlet API 5.0&lt;/code>&lt;/strong>：&lt;code>javax.servlet&lt;/code>变为&lt;code>jakarta.servlet&lt;/code>
&lt;ul>
&lt;li>基于&lt;code>Servlet API 5.0/6.0&lt;/code>的Web容器：
&lt;ul>
&lt;li>&lt;code>Tomcat 10.0/10.1&lt;/code>&lt;/li>
&lt;li>&lt;code>Jetty 11/12&lt;/code>&lt;/li>
&lt;li>&lt;code>Undertow 2.3&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>JPA 3.0&lt;/code>&lt;/strong>：&lt;code>javax.persistence&lt;/code>变为&lt;code>jakarta.persistence&lt;/code>
&lt;ul>
&lt;li>基于&lt;code>JPA 3.0/3.1&lt;/code>的&lt;code>ORM&lt;/code>及&lt;code>Validator&lt;/code>：
&lt;ul>
&lt;li>&lt;code>Hibernate ORM 6.1&lt;/code>&lt;/li>
&lt;li>&lt;code>Hibernate Validator 7.0/8.0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="4aot对spring-framework的影响">4.AOT对Spring Framework的影响&lt;/h1>
&lt;p>伴随&lt;code>Java17&lt;/code>对&lt;code>AOT&lt;/code>的关注和支持，Spring Framework也增加了对&lt;code>AOT&lt;/code>的支持。&lt;/p>
&lt;p>Java对&lt;code>AOT&lt;/code>的支持有两种技术路线：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>GraalVM&lt;/code>&lt;/strong>：编译期直接将Java源码变成可执行二进制(&lt;code>native executables&lt;/code>)&lt;/li>
&lt;li>&lt;strong>&lt;code>CRaC&lt;/code>&lt;/strong>：保存JVM的Checkpoint，进而支持针对Checkpoint的还原(&lt;code>Coordinated Restore at Checkpoint&lt;/code>)
&lt;ul>
&lt;li>&lt;code>OpenJDK&lt;/code>启动了名为&lt;code>CRaC&lt;/code>的项目&lt;/li>
&lt;li>参考：https://wiki.openjdk.org/display/crac&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="5虚拟线程对spring-framework的影响">5.虚拟线程对Spring Framework的影响&lt;/h1>
&lt;p>随着&lt;code>虚拟线程&lt;/code>作为&lt;code>Java19&lt;/code>的预览特性，Spring Framework也进行了支持，但&lt;code>Juergen Hoeller&lt;/code>对&lt;code>虚拟线程&lt;/code>的阐述比较辩证：&lt;/p>
&lt;ul>
&lt;li>不要盲目迷信&lt;code>虚拟线程&lt;/code>，需要在合适的场景下使用，演讲中举了两类适用的场景：
&lt;ul>
&lt;li>如：基于IO流的Servlet&lt;/li>
&lt;li>如：@Scheduler管理的消息型系统&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不适用的场景：纯CPU计算型的业务逻辑(&lt;code>purely CPU-bound handlers&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h1 id="6总结">6.总结&lt;/h1>
&lt;ul>
&lt;li>&lt;code>Spring Framework&lt;/code>作为一个底层框架，它的输入往往来自于Java语言规范、Java EE标准。&lt;/li>
&lt;li>Spring团队规划的新特性非常紧贴Java新版本/新特性，即便这个新特性仅仅是&lt;code>Preview Feature&lt;/code>。&lt;/li>
&lt;li>深刻理解Java新版本/新特性，有助于理解&lt;code>Spring Framework&lt;/code>的新特性以及它的市场规划。&lt;/li>
&lt;/ul></description></item><item><title>【运行时数据区】-并发编程-前置知识(4.并发编程基础)-1</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%864.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-1/</link><pubDate>Thu, 01 Dec 2022 08:07:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%864.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-1/</guid><description>&lt;h1 id="浅析协程">浅析协程&lt;/h1>
&lt;p>并发编程的核心目标之一就是&amp;rdquo;&lt;strong>快&lt;/strong>&amp;quot;，并发编程发展史中若干特性与改进无不围绕这个目标。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/quick.gif" alt="quick.gif">&lt;/p>
&lt;p>笔者通过&lt;strong>&lt;code>《Learning Concurrency in Kotlin》&lt;/code>&lt;/strong>书中的&lt;strong>&lt;code>&amp;quot;Processes, threads, and coroutines&amp;quot;&lt;/code>&lt;/strong>章节，浅析一下&lt;strong>&lt;code>&amp;quot;协程&amp;quot;&lt;/code>&lt;/strong>。&lt;/p>
&lt;h2 id="进程processes">进程(Processes)&lt;/h2>
&lt;ul>
&lt;li>我们先看看书中对&lt;strong>&lt;code>进程(Processes)&lt;/code>&lt;/strong>的介绍：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>A process is an instance of an application that is being executed. Each time an application is started, a process is started for it.&lt;/p>
&lt;/blockquote>
&lt;p>进程是正在执行的应用程序的实例。每次启动应用程序时，都会为其启动一个进程。&lt;/p>
&lt;blockquote>
&lt;p>A process has a state, things such as handles to open resources, a process ID, data, network connections, and so on, are part of the state of a process and can be accessed by the threads inside that process.&lt;/p>
&lt;/blockquote>
&lt;p>进程是有状态的，打开资源的句柄、进程 ID、数据、网络连接等都是进程状态的一部分，这些信息都可以被该进程内的线程访问。&lt;/p>
&lt;blockquote>
&lt;p>An application can be composed of many processes, a common practice for example for internet browsers.&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;But implementing a multi-process application brings challenges that are out of the scope of this book. For this book, we will cover the implementation of applications that run in more than one thread, but still in a single process&amp;hellip;&amp;hellip;.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>归纳一下书中内容：&lt;/strong>
&lt;ul>
&lt;li>1个应用可以包含N个进程。&lt;/li>
&lt;li>&lt;a href="https://www.chromium.org/developers/design-documents/multi-process-architecture/">Chrome的多进程架构图&lt;/a>展示了：1个Chrome浏览器包含了浏览器进程、渲染进程等N个进程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/arch.png" alt="img">&lt;/p>
&lt;h2 id="线程threads">线程(Threads)&lt;/h2>
&lt;ul>
&lt;li>我们再看看书中对&lt;strong>&lt;code>线程(Threads)&lt;/code>&lt;/strong>的介绍：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>A thread of execution encompasses a set of instructions for a processor to execute.&lt;/p>
&lt;p>So a process will contain at least one thread, which is created to execute the point of entry of the application; usually this entry point is the main() function of the application. This thread is called the main thread, and the life cycle of the process will be tied to it; if this thread ends, the process will end as well, regardless of any other threads in the process.&lt;/p>
&lt;/blockquote>
&lt;p>线程包含一组供处理器执行的指令。1个进程至少会包含1个线程，这个线程就是主线程。应用程序在入口点创建该线程，并绑定了该线程与进程的生命周期。&lt;/p>
&lt;p>其中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">(1)应用程序的入口点通常是main()函数。
(2)主线程结束，则进程也结束，即使这个进程中还有其它未执行完的线程。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Each thread can access and modify the resources contained in the process it&amp;rsquo;s attached to, but it also has its own local storage, called thread-local storage.&lt;/p>
&lt;/blockquote>
&lt;p>每个线程都可以访问和修改它所附加的进程中包含的资源，但它也有自己的本地存储，称为线程本地存储(&lt;code>thread-local&lt;/code>)。&lt;/p>
&lt;blockquote>
&lt;p>Only one of the instructions in a thread can be executed at a given time. So if a thread is blocked, the execution of any other instruction in that same thread will not be possible until the blocking ends. Nevertheless, many threads can be created for the same process, and they can communicate with each other. So it is expected that an application will never block a thread that can affect negatively the experience of the user; instead, the blocking operations should be assigned to threads that are dedicated to them.&lt;/p>
&lt;p>In Graphic User Interface (GUI) applications, there is a thread called a UI thread; its function is to update the User Interface and listen to user interactions with the application. Blocking this thread, obstructs the application from updating its UI and from receiving interactions from the user. Because of this, GUI applications are expected to never block the UI thread*,* in order to keep the application responsive at all times.&lt;/p>
&lt;p>Android 3.0 and above, for example, will crash an application if a networking operation is made in the UI thread, in order to discourage developers from doing it, given that networking operations are thread-blocking.&lt;/p>
&lt;/blockquote>
&lt;p>在给定的时间内，只能执行1个线程中的1条指令。如果一个线程被阻塞，则在阻塞结束前，该线程内任何其它的指令都不可能被执行。&lt;/p>
&lt;p>尽管如此，我们可以在1个进程内创建N个线程，线程间可以互相通信。&lt;/p>
&lt;p>因此，为了不影响用户体验，我们应该将阻塞操作分配给专门的线程，而不是阻塞主线程。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">在GUI应用程序中，存在1个UI线程，这个线程的功能是更新用户界面并监听用户与应用程序的交互，阻塞了UI线程就会阻止用户界面的更新和交互。
因此，我们永远不会阻塞UI线程。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">在Android 3.0+的版本中，如果在UI 线程中进行网络操作，Android会触发应用程序崩溃，因为Android认为网络操作是一种阻塞操作。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Throughout the book, we will refer to the main thread of a GUI application both as a UI thread and as a main thread (because in Android, by default, the main thread is also the UI thread), while for command-line applications we will refer to it only as a main thread. Any thread different from those two will be called a background thread, unless a distinction between background threads is required, in which case each background thread will receive a unique identifier for clarity.&lt;/p>
&lt;/blockquote>
&lt;p>在本书中，&lt;/p>
&lt;p>我们将GUI应用程序的主线程称为&lt;code>UI线程&lt;/code>，也称为&lt;code>主线程&lt;/code>——比如：在 Android 中，默认情况下，主线程就是UI线程。&lt;/p>
&lt;p>我们将命令行应用程序的主线程，仅称为&lt;code>主线程&lt;/code>。&lt;/p>
&lt;p>任何不同于前述两个线程的其它线程都称为&lt;code>后台线程&lt;/code>。&lt;/p>
&lt;p>Given the way that the Kotlin has implemented concurrency, you will find that it&amp;rsquo;s not necessary for you to manually start or stop a thread. The interactions that you will have with threads will commonly be limited to tell Kotlin to create or use a specific thread or pool of threads to run a coroutine – usually with one or two lines of code. The rest of the handling of threads will be done by the framework.&lt;/p>
&lt;p>鉴于Kotlin实现并发的方式，我们没有必要手动启动或停止线程。&lt;/p>
&lt;p>我们与线程的交互通常仅限于告诉Kotlin创建/使用特定线程，或者告诉Kotlin使用线程池中的某个空闲的协程，线程的其余处理将由底层框架完成。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>归纳一下书中内容：&lt;/strong>
&lt;ul>
&lt;li>1个进程包含N个线程，这些线程包含主线程、后台线程等。&lt;/li>
&lt;li>&lt;a href="https://www.chromium.org/developers/design-documents/multi-process-architecture/">Chrome的多进程架构图&lt;/a>展示了：浏览器进程中包含了主线程、IO线程，渲染进程包含了主线程、渲染线程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/arch.png" alt="img">&lt;/p>
&lt;h2 id="协程coroutines">协程(Coroutines)&lt;/h2>
&lt;ul>
&lt;li>我们还是看看书中对&lt;strong>&lt;code>协程(Coroutines)&lt;/code>&lt;/strong>的介绍：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Kotlin&amp;rsquo;s documentation often refers to coroutines as lightweight threads. This is mostly because, like threads, coroutines define the execution of a set of instructions for a processor to execute. Also, coroutines have a similar life cycle to that of threads.&lt;/p>
&lt;/blockquote>
&lt;p>在Kotlin中，通常将协程称为轻量级线程。这主要是因为，与线程一样，协程定义了处理器执行的一组指令的执行。此外，协程具有与线程相似的生命周期。&lt;/p>
&lt;blockquote>
&lt;p>A coroutine is executed inside a thread. One thread can have many coroutines inside it, but as already mentioned, only one instruction can be executed in a thread at a given time. This means that if you have ten coroutines in the same thread, only one of them will be running at a given point in time.&lt;/p>
&lt;/blockquote>
&lt;p>协程在线程内执行。1个线程内部可以有N个协程。&lt;/p>
&lt;p>但正如前文提到的：在给定时间内，1个线程中只能执行1条指令，因此1个线程中有10个协程，那么在给定的时间点只会运行其中1个协程。&lt;/p>
&lt;blockquote>
&lt;p>The biggest difference between threads and coroutines, though, is that coroutines are fast and cheap to create. Spawning thousands of coroutines can be easily done, it is faster and requires fewer resources than spawning thousands of threads.&lt;/p>
&lt;/blockquote>
&lt;p>不过，线程和协程之间的最大区别在于：创建协程速度快、成本低，它比产生数千个线程更快、需要更少的资源。&lt;/p>
&lt;blockquote>
&lt;p>Take this code as an example. Don&amp;rsquo;t worry about the parts of the code you don&amp;rsquo;t understand yet:&lt;/p>
&lt;p>This function creates as many coroutines as specified in the parameter amount, delays each one for a second, and waits for all of them to end before returning. This function can be called, for example, with 10,000 as the amount of coroutines:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">createCoroutines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">jobs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Job&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">jobs&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">launch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">jobs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">runBlocking&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">time&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">measureTimeMillis&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">createCoroutines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="n">_000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Took $time ms&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上述代码为例：&lt;code>createCoroutines()&lt;/code>支持创建指定数量的协程，执行每个协程就是休眠1秒，此函数等待所有协程结束后就会返回。&lt;/p>
&lt;blockquote>
&lt;p>In a test environment, running it with an amount of 10,000 took around 1,160 ms, while running it with 100,000 took 1,649 ms. The increase in execution time is so small because Kotlin will use a pool of threads with a fixed size, and distribute the coroutines among those threads – so adding thousands of coroutines will have little impact. And while a coroutine is suspended – in this case because of the call to delay() – the thread it was running in will be used to execute another coroutine, one that is ready to be started or resumed.&lt;/p>
&lt;/blockquote>
&lt;p>在测试环境中，创建1万个协程需要1160毫秒，创建10万个协程需要1649毫秒。协程增加了9万个，执行时间却没有增加太多，是因为：&lt;/p>
&lt;p>Kotlin使用了固定大小的线程池，并将协程分布在线程池中的这些线程上，所以增加协程数量，并不会增加更多的资源消耗和时间消耗。&lt;/p>
&lt;p>所谓的将&amp;quot;协程分布在线程池中的这些线程上&amp;rdquo;，就是将1个协程放到1个线程中去执行，当这个协程被挂起时(因为调用了&lt;code>delay()&lt;/code>函数)，它所属的这个线程就用来执行其它准备好的协程。&lt;/p>
&lt;blockquote>
&lt;p>How many threads are active can be determined by calling the activeCount() method of the Thread class.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>activeCount()&lt;/code>函数可以确定当前有多少个线程处于活动状态。&lt;/p>
&lt;blockquote>
&lt;p>For example, let&amp;rsquo;s update the main() function to do so:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">runBlocking&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;${Thread.activeCount()} threads active at the start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">time&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">measureTimeMillis&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">createCoroutines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="n">_000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;${Thread.activeCount()} threads active at the end&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Took $time ms&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比如：我们修改&lt;code>main()&lt;/code>函数的实现，分别打印了&lt;code>main()&lt;/code>函数创建协程前的线程个数、创建协程后的线程个数。&lt;/p>
&lt;blockquote>
&lt;p>In the same test environment as before, it was found that in order to create 10,000 coroutines, only four threads needed to be created:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/72fd74aa-f292-4680-b520-7e12a750a438.png" alt="img">&lt;/p>
&lt;blockquote>
&lt;p>But once the value of the amount being sent to createCoroutines() is lowered to one, for example, only two threads are created:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/c6df4fce-5556-4fa3-9fb8-7653c2f7972d.png" alt="img">&lt;/p>
&lt;p>在测试环境上，创建1万个协程需要4个线程(6个线程-2个线程)，创建1个协程仅需要创建2个线程(4个线程-2个线程)。&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s important to understand that even though a coroutine is executed inside a thread, it&amp;rsquo;s not bound to it. As a matter of fact, it&amp;rsquo;s possible to execute part of a coroutine in a thread, suspend the execution, and later continue in a different thread. In our previous example this is happening already, because Kotlin will move coroutines to threads that are available to execute them. For example, by passing 3 as the amount to createCoroutines(), and updating the content of the launch() block so that it prints the current thread, we can see this in action:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">createCoroutines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">jobs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Job&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">jobs&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">launch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Started $i in ${Thread.currentThread().name}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Finished $i in ${Thread.currentThread().name}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">jobs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一个很重要的点是：即使协程在线程内执行，它也不会受线程约束。&lt;/p>
&lt;p>事实上，可以在1个线程中执行1个协程的一部分，当这个协程被挂起再恢复执行时，可以在另1个线程中继续执行这个协程的剩余部分。&lt;/p>
&lt;blockquote>
&lt;p>You will find that in many cases they are being resumed in a different thread:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/3d118878-25a4-4bec-8fb7-fd13335ed4cf.png" alt="img">&lt;/p>
&lt;p>我们可以看到示例代码创建了3个协程，协程1在线程1中执行，延迟1000毫秒后，协程1在线程2中继续执行完毕。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>归纳一下书中内容：&lt;/strong>
&lt;ul>
&lt;li>1个线程包含N个协程。&lt;/li>
&lt;li>同1个协程可以在线程1中执行一部分，在线程2中执行剩余部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="全局观">全局观&lt;/h2>
&lt;ul>
&lt;li>最后我们看看书中对&lt;strong>&lt;code>进程、线程、协程&lt;/code>&lt;/strong>的总结：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>So far, we have learned that an application is composed of one or more processes and that each process has one or more threads. We have also learned that blocking a thread means halting the execution of the code in that thread, and for that reason, a thread that interacts with a user is expected to never be blocked. We also know that a coroutine is basically a lightweight thread that resides in a thread but is not tied to one. The following diagram encapsulates the content of this section so far. Notice how each coroutine is started in one thread but at some point is resumed in a different one:&lt;/p>
&lt;/blockquote>
&lt;p>至此，&lt;/p>
&lt;p>我们可以知道：1个应用程序是由N个进程组成，1个进程包含N线程。&lt;/p>
&lt;p>我们还知道：阻塞线程意味着停止该线程中代码的执行，因此永远不应该阻塞与用户交互的线程。&lt;/p>
&lt;p>我们还知道：协程是1个轻量级线程，它驻留在1个线程中但又不绑定到具体的这个线程中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1个协程可以在1个线程中启动，但在某个时刻又可以在另一个线程中恢复执行。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下图概括了本节到目前为止的内容。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/4435aef0-eb0f-4a75-a6aa-ff8bf9462740.png" alt="img">&lt;/p>
&lt;h1 id="协程的语言实现java版">协程的语言实现(Java版)&lt;/h1>
&lt;p>协程在Java中的实现非常落后，直到Java8也没有在正式版本中支持协程。&lt;/p>
&lt;p>OpenJDK团队后来引入了&lt;code>quasar&lt;/code>库的大神，启动了&lt;code>Loom&lt;/code>项目，&lt;code>Loom&lt;/code>项目的最新进展后续另开文章介绍，本文就基于&lt;code>quasar&lt;/code>体验一下Java版的协程性能。&lt;/p>
&lt;p>在此，我们模仿前文翻译的&lt;code>《Learning Concurrency in Kotlin》&lt;/code>中的示例代码：&lt;/p>
&lt;ul>
&lt;li>创建10万个线程，每个线程执行20万次加法，等待10万个线程都执行完，打印总耗时。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main1&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAX_COUNT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">100000&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">iStartTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">arrThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">MAX_COUNT&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">arrThread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">arrThread&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Main1&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">calc&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">arrThread&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">arrThread&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Total: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">iStartTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">calc&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">iRes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">10000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">iRes&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iRes&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行结果：消耗了8945毫秒。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/image-20221201183245050.png" alt="image-20221201183245050">&lt;/p>
&lt;ul>
&lt;li>我们再创建10万个协程，每个协程也是执行20万次加法，等待10万个协程都执行完，打印总耗时。
&lt;ul>
&lt;li>这里我们用到了&lt;code>quasar&lt;/code>来创建协程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">iStartTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Fiber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">arrFiber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Fiber&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">Main1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_COUNT&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">arrFiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">arrFiber&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Fiber&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">Main1&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">calc&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Fiber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fiber&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">arrFiber&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Fiber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">arrFiber&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Total: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">iStartTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行结果：消耗了1812毫秒。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/image-20221201183730909.png" alt="image-20221201183730909">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>测试结论&lt;/strong>：反复执行上述测试代码，Java协程的性能远高于比Java线程的性能。&lt;/li>
&lt;/ul>
&lt;h1 id="参考">参考&lt;/h1>
&lt;blockquote>
&lt;p>《Learning Concurrency in Kotlin》：https://www.amazon.com/Learning-Concurrency-Kotlin-efficient-applications/dp/1788627164&lt;/p>
&lt;p>Wiki：https://en.wikipedia.org/wiki/Coroutine&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E3%80%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86(4.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)-1/image-20221121164732405.png" alt="image-20221121164732405">&lt;/p></description></item><item><title>【宏观】-0-性能之巅笔记-上</title><link>https://jherculesqz.github.io/post/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/</link><pubDate>Wed, 25 May 2022 10:00:59 +0800</pubDate><guid>https://jherculesqz.github.io/post/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/</guid><description>&lt;h1 id="1brendan-gregg是谁">1.Brendan Gregg是谁&lt;/h1>
&lt;p>Brendan Gregg，性能界大神，曾就职于Netflix、Sun、Oracle、Joyent(被三星收购的一家云计算公司)，从2022年5月的博客看，他目前就职于Intel。&lt;/p>
&lt;p>Brendan Gregg在性能方面的成就数不胜数，仅列出两项就可以让我们膜拜了：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>《Systems Performance : Enterprise and the Cloud》&lt;/strong>：中文名《性能之巅》，一本风靡全球的性能工程的圣经。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220526101942669.png" alt="image-20220526101942669">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ldquo;The Flame Graph&amp;rdquo;&lt;/strong>：Brendan Gregg于2013年提出的&amp;quot;火焰图&amp;rdquo;，火焰图方法也成为现在各种性能工具中必备的可视化能力。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220526103724186.png" alt="image-20220526103724186">&lt;/p>
&lt;p>Brendan Gregg在性能领域，还有一个被广为传播的骚操作——对着磁盘狂吼引发磁盘IO的性能问题。。。大神的世界我们永远不懂。。。&lt;/p>
&lt;ul>
&lt;li>油管：&lt;a href="https://www.youtube.com/watch?v=tDacjrSCeq4">https://www.youtube.com/watch?v=tDacjrSCeq4&lt;/a>&lt;/li>
&lt;li>B站：&lt;a href="https://www.bilibili.com/video/BV1gY4y1L7Px/">https://www.bilibili.com/video/BV1gY4y1L7Px/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220526105433607.png" alt="image-20220526105433607">&lt;/p>
&lt;h1 id="2第一章笔记">2.第一章笔记&lt;/h1>
&lt;p>Brendan Gregg在《性能之巅》第一章主要讲了2个问题：&lt;/p>
&lt;ul>
&lt;li>为什么学习性能工程很难？&lt;/li>
&lt;li>为什么实施性能工程很难？&lt;/li>
&lt;/ul>
&lt;h2 id="为什么学习性能工程很难">为什么学习性能工程很难？&lt;/h2>
&lt;p>作者想表达的核心观点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>性能工程要求工程师具备宽广的技术广度，同时也要具备深邃的技术深度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然而，技术深度与技术广度兼备的确是一件很困难的事情。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>作者引用了2002年美国国防部长论述国际关系时的一段话：&lt;/p>
&lt;blockquote>
&lt;p>国际关系中，&lt;/p>
&lt;p>有已知的已知：有些事情我们知道自己知道。&lt;/p>
&lt;p>也有已知的未知：我们知道有些事情我们不知道。&lt;/p>
&lt;p>但还有未知的未知：有些事情我们知道自己不知道。&lt;/p>
&lt;/blockquote>
&lt;p>美国防部长这段话的本意是想论述国际关系复杂多变，任何一项决策要考虑充分，避免未知的未知引发不可估量的后果。&lt;/p>
&lt;p>作者认为这段话也可以类比于性能工程：&lt;/p>
&lt;blockquote>
&lt;p>当我们开展性能优化工作时，由于未知的未知太多，会导致：&lt;/p>
&lt;p>(1)缺乏&amp;quot;高效&amp;quot;的定位手段——而且我们还不自知操作系统早已为我们准备好了对应的方法和工具。&lt;/p>
&lt;p>(2)缺乏&amp;quot;有效&amp;quot;的解决办法。&lt;/p>
&lt;/blockquote>
&lt;p>作者的观点，与庄子的《养生主》异曲同工：&lt;/p>
&lt;blockquote>
&lt;p>吾生也有涯，而知也无涯。以有涯随无涯，殆已！&lt;/p>
&lt;/blockquote>
&lt;p>人类的生命是非常有限的，而知识无边无尽，以有限的生命追求无边的知识，显然是不可能的。&lt;/p>
&lt;p>作者有什么建议呢？可以归纳为两点：&lt;/p>
&lt;ul>
&lt;li>对策1：对知识进行归纳，抽象出知识的本质。&lt;/li>
&lt;li>对策2：有选择地、有优先级地学习。
&lt;ul>
&lt;li>巩固已知的已知，扩大已知的未知，减少未知的未知。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作者认为知识肯定是学不完的，但学习时可以：&lt;/p>
&lt;ul>
&lt;li>首先，将尽可能多的&amp;quot;未知的未知&amp;quot;转换为&amp;quot;已知的未知&amp;rdquo;。&lt;/li>
&lt;li>然后，实战时再查资料，将&amp;quot;已知的未知&amp;quot;转换为&amp;quot;已知的已知&amp;rdquo;。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220526162559859.png" alt="image-20220526162559859">&lt;/p>
&lt;p>但，工程师分三种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>天才型工程师：知识结构大多是已知的已知，这是大神，也是少数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>扎实型工程师：知识结构大多是已知的已知、已知的未知，这是大多数人的可能达到的状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>愚昧型工程师：知识结构大多是未知的知识，这种工程师往往觉得自己就是全世界。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;&lt;strong>用到的时候再查文档&lt;/strong>&amp;ldquo;这句话，&lt;/p>
&lt;p>对于扎实性工程师是有效的。&lt;/p>
&lt;p>对于愚昧性工程师是无效的——即便实战时给他充足的时间查资料，首先他都不会去查(因为他不知道)，即便去查也可能查不到、查到也看不懂。&lt;/p>
&lt;p>作者的这个学习论，可以推广到各种知识的学习中。&lt;/p>
&lt;h2 id="为什么实施性能工程很难">为什么实施性能工程很难？&lt;/h2>
&lt;p>作者归纳了实战中性能工程的3个难点：&lt;/p>
&lt;ul>
&lt;li>性能的主观性&lt;/li>
&lt;li>系统的复杂性&lt;/li>
&lt;li>人员的协作性&lt;/li>
&lt;/ul>
&lt;h3 id="性能的主观性">性能的主观性&lt;/h3>
&lt;p>作者认为性能是主观的，同样是&lt;code>磁盘单次IO的时间是1ms&lt;/code>，&lt;/p>
&lt;p>在实时系统场景下是很慢的，在管理信息系统场景下却是很快的。&lt;/p>
&lt;p>因此，性能工程要结合实际产品制定合理、合适的性能标准。&lt;/p>
&lt;h3 id="系统的复杂性">系统的复杂性&lt;/h3>
&lt;p>作者认为&lt;strong>被测系统是复杂的&lt;/strong>，进而&lt;strong>导致2个问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>寻找性能问题时，找不到分析的&lt;strong>起点&lt;/strong>。
&lt;ul>
&lt;li>很多性能培训案例，是假定我们已知问题起点了。&lt;/li>
&lt;li>比如：假定我们已经知道就是进程A的线程B疑似死锁了，于是演示各种工具如何证明是死锁。&lt;/li>
&lt;li>关键我们怎么知道就是进程A有性能问题？怎么知道就是线程B有问题？怎么知道就是死锁问题？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解决性能问题时，往往&lt;strong>牵一发而动全身&lt;/strong>。
&lt;ul>
&lt;li>修改死锁问题，可能CPU的瓶颈没有了。&lt;/li>
&lt;li>但，应用程序继续往下一个环节运行，又引发了IO的瓶颈。&lt;/li>
&lt;li>所以才有程序猿感慨：&amp;ldquo;时间是不可能被消灭的，只可能被转移。&amp;ldquo;&lt;img src="https://jherculesqz.github.io/性能拾遗/【宏观】-0-性能之巅笔记-上/image-20220526172626038.png" alt="image-20220526172626038" style="zoom:25%;" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="人员的协作性">人员的协作性&lt;/h3>
&lt;p>作者根据经验总结了3个与人相关的问题：&lt;/p>
&lt;ul>
&lt;li>性能工程涉及到产品研发体系的众多角色。比如：系统管理员、应用开发者、DBA、网络工程师。&lt;/li>
&lt;li>角色间的部门墙可能导致性能工程断点。&lt;/li>
&lt;li>即使是性能工程师，也可能专注于某个领域。比如：Java性能工程师、MySQL性能工程师等。&lt;/li>
&lt;/ul>
&lt;p>看来在哪儿都有部门墙，有人的地方就有江湖。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527103458466.png" alt="image-20220527103458466">&lt;/p>
&lt;h1 id="3第二章笔记">3.第二章笔记&lt;/h1>
&lt;p>Brendan Gregg在《性能之巅》第二章主要从6个方面讲了性能工程的方法论：&lt;/p>
&lt;ul>
&lt;li>开展性能工程的21种方法&lt;/li>
&lt;li>被测系统的架构&lt;/li>
&lt;li>被测系统的模型&lt;/li>
&lt;li>性能工程的2种分析视角&lt;/li>
&lt;li>性能指标&lt;/li>
&lt;li>性能工程涉及的数学模型&lt;/li>
&lt;/ul>
&lt;h2 id="开展性能工程的21种方法">开展性能工程的21种方法&lt;/h2>
&lt;p>作者在这一段讲了21种性能工程常用的方法(英文&lt;code>anti-methodologies&lt;/code>)，译者生造了个词——&lt;code>讹方法&lt;/code>。&lt;/p>
&lt;p>&lt;code>讹方法&lt;/code>？难道是&lt;code>讹人&lt;/code>的意思？我选了两种方法说明一下：&lt;/p>
&lt;h3 id="街灯讹方法">街灯讹方法&lt;/h3>
&lt;p>作者讲了个故事：&lt;/p>
&lt;blockquote>
&lt;p>有个醉汉在路灯下找钥匙，警察帮忙找了半天也没找到。&lt;/p>
&lt;p>警察问醉汉确不确定就在这个路灯下丢的钥匙。&lt;/p>
&lt;p>醉汉说：我也不确定，但是这里是最亮的。&lt;/p>
&lt;/blockquote>
&lt;p>这。。。&lt;/p>
&lt;p>不就是某些程序猿定位性能问题但找不到切入点时，先随便怀疑一段代码，碰碰运气吗。。。&lt;/p>
&lt;h3 id="责怪他人讹方法">责怪他人讹方法&lt;/h3>
&lt;p>作者说了一下操作步骤：&lt;/p>
&lt;blockquote>
&lt;p>第一步、找到一个不是自己负责的模块——注意，一定不是自己负责的模块！&lt;/p>
&lt;p>第二步、假定问题就是这个模块造成的。&lt;/p>
&lt;p>第三步、把问题扔给那个模块的负责人。&lt;/p>
&lt;p>第四步、如果那个模块的负责人证明不是他的问题，重复步骤1。&lt;/p>
&lt;/blockquote>
&lt;p>这。。。&lt;/p>
&lt;p>不就是某些程序猿最喜欢干的事儿吗——甩锅大法！！！&lt;/p>
&lt;p>Brendan Gregg竟然给甩锅大法取了这么牛X的名字，还给出了甩锅的详细步骤。。。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527120219336.png" alt="image-20220527120219336">&lt;/p>
&lt;h3 id="赤果果的调侃">赤果果的调侃&lt;/h3>
&lt;p>行了，这一段儿基本可以跳过了。。。&lt;/p>
&lt;p>这一段儿就是作者一本正经地调侃。。。&lt;/p>
&lt;p>当然，以作者的骚气，他在这么权威的书里面写出这种段子，我们也不应该太意外。。。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527114756476.png" alt="image-20220527114756476">&lt;/p>
&lt;h2 id="被测系统的架构">被测系统的架构&lt;/h2>
&lt;p>作者表达了1个观点和1个常用的架构：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1个观点&lt;/strong>：性能工程是针对整个系统(包括所有硬件和软件栈)，实施性能工程前画出完整的架构图可以避免&lt;code>只见树木不见森林&lt;/code>。&lt;/li>
&lt;li>&lt;strong>1个常用架构&lt;/strong>：如下图。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527121255677.png" alt="image-20220527121255677">&lt;/p>
&lt;h2 id="被测系统的模型">被测系统的模型&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>SUT模型&lt;/strong>：system under test&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527121828041.png" alt="image-20220527121828041">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>排队系统&lt;/strong>：这个模型很重要，作者贯穿全书的理念就是能将所有的性能问题都归纳为排队系统。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527122023060.png" alt="image-20220527122023060">&lt;/p>
&lt;h2 id="性能工程的2种分析视角">性能工程的2种分析视角&lt;/h2>
&lt;p>在梳理好被测系统的架构后，我们有两种选择：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>自下而上&lt;/strong>：resource analysis，从硬件、内核、系统调用寻找资源瓶颈，进而定位到应用程序的进程、线程。&lt;/li>
&lt;li>&lt;strong>自上而下&lt;/strong>：workload analysis，从应用程序出发，找到资源瓶颈。&lt;/li>
&lt;/ul>
&lt;p>作者认为，其实两种分析视角要结合起来，才是最有效的性能工程方法。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527122439419.png" alt="image-20220527122439419">&lt;/p>
&lt;h2 id="性能指标">性能指标&lt;/h2>
&lt;p>对于常用的性能指标就不展开了。如：延时、响应时间、时间量级、使用率、饱和度等。&lt;/p>
&lt;p>作者重点展开了对&lt;strong>缓存的基础知识&lt;/strong>介绍：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>什么是缓存&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>将数据不再存储在较慢的存储层，而是将数据存储到较快的存储层中。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>典型的缓存&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>CPU的L1、L2、L3缓存&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>缓存的命中率是什么&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>命中率 = 命中次数 / (命中次数+失效次数)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>失效率是什么&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>每秒缓存失效次数&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>命中率、失效率与运行性能的关系&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>运行时间 = 命中率 * 命中延时 + 失效率 * 失效延时&lt;/p>
&lt;p>比如：&lt;/p>
&lt;p>任务1的命中率很高(90%)，失效率也很高(200/s)。&lt;/p>
&lt;p>任务2的命中率略低(80%)，失效率也很低(20/s)。&lt;/p>
&lt;p>那么，最终任务2的性能会更好。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>实现缓存的算法有哪些&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>MRU：将最近最长使用的数据保留在缓存中。&lt;/p>
&lt;p>LRU：将最近最少使用的数据移出缓存。&lt;/p>
&lt;p>其它算法还有NFU、MFU、LFU。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>缓存温度有哪些&lt;/strong>？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>冷：命中率无限接近于0，比如缓存是空的。&lt;/p>
&lt;p>热：命中率无限接近于预期的高度。&lt;/p>
&lt;p>温：命中率还没有达到预期的高度。比如：缓存中存了一定有用的数据，但不全是有用的数据。&lt;/p>
&lt;/blockquote>
&lt;p>大白话一点，缓存机制的本质和海王海后的鱼塘逻辑差不多：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>MRU、LRU&lt;/strong>：MRU——最近经常撩的，加到鱼塘里、LRU——最近不咋联系的，踢出鱼塘。&lt;/li>
&lt;li>&lt;strong>命中率高、失效率低，性能好&lt;/strong>：鱼塘里都是鱼，鱼还很活跃，随便撩一下都是鱼，你说那啥效率高不高？&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527150414981.png" alt="image-20220527150414981">&lt;/p>
&lt;h2 id="性能工程涉及的数学模型">性能工程涉及的数学模型&lt;/h2>
&lt;h3 id="amdahl扩展定律">Amdahl扩展定律&lt;/h3>
&lt;p>由计算机科学家阿姆达尔，在1967年AFIPS春季联合计算机会议上提出。&lt;/p>
&lt;p>这个阿姆达尔扩展定律的目的是为了预测性能优化到什么程度。&lt;/p>
&lt;p>阿姆达尔定律本质上用严谨的公式证明了&amp;quot;木桶原理&amp;rdquo;——无法优化的那个部件决定了性能优化的上线。&lt;/p>
&lt;p>如果：1个单线程的程序需要20小时，其中有1个小时无法并行化处理，&lt;/p>
&lt;p>那么：将剩余19小时并行化了，最短执行时间也不可能小于1小时。&lt;/p>
&lt;p>因此：我们就可以预测性能优化后可以加速20倍。&lt;/p>
&lt;p>道理很通俗，但科学家需要严谨的公式推导，详细推导过程可以看看维基百科：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">https://en.wikipedia.org/wiki/Amdahl%27s_law&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>但阿姆达尔定律有一个缺陷：以上述案例，是不是我们19个小时的任务并行化，就一定可以将性能优化到1小时呢？&lt;/p>
&lt;p>显然不是——随着CPU增加，可能会达到一个瓶颈点，随后无论怎么增加CPU，性能也不会优化了。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527160717677.png" alt="image-20220527160717677">&lt;/p>
&lt;h3 id="通用扩展定律">通用扩展定律&lt;/h3>
&lt;p>通用扩展定律：Universal Scalability Law，USL。由计算机科学家Neil J. Gunther于2008年提出。&lt;/p>
&lt;p>这个定律就是用来更加精细化地预测：当我持续增加资源，实际的性能优化与阿姆达尔定律的理想化性能优化的偏移量。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E6%80%A7%E8%83%BD%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85%E7%AC%94%E8%AE%B0-%E4%B8%8A/image-20220527161219066.png" alt="image-20220527161219066">&lt;/p>
&lt;h3 id="排队论">排队论&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Agner_Krarup_Erlang">Agner Krarup Erlang&lt;/a>于1909年第一次提出了排队理论。&lt;/p>
&lt;p>排队论描述了现实世界中有形、无形的各种排队场景。比如：12306抢票、网红店取号排队、超市排队买单等。&lt;/p>
&lt;p>顾客肯定希望排队越短越好、办事儿时间越快越好。超市安排过多的收银员就浪费了，安排太少的收银员又会被顾客投诉。&lt;/p>
&lt;p>顾客肯定不是按顺序一个个来超市，有可能在一个热点时间一拥而上来超市。&lt;/p>
&lt;p>超市的排队规则是先到先处理，但是车牌摇号就是随机处理了。&lt;/p>
&lt;p>……&lt;/p>
&lt;p>上述这些，就是排队论研究的内容：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>被服务者的到达遵循何种分布&lt;/strong>：如泊松分布。&lt;/li>
&lt;li>&lt;strong>服务机构的服务能力遵循何种统计特征&lt;/strong>：如每个收银员的处理速度。&lt;/li>
&lt;li>&lt;strong>排队的原则是什么&lt;/strong>：如先到先处理or随机处理。&lt;/li>
&lt;li>&lt;strong>排队的Topo结构&lt;/strong>：如超市最多放下10个收银台，那就有10条并行的排队结构。&lt;/li>
&lt;/ul>
&lt;p>最终排队论给出评估：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>怎么排队，收益最大&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>Brendan Gregg的核心观点是：&lt;/p>
&lt;ul>
&lt;li>无论应用程序，还是CPU、IO、网络、磁盘都可以用排队模型化。&lt;/li>
&lt;li>按照排队论，多种性能优化手段，最终一定有一个从&amp;quot;运筹学&amp;quot;上性能收益最大的选择。&lt;/li>
&lt;/ul>
&lt;p>理解排队论的推导，对于笔者还很困难，各位读者有兴趣可以参考相关资料：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://zh.m.wikipedia.org/zh-sg/%E7%AD%89%E5%80%99%E7%90%86%E8%AB%96">https://zh.m.wikipedia.org/zh-sg/%E7%AD%89%E5%80%99%E7%90%86%E8%AB%96&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="基本统计指标">基本统计指标&lt;/h3>
&lt;p>平均值、标准方差、百分位数、中位数、变异系数、多重模态分布、异常值，这些都是数理统计的基本概念，不赘述了。&lt;/p>
&lt;h1 id="4第一章第二章小结">4.第一章/第二章小结&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>未知的未知&lt;/strong>：Brendan Gregg的观点很赞，知道的越多就更容易知道自己的无知。&lt;/li>
&lt;li>&lt;strong>性能工程的视角&lt;/strong>：利用操作系统的工具链定位出CPU/内存/IO/网络的瓶颈找到性能切入点，进而定位到应用程序的进程/线程，虽然技能要求高，但能获得逻辑自洽的逻辑链，比撞大运靠谱。&lt;/li>
&lt;li>&lt;strong>性能工程的工程方法依托于数学&lt;/strong>：阿姆达尔定律、通用扩展定律、排队论，世界的尽头果然是数学啊。&lt;/li>
&lt;/ul>
&lt;h1 id="5参考文献">5.参考文献&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">《性能之巅》第一章、第二章
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>【宏观】-0-浅谈数据仓库</title><link>https://jherculesqz.github.io/post/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</link><pubDate>Sun, 20 Mar 2022 10:00:59 +0800</pubDate><guid>https://jherculesqz.github.io/post/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</guid><description>&lt;p>国内的数据行业领域大致有&lt;strong>3个市场分水岭&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>2008年以前，&lt;strong>关系型数据库厂商&lt;/strong>领军，以&lt;code>MySQL、Oracle、SQLServer&lt;/code>为代表。&lt;/li>
&lt;li>2008年~2012年，与关系型数据库竞争的各类&lt;strong>NoSQL厂商&lt;/strong>异军突起，以&lt;code>Hadoop生态、MongoDB、Neo4j&lt;/code>等为代表。&lt;/li>
&lt;li>2012年至今，&lt;strong>云厂商&lt;/strong>巨头挥舞着&lt;code>大数据、云原生、中台、数据集市、数据湖&lt;/code>等旗帜一统江湖，以&lt;code>亚马逊、阿里云、华为云&lt;/code>为代表。&lt;/li>
&lt;/ul>
&lt;p>2022年的今天，如何透过这些漫天飞舞的大数据概念与术语，看清它们的技术本质、在To B的产品中落地呢？&lt;/p>
&lt;p>笔者试图通过**《数据仓库(Building the Data Warehouse)-第四版》**这本经典著作的思想脉络进行阐述。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220320221544975.png" alt="image-20220320221544975">&lt;/p>
&lt;h1 id="1数据江湖恩仇录">1.数据江湖恩仇录&lt;/h1>
&lt;h2 id="11数据仓库的初创期">1.1.数据仓库的初创期&lt;/h2>
&lt;p>**《数据仓库(Building the Data Warehouse)-第四版》**包含了有3份序言(第2版序言、第3版序言、第4版序言)。&lt;/p>
&lt;p>从第2版序言、第3版序言看，&lt;strong>在1995年之前，刚兴起的数仓理论不太受待见&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>数据库学者&lt;/code>不太接受&lt;code>数据仓库理论&lt;/code>：
&lt;ul>
&lt;li>从学术看，数仓理论只是&lt;code>空洞的新概念&lt;/code>。&lt;/li>
&lt;li>从实践看，似乎没有必要将数据从原有的数据库集群(事务型)中分出来，存入另一个数据库集群(分析型)中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>商业投资人&lt;/code>也不太看好&lt;code>数据仓库&lt;/code>：
&lt;ul>
&lt;li>似乎那个年代的资本兴趣点在互联网。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>从第4版序言看，&lt;strong>在1996年之后，数仓开始成熟并商业落地&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>第4版序言只用了&lt;strong>一句话的盖棺定论&lt;/strong>：&lt;code>数据仓库对于那些赞同传统数据库理论的人来说是一种智力上的威胁。&lt;/code>&lt;/li>
&lt;li>第4版序言大篇幅在阐述：
&lt;ul>
&lt;li>架构：设计数仓的关键架构理论。&lt;/li>
&lt;li>需求：数据设计的关键方法论。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>详见《数据仓库(Building the Data Warehouse)-第四版》的序言章节。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220320225621296.png" alt="image-20220320225621296">&lt;/p>
&lt;h2 id="12数据仓库的成熟期">1.2.数据仓库的成熟期&lt;/h2>
&lt;p>随着数据仓库理论的成熟与落地，出现了数据仓库的两大宗师：Inmon和Kimball。&lt;/p>
&lt;blockquote>
&lt;p>Inmon就是《数据仓库(Building the Data Warehouse)-第四版》的作者。&lt;/p>
&lt;/blockquote>
&lt;p>这两位宗师好似&lt;strong>气宗与剑宗&lt;/strong>，代表了数仓理论的2大流派。&lt;/p>
&lt;p>两位宗师的理论有很多&lt;strong>相似点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对&lt;strong>数仓的作用&lt;/strong>理解一致：产品的数据库中存储的是&lt;strong>事务型数据&lt;/strong>，而数仓中存储的是&lt;strong>分析型数据&lt;/strong>，这些分析型数据是为了商业智能做决策的。
&lt;ul>
&lt;li>比如：淘宝存储了每个人的下单、付款、收货等记录，这属于事务型数据。&lt;/li>
&lt;li>比如：淘宝对进行用户画像，商品推荐等产生的数据，这属于分析型数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对&lt;strong>数仓的架构&lt;/strong>理解一致：都认为&lt;strong>需要进行数仓分层&lt;/strong>，也都认同每一个数仓架构中的组件都会衍生出一个&lt;strong>垂直技术领域&lt;/strong>。
&lt;ul>
&lt;li>比如：数仓中的数据需要分为贴源数据层、明细数据层、主题数据层、应用数据层等——这些&lt;strong>数仓/数据湖中O表、D表、A表&lt;/strong>的理论基础。&lt;/li>
&lt;li>比如：数据采集要有针对不同类型的数据的采集基础设施——这就是现在&lt;strong>大数据领域中的ETL&lt;/strong>的理论基础。&lt;/li>
&lt;li>比如：数据存储、数据计算要依托于高性能/高HA的基础设施——这就是现在&lt;strong>HBase、Hive、Kafka、Kylin&lt;/strong>等中间件的理论基础。&lt;/li>
&lt;li>比如：数仓中的数据要能识别出血缘关系、数据质量属性——这就是&lt;strong>Atlas&lt;/strong>等中间件的理论基础。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>两位宗师的理论最大的&lt;strong>分歧点&lt;/strong>：在于业务数据建模的方法论。&lt;/p>
&lt;ul>
&lt;li>在2022年的今天看来，Kimball的维度建模理论应该变成了主流。&lt;/li>
&lt;/ul>
&lt;p>为什么&lt;strong>维度建模&lt;/strong>最终胜出呢？笔者有两个粗浅的猜测：&lt;/p>
&lt;ul>
&lt;li>猜测1：&lt;strong>维度建模理论更接地气&lt;/strong>。
&lt;ul>
&lt;li>从Inmon大师的这本《数据仓库(Building the Data Warehouse)-第四版》书，真的很难看懂他的方法论如何落地。&lt;/li>
&lt;li>而从Kimball大师的各种论文与书籍中，更容易理解维度建模的思想。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>猜测2：&lt;strong>维度建模的案例更多&lt;/strong>。
&lt;ul>
&lt;li>Kimball大师背后是一家商业咨询公司，出版/发布的数仓书籍与论文中，包含了很多维度建模的行业案例。&lt;/li>
&lt;li>而Inmon大师，在《数据仓库(Building the Data Warehouse)-第四版》这本书中仅仅在第13章、第15/17/18/19章中谈到了一些High Level的建模方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>详见《数据仓库(Building the Data Warehouse)-第四版》的目录。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220320232816716.png" alt="image-20220320232816716">&lt;/p>
&lt;h2 id="13数据仓库的修仙期">1.3.数据仓库的修仙期&lt;/h2>
&lt;p>从1995年数仓理论成熟至今，数仓慢慢开始神话。&lt;/p>
&lt;ul>
&lt;li>微软推出商业智能的概念以及PowerBI产品，微软的PowerBI一统江湖了很多年。&lt;/li>
&lt;li>在被微软垄断的那些年，数仓属于企业级高端玩家才会触及的高端货，因此也没啥新的突破。&lt;/li>
&lt;li>到了2012年移动互联网的爆发，数仓借着&lt;code>大数据&lt;/code>开始神话，出现了&lt;code>Hadoop、Spark、MongoDB、Kafka&lt;/code>等一大堆IT基础中间件，也出现了&lt;code>数据中台、数据湖&lt;/code>等一大堆新的技术名词。&lt;/li>
&lt;/ul>
&lt;h1 id="2如何抓住大数据时代的技术主线">2.如何抓住大数据时代的技术主线?&lt;/h1>
&lt;h2 id="21为什么数仓理论是技术主线">2.1.为什么数仓理论是技术主线？&lt;/h2>
&lt;p>从30多年前的数据仓库，到今天的大数据时代，各种架构概念、业务概念，你方唱罢我登场。&lt;/p>
&lt;p>从2021年开始，国家又推出了&lt;code>企业数字化转型&lt;/code>的政策，各企业随之兴起了&lt;code>企业数字化&lt;/code>的风潮。&lt;/p>
&lt;p>作为架构师、程序猿的我们，&lt;strong>如何才能抓住大数据时代的技术主线&lt;/strong>？&lt;/p>
&lt;p>笔者认为，&lt;strong>数仓就是这条技术主线&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从需求看，企业用户低估计&lt;strong>数字化&lt;/strong>难度造成项目失败后，会催生对&lt;strong>掌握数仓方法论的技术人才&lt;/strong>的需求：&lt;/p>
&lt;ul>
&lt;li>企业用户低估&lt;strong>数字化&lt;/strong>难度的原因：
&lt;ul>
&lt;li>认为什么原始数据都有——比如：客户的订单数据、商品浏览数据、物流数据等。&lt;/li>
&lt;li>认为数字化等于一个数据大屏——比如：看看什么商品利润高、该给什么客户推送什么商品等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>缺乏理论指导，大数据沦为数据大&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>缺乏业务设计&lt;/strong>：大屏上要展示哪些报表，这些报表最终说明了什么业务问题？这些报表最终可以得出什么决策结论？&lt;/li>
&lt;li>&lt;strong>缺乏数据分析与设计&lt;/strong>：为了获得最终展示在大屏上的报表，需要哪些中间层数据，这些中间层数据又通过哪些原始数据可以得到？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>数仓方法论如何解决问题&lt;/strong>？
&lt;ul>
&lt;li>&lt;strong>聚焦业务决策&lt;/strong>：数仓理论的核心思想是要数据分析师回答依托报表，到底可以得到怎样的商业决策。&lt;/li>
&lt;li>&lt;strong>自顶而下&lt;/strong>：数仓理论的落地过程是先确定业务过程-&amp;gt;数据维度-&amp;gt;数据粒度，得出需要哪些中间数据；再确定数据事实，最终得出需要采集哪些原始数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>从架构看，&lt;strong>数仓理论可以直击本质，将纷繁的大数据中间件串联&lt;/strong>起来：&lt;/p>
&lt;ul>
&lt;li>数仓原始数据采集相关的中间件：Flume、Kafka、Sqoop等。&lt;/li>
&lt;li>数仓数据存储相关的中间件：MySQL、HBase、Redis、MongoDB等。&lt;/li>
&lt;li>数仓数据计算相关的中间件：Hive，Spark，Flink，Storm等。&lt;/li>
&lt;li>数仓的即席查询、多维分析相关的中间件：Presto，Kylin等。&lt;/li>
&lt;li>数仓的任务调度、集群监控相关的中间件：Azkaban、Zabbix，Prometheus等。&lt;/li>
&lt;li>数仓的数据可视化相关的中间件有：Superset、DataV、PowerBI等。&lt;/li>
&lt;li>数仓的元数据管理相关的中间件有：Altas等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="22数仓理论的3个关键步骤">2.2.数仓理论的3个关键步骤&lt;/h2>
&lt;p>基于《数据仓库(Building the Data Warehouse)-第四版》，笔者绘制了一幅数仓落地概念图：&lt;/p>
&lt;ul>
&lt;li>STEP1.开展&lt;strong>数仓架构设计&lt;/strong>。&lt;/li>
&lt;li>STEP2.开展&lt;strong>数仓业务数据设计&lt;/strong>。&lt;/li>
&lt;li>STEP3.开展&lt;strong>数仓业务实现&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220321003857002.png" alt="image-20220321003857002">&lt;/p>
&lt;h3 id="221第一步数仓架构设计">2.2.1.第一步，数仓架构设计&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220321004653607.png" alt="image-20220321004653607">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>此步骤的主要角色&lt;/strong>：软件架构师&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件架构师的能力模型&lt;/strong>：熟练掌握各类大数据中间件，而不必太纠结具体的业务细节：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>掌握ODS数据获取的工具：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据采集相关&lt;/strong>：Flume、Kafka、Sqoop等。&lt;/li>
&lt;li>&lt;strong>数据存储相关&lt;/strong>：MySQL、HBase、Redis、MongoDB等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>掌握DW层的工具：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据计算相关：Hive，Spark，Flink，Storm等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据查询相关：Presto，Kylin等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>元数据管理、数据质量相关：Altas等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务调度、集群监控相关：Azkaban、Zabbix，Prometheus等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据可视化相关：Superset、DataV、PowerBI等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>详见《数据仓库(Building the Data Warehouse)-第四版》的第2章、第5~11章、第14章。&lt;/p>
&lt;/blockquote>
&lt;h3 id="222第二步开展数仓业务数据设计">2.2.2.第二步，开展数仓业务数据设计&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220321005338557.png" alt="image-20220321005338557">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>此步骤的主要角色&lt;/strong>：业务数据分析师&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>业务数据分析师的能力模型&lt;/strong>：熟练掌握维度建模。&lt;/p>
&lt;ul>
&lt;li>维度建模本质是一种&lt;strong>反模式&lt;/strong>，打破了关系型数据库的三范式(1NF、2NF、3NF)，即允许数据的冗余。&lt;/li>
&lt;li>&lt;strong>设计维度表&lt;/strong>：维度表通常是&lt;strong>宽表&lt;/strong>，从不同维度对数据进行聚合。&lt;/li>
&lt;li>&lt;strong>设计事实表&lt;/strong>：事实表通常是&lt;strong>窄表&lt;/strong>，记录具体的事实。&lt;/li>
&lt;li>&lt;strong>设计贴源表&lt;/strong>：说明从哪里采集原始数据，在这一层不会对原始数据进行任何处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这么讲很抽象，笔者举&lt;strong>一个通俗的例子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>站在ADS层：可以认为企业老板&lt;strong>想吃一桌川菜&lt;/strong>。
&lt;ul>
&lt;li>怎么理解一桌川菜呢？可能包含水煮鱼、鱼香肉丝、宫保鸡丁、干锅花菜、四川凉糕。&lt;/li>
&lt;li>这就是ADS层，贴近业务，是最终客户能理解的东西。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>站在DW层的维度表：可以类比是各道菜的菜谱。
&lt;ul>
&lt;li>比如：水煮鱼可以类比川菜中鱼这个维度的典型做法。&lt;/li>
&lt;li>比如：鱼香肉丝可以类比川菜中猪肉这个维度的典型做法。&lt;/li>
&lt;li>比如：四川凉糕可以类比川菜中甜品这个维度的典型做法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>站在DW层的事实表：可以类比各道菜菜谱涉及的食材。
&lt;ul>
&lt;li>比如：水煮鱼需要用到1条草鱼、3个朝天椒……&lt;/li>
&lt;li>比如：鱼香肉丝需要1斤猪肉、1个朝天椒……&lt;/li>
&lt;li>比如：干锅花菜需要1棵花菜、1个朝天椒……&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>站在ODS层：可以类比为最后厨房小工的采购清单：
&lt;ul>
&lt;li>厨房小工最后看到的清单会汇总。&lt;/li>
&lt;li>汇总的原始清单可能从不同菜市场购买(不同原始数据来源)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>详见《数据仓库(Building the Data Warehouse)-第四版》的第13章、第15章、第17~19章。&lt;/p>
&lt;/blockquote>
&lt;h3 id="223第三步开展数仓业务实现">2.2.3.第三步，开展数仓业务实现&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91-0-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220321005242474.png" alt="image-20220321005242474">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>此步骤的主要角色&lt;/strong>：业务数据分析师、ETL开发人员&lt;/li>
&lt;li>&lt;strong>业务数据分析师的能力模型&lt;/strong>：通常一些商业化产品都带有可视化的建模工具，业务数据分析师可以通过&lt;code>No Code，Low Code&lt;/code>的方式进行维度建模。&lt;/li>
&lt;li>&lt;strong>开发人员的能力模型&lt;/strong>：会使用ETL工具，或自研代码，从不同数据源获取数据并存储到数据库中。&lt;/li>
&lt;/ul>
&lt;h1 id="3参考文献">3.参考文献&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">《数据仓库(Building the Data Warehouse)-第四版》
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>【置顶】Java拾遗</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BD%AE%E9%A1%B6java%E6%8B%BE%E9%81%97/</link><pubDate>Fri, 05 Nov 2021 16:32:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BD%AE%E9%A1%B6java%E6%8B%BE%E9%81%97/</guid><description>&lt;p>Java是个庞大的体系，心中有许多想写下来的内容。&lt;/p>
&lt;p>陆续写了一些后，自己的表达脉络也逐渐清晰起来。&lt;/p>
&lt;p>就用此文将已经发布的、即将编写的文章汇总起来，便于读者阅读。&lt;/p>
&lt;h1 id="宏观">宏观&lt;/h1>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82%E7%90%86%E8%A7%A3java%E6%A6%82%E5%BF%B5%E5%9B%BE/">【宏观】从Java概念图理解Java体系&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/">【宏观】如何更加深入理解Java虚拟机&lt;/a>&lt;/p>
&lt;h1 id="jvm">JVM&lt;/h1>
&lt;h2 id="前端编译">前端编译&lt;/h2>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-1-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%9A%84%E6%84%8F%E4%B9%89/">【编译引擎】 1 学习阅读Class文件结构的意义&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8A/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-上&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%AD/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-中&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8B/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-下&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84javap%E7%89%88/">【编译引擎】-3-学习阅读Class文件结构(javap版)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/">【编译引擎】-4-学习阅读Class文件指令-概览&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/">【编译引擎】-8-阅读前端编译源码的准备工作&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/">【编译引擎】-9-阅读前端编译源码-词法分析-1&lt;/a>&lt;/p>
&lt;h2 id="类加载">类加载&lt;/h2>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6-0-%E4%BB%8E%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%80%E5%A7%8B/">【类加载机制】-0-从一道面试题开始&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6-1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%89%96%E6%9E%90-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%80%9F%E8%A7%88/">【类加载机制】-1-类加载器剖析-类加载器速览&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6-8-init%E9%98%B6%E6%AE%B5%E7%BB%86%E8%8A%82-%E9%A1%BA%E5%BA%8F%E5%86%8D%E8%B0%88%E8%B5%8B%E5%80%BC-%E4%B8%8A/">【类加载机制】-8-Init阶段细节-顺序，再谈赋值-上&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6-8-init%E9%98%B6%E6%AE%B5%E7%BB%86%E8%8A%82-%E9%A1%BA%E5%BA%8F%E5%86%8D%E8%B0%88%E8%B5%8B%E5%80%BC-%E4%B8%8B/">【类加载机制】-8-Init阶段细节-顺序，再谈赋值-下&lt;/a>&lt;/p>
&lt;h2 id="运行时数据区">运行时数据区&lt;/h2>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA-0-%E7%94%A8%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84%E8%A7%86%E8%A7%92%E7%90%86%E8%A7%A3%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/">【运行时数据区】-0-用仓库管理员的视角理解运行时数据区&lt;/a>&lt;/p>
&lt;h2 id="垃圾回收">垃圾回收&lt;/h2>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-0-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BD%93%E7%B3%BB%E7%9A%84%E4%B8%BB%E8%84%89%E7%BB%9C/">【垃圾回收】-0-垃圾回收体系的主脉络&lt;/a>&lt;/p>
&lt;h2 id="执行引擎">执行引擎&lt;/h2>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-0-%E9%9A%8F%E6%9C%BA%E5%BA%94%E5%8F%98+%E6%9C%89%E5%A4%87%E8%80%8C%E6%9D%A5/">【执行引擎】-0-随机应变+有备而来&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/">【执行引擎】-1-理清前端编译、即时编译、提前编译&lt;/a>&lt;/p>
&lt;h1 id="工具链">工具链&lt;/h1>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%B7%A5%E5%85%B7-0-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82jdk%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/">【工具】-0-一文搞懂JDK命令行工具&lt;/a>&lt;/p>
&lt;h1 id="java新特性">Java新特性&lt;/h1>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-0-%E5%AD%A6%E4%B9%A0java%E6%96%B0%E7%89%B9%E6%80%A7%E5%A6%82%E4%BD%95%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5/">【Java新特性】-0-学习Java新特性，如何快人一步&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-2-java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/">【Java新特性】-2-Java9新特性宏观解读&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-3-java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/">【Java新特性】-3-Java9的类加载机制变化&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-4-java9-stackwalker/">【Java新特性】-4-Java9-StackWalker&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91Java%E6%8B%BE%E9%81%97/image-20211014110327766.png" alt="image-20211014110327766">&lt;/p></description></item><item><title>【编译引擎】-9-阅读前端编译源码-词法分析-1</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/</link><pubDate>Fri, 05 Nov 2021 15:05:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/</guid><description>&lt;h1 id="1编译器的宏观过程">1.编译器的宏观过程&lt;/h1>
&lt;p>下图摘自《Compilers, Principles, Techniques, &amp;amp;Tools》(后文简称&lt;strong>龙书&lt;/strong>)，描述了编译器工作时的宏观过程，每个方块表示编译器内部的一个&amp;quot;模块&amp;rdquo;，每个箭头表示该模块的&amp;quot;输入&amp;quot;与&amp;quot;输出&amp;rdquo;：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105093625343.png" alt="image-20211105093625343">&lt;/p>
&lt;p>下图摘自《现代编译原理-C语言描述》(后文简称&lt;strong>虎书&lt;/strong>)，进一步细化了编译器的宏观流程：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105093134007.png" alt="image-20211105093134007">&lt;/p>
&lt;p>上述环节复杂且技术术语繁多，我们可以结合JVM的特点，以及即将剖析的javac源码，做了部分抽象与精简：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105094818994.png" alt="image-20211105094818994">&lt;/p>
&lt;p>从上图看，笔者做了2个抽象：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>简化步骤&lt;/strong>：将涉及&lt;code>优化&lt;/code>、&lt;code>分析&lt;/code>的环节简化为&lt;code>代码优化&lt;/code>。&lt;/li>
&lt;li>&lt;strong>步骤分组&lt;/strong>：将6个步骤分为&lt;code>前端编译&lt;/code>和&lt;code>后端编译&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>简化步骤比较好理解，重点看看对步骤的分组——在龙书中，对&lt;code>前端编译(frontend)&lt;/code>和&lt;code>后端编译(backend)&lt;/code>做了定义：&lt;/p>
&lt;blockquote>
&lt;p>分析部分的环节被称作&lt;code>前端编译(frontend)&lt;/code>，综合部分的环节被称作&lt;code>后端编译(backend)&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105101708866.png" alt="image-20211105101708866">&lt;/p>
&lt;p>怎么理解&lt;code>分析部分&lt;/code>和&lt;code>综合部分&lt;/code>呢？站在JVM的角度看：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分析部分&lt;/strong>：从java源代码生成字节码的过程就属于分析部分，即对&lt;code>源码&lt;/code>进行分析，最终分解为多个组成元素的过程。&lt;/li>
&lt;li>&lt;strong>综合部分&lt;/strong>：对JVM正在执行的字节码进行JIT就属于综合部分，即从C1、C2等层次进行优化，最终生成CPU可以执行的机器码。&lt;/li>
&lt;/ul>
&lt;p>在很多现代编译器中，不仅和JVM一样将编译过程分为前后端，并且一个编译器还可能包含多个&lt;strong>前端编译器(frontend)&lt;strong>和多个&lt;/strong>后端编译器(backend)&lt;/strong>，用来应对不同的应用场景。&lt;/p>
&lt;h1 id="2javac在宏观过程中的位置">2.javac在宏观过程中的位置&lt;/h1>
&lt;p>回顾了编译器的宏观流程，javac本质上属于&lt;strong>前端编译器&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105100413500.png" alt="image-20211105100413500">&lt;/p>
&lt;p>从javac的源码中，可以看到如下几个核心的package，分别覆盖了词法分析、语法分析和语义分析。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105100722357.png" alt="image-20211105100722357">&lt;/p>
&lt;h1 id="3词法分析的概念">3.词法分析的概念&lt;/h1>
&lt;p>我们通过解读龙书中这段话，来理解一下&lt;code>词法分析&lt;/code>中的几个关键概念：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105105314706.png" alt="image-20211105105314706">&lt;/p>
&lt;p>&lt;code>词法分析(Lexical Analysis)&lt;/code>：将源代码字符流拆解成一个个的子元素，每个子元素叫做&lt;code>词素(lexeme)&lt;/code>，进一步将词素转换为&lt;code>词法单元(Token)&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>说明1：1个源代码文件会包含N个&lt;code>词素&lt;/code>，每个词素会转换为1个&lt;code>Token&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>说明2：词法单元最终会存储到&lt;code>符号表(Symbol Table)&lt;/code>中。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105110450245.png" alt="image-20211105110450245">&lt;/p>
&lt;p>举一个具体的例子(代码片段原子龙书)：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initial&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">60&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在词法分析过程中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>position被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;identifier, 1&amp;gt;&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>其中，identifier后文简写为id，1是该token在&lt;code>符号表&lt;/code>中的位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>=被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;assign(=)&amp;gt;&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>其中，=是一个赋值运算符，因此它对应的&lt;code>词法单元(Token)&lt;/code>没有&lt;code>attribute-value&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>initial被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;identifier, 2&amp;gt;&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>+被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;assign(+)&amp;gt;&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rate被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;identifier, 3&amp;gt;&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>*被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;assign(*)&amp;gt;&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>60被提取为1个&lt;code>词素(lexeme)&lt;/code>，该词素被映射为1个&lt;code>词法单元(Token)&lt;/code>——&lt;strong>&amp;lt;number, 4&amp;gt;&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>最终，词法分析输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="o">(=)&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="o">(+)&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="o">(*)&amp;gt;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105113030363.png" alt="image-20211105113030363">&lt;/p>
&lt;h1 id="4javac中对词素的具体实现-name-and-table">4.javac中对词素的具体实现-Name and Table&lt;/h1>
&lt;p>在javac的源码中，定义了Name和Table，基本可以与&lt;code>词素(lexeme)&lt;/code>对应：&lt;/p>
&lt;ul>
&lt;li>&lt;code>com/sun/tools/javac/util/Name.java&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/util/SharedNameTable.java#NameImpl&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/util/Names.java&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/util/Name.java#Table&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/util/SharedNameTable.java&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="41comsuntoolsjavacutilnamejava">4.1.com/sun/tools/javac/util/Name.java&lt;/h2>
&lt;h3 id="从属性看">从属性看&lt;/h3>
&lt;p>Name对象的本质是将源代码中的单词、符号分词了，每个分词就是一个Name对象。&lt;/p>
&lt;p>有2个关键点需要注意：&lt;/p>
&lt;ul>
&lt;li>源代码字符流在javac是中是以&lt;code>byte[]&lt;/code>存储的，所以Name对象包含了1个byteArray属性，该属性存储了当前Name对象对应的源代码子字符流。&lt;/li>
&lt;li>相同&lt;code>内容&lt;/code>的分词是&lt;strong>同一个Name对象&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105114107760.png" alt="image-20211105114107760">&lt;/p>
&lt;h3 id="从方法看">从方法看&lt;/h3>
&lt;p>Name对象提供了对Name对象本身、Name对象之间的各种操作。&lt;/p>
&lt;p>有1个关键点需要注意：&lt;/p>
&lt;ul>
&lt;li>Table对象将源代码字符流转换成了byte数组，为了提升性能，实现了&lt;code>输入缓冲&lt;/code>和&lt;code>哨兵标记&lt;/code>(详见龙书，后文解读&lt;code>JavaCompiler#readSource方法&lt;/code>也会展开)。因此，Name对象中提供了诸如&lt;code>getByteArray()&lt;/code>、&lt;code>getByteAt()&lt;/code>等方法，从该Name对象所属的Table对象中反查对应的源代码字符流。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105114821297.png" alt="image-20211105114821297">&lt;/p>
&lt;h2 id="42comsuntoolsjavacutilsharednametablejavanameimpl">4.2.com/sun/tools/javac/util/SharedNameTable.java#NameImpl&lt;/h2>
&lt;h3 id="从属性看-1">从属性看&lt;/h3>
&lt;p>&lt;code>NameImpl&lt;/code>类是&lt;code>SharedNameTable&lt;/code>类中的内部类。&lt;/p>
&lt;blockquote>
&lt;p>疑惑：笔者没有理解为什么要如此设计。&lt;/p>
&lt;/blockquote>
&lt;p>其中，有1个关键点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>NameImpl对象&lt;/code>中维护了&lt;code>next&lt;/code>属性，这就要说到&lt;code>Table对象&lt;/code>的实现——&lt;code>Table对象&lt;/code>按照HashTable实现，HashTable的Key是每个&lt;code>Name对象&lt;/code>的&lt;code>hashCode&lt;/code>，Value是对应的&lt;code>NameImpl对象&lt;/code>。当1个新的&lt;code>NameImpl对象&lt;/code>准备加入到HashTable时，如果Key发生hash冲突时，就会将这个新的&lt;code>NameImpl对象&lt;/code>加到这个Key对应的已经存在的&lt;code>NameImpl对象&lt;/code>的next属性中，形成一个单链表。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105115710065.png" alt="image-20211105115710065">&lt;/p>
&lt;h3 id="从行为看">从行为看&lt;/h3>
&lt;p>从行为上看，只是具体实现了Name基类的&lt;code>getByteXxx方法&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105141543612.png" alt="image-20211105141543612">&lt;/p>
&lt;h2 id="43comsuntoolsjavacutilnamesjava">4.3.com/sun/tools/javac/util/Names.java&lt;/h2>
&lt;h3 id="从属性看-2">从属性看&lt;/h3>
&lt;p>&lt;code>Names对象&lt;/code>维护了N个&lt;code>Name对象&lt;/code>，这些&lt;code>Name对象&lt;/code>就是Java中定义的关键字、保留字。&lt;/p>
&lt;p>&lt;code>Names对象&lt;/code>还维护了&lt;code>Table对象&lt;/code>。&lt;/p>
&lt;p>这里也有2个关键点：&lt;/p>
&lt;ul>
&lt;li>这些关键字、保留字类型的&lt;code>Name对象&lt;/code>在&lt;code>JavaCompiler&lt;/code>初始化时就会被创建出来。&lt;/li>
&lt;li>当正式开始词法分析的时，在解读源代码字符流时，会去获取已经缓存的这些关键字、保留字&lt;code>Name对象&lt;/code>，而不需要动态创建。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java拾遗/【编译引擎】-9-阅读前端编译源码-词法分析-1/image-20211105141807347.png" alt="image-20211105141807347" style="zoom:50%;" />&lt;/p>
&lt;h3 id="从行为看-1">从行为看&lt;/h3>
&lt;p>&lt;code>Names对象&lt;/code>提供了&lt;code>fromXxx方法&lt;/code>，这些方法的实现会去调用&lt;code>Table对象&lt;/code>的接口，这些方法更新&lt;code>Table对象&lt;/code>(如：更新Hash表，解决Hash冲突等)，并返回&lt;code>Name对象&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105142706561.png" alt="image-20211105142706561">&lt;/p>
&lt;h2 id="44comsuntoolsjavacutilnamejavatable">4.4.com/sun/tools/javac/util/Name.java#Table&lt;/h2>
&lt;h3 id="从属性看-3">从属性看&lt;/h3>
&lt;p>&lt;code>Table对象&lt;/code>维护了&lt;code>Names对象&lt;/code>，前文已经描述了&lt;code>Names对象&lt;/code>中维护了多个关键字、保留字的&lt;code>Name对象&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105151027295.png" alt="image-20211105151027295">&lt;/p>
&lt;h3 id="从行为看-2">从行为看&lt;/h3>
&lt;p>提供了给&lt;code>Names对象&lt;/code>调用的&lt;code>fromXxx方法&lt;/code>，这些方法更新&lt;code>Table对象&lt;/code>(如：更新Hash表，解决Hash冲突等)，并返回&lt;code>Name对象&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105151037438.png" alt="image-20211105151037438">&lt;/p>
&lt;h2 id="45comsuntoolsjavacutilsharednametablejava">4.5.com/sun/tools/javac/util/SharedNameTable.java&lt;/h2>
&lt;h3 id="从属性看-4">从属性看&lt;/h3>
&lt;p>&lt;code>SharedNameTable&lt;/code>是&lt;code>Table&lt;/code>的具体实现类。&lt;/p>
&lt;p>&lt;code>SharedNameTable&lt;/code>对象维护了hashes属性，是Hash表的具体实现，其中&lt;code>NameImpl[]&lt;/code>的数组索引是每个&lt;code>NameImpl对象&lt;/code>的hashCode。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105151550397.png" alt="image-20211105151550397">&lt;/p>
&lt;h3 id="从行为看-3">从行为看&lt;/h3>
&lt;p>关键点还是Hash表的具体实现，具体以fromChars方法的代码注释：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Name&lt;/span> &lt;span class="nf">fromChars&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">cs&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ：获得bytes数组中下一个可用的位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">nc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//HCZ：对bytes数组进行扩容(如果有必要)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ArrayUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ensureCapacity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//HCZ：将char数组转换为byte数组，并且写入到bytes属性中，返回bytes属性中最后的index，得到byte数组的长度。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">nbytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Convert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">chars2utf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cs&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nc&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">nc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//HCZ：根据bytes数组中下一个可用位置(也就是新写入的char数组的startIndex)、根据新写入的char数组转换后的byte数组长度，计算得到hashCode。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nc&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nbytes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">hashMask&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//HCZ：从hashes数组中(就是NameImpl对象数组)，获得与新计算出来的hashCode相同的冲突NameImpl对象。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">NameImpl&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashes&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="c1">//HCZ：如果能找到冲突的NameImpl对象，说明hashCode冲突了，就将NameImpl对象的next指向新的NameImpl对象，形成单链表。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getByteLength&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">nbytes&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="o">!&lt;/span>&lt;span class="n">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">index&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nc&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nbytes&lt;/span>&lt;span class="o">)))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//HCZ：如果没有找到冲突的NameImpl对象，就创建新的NameImpl对象，并记录到hashes属性。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NameImpl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nbytes&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashes&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">hashes&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">nbytes&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">nbytes&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nc&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="5javac中对词法单元的具体实现-tokenkind-and-token">5.javac中对词法单元的具体实现-TokenKind and Token&lt;/h1>
&lt;p>在javac的源码中，定义了TokenKind和Token，基本可以与&lt;code>词法单元(Token)&lt;/code>对应：&lt;/p>
&lt;ul>
&lt;li>&lt;code>com/sun/tools/javac/parser/Tokens.java#TokenKind&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/parser/Tokens.java#Token&lt;/code>&lt;/li>
&lt;li>&lt;code>com/sun/tools/javac/parser/Tokens.java#Tokens&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="51comsuntoolsjavacparsertokensjavatokenkind">5.1.com/sun/tools/javac/parser/Tokens.java#TokenKind&lt;/h2>
&lt;h3 id="从属性看-5">从属性看&lt;/h3>
&lt;p>TokenKind是一个枚举类，定义了Java中的关键字、保留字、运算符等。&lt;/p>
&lt;p>每个枚举值对应&lt;code>词法单元(Token)&lt;/code>的&lt;code>token-name&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java拾遗/【编译引擎】-9-阅读前端编译源码-词法分析-1/image-20211105152645860.png" alt="image-20211105152645860" style="zoom:50%;" />&lt;/p>
&lt;h2 id="52comsuntoolsjavacparsertokensjavatoken">5.2.com/sun/tools/javac/parser/Tokens.java#Token&lt;/h2>
&lt;h3 id="从属性看-6">从属性看&lt;/h3>
&lt;p>从&lt;code>3.词法分析的概念&lt;/code>中可以知道，&lt;code>词法单元(Token)&lt;/code>有多种类型，如：标识符Token、运算符Token、字面量Token等。&lt;/p>
&lt;p>因此，javac实现了如下Token继承关系：&lt;/p>
&lt;p>其中，Token的各个子类除了有kind属性外，还有各自特有的属性。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105154224005.png" alt="image-20211105154224005">&lt;/p>
&lt;h3 id="从行为看-4">从行为看&lt;/h3>
&lt;p>Token对象提供了各种get方法，表达Token对象的&lt;code>&amp;lt;token-name，attribute-value&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java拾遗/【编译引擎】-9-阅读前端编译源码-词法分析-1/image-20211105155258304.png" alt="image-20211105155258304" style="zoom:50%;" />&lt;/p>
&lt;h2 id="53comsuntoolsjavacparsertokensjavatokens">5.3.com/sun/tools/javac/parser/Tokens.java#Tokens&lt;/h2>
&lt;h3 id="从属性看-7">从属性看&lt;/h3>
&lt;p>&lt;code>Tokens对象&lt;/code>维护了2个关键的属性：&lt;/p>
&lt;ul>
&lt;li>&lt;code>key&lt;/code>：数组索引是Name对象在Hash表中的index，value是TokenKind对象。&lt;/li>
&lt;li>&lt;code>tokenName&lt;/code>：数组索引是TokenKind对应枚举值的序号，value是Name对象。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105155218544.png" alt="image-20211105155218544">&lt;/p>
&lt;h3 id="从行为看-5">从行为看&lt;/h3>
&lt;p>从&lt;code>Tokens对象&lt;/code>提供的方法看，有2个关键点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>调用链1&lt;/strong>：创建&lt;code>JavaCompiler对象&lt;/code>时，会触发&lt;code>Names&lt;/code>的构造函数，
&lt;ul>
&lt;li>进而触发&lt;code>SharedNameTable&lt;/code>的构造函数。&lt;/li>
&lt;li>进而触发&lt;code>NameImpl&lt;/code>的构造函数，继而触发了&lt;code>Names&lt;/code>对象的初始化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调用链2&lt;/strong>：创建&lt;code>ParserFactory&lt;/code>对象时，会触发&lt;code>Tokens&lt;/code>的构造函数，
&lt;ul>
&lt;li>进而触发了&lt;code>Tokens&lt;/code>的构造函数，继而在&lt;code>Tokens&lt;/code>对象中建立了&lt;code>Name&lt;/code>到&lt;code>Token&lt;/code>、&lt;code>Token&lt;/code>到&lt;code>Name&lt;/code>的双向映射。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-9-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-1/image-20211105155228126.png" alt="image-20211105155228126">&lt;/p>
&lt;h1 id="6一些感慨理论产品化">6.一些感慨：理论、产品化&lt;/h1>
&lt;p>有一次讨论LLVM的时候，一位老前辈感慨过：老美的下一代在玩编译器，我们的下一代还在捣腾CRUD。&lt;/p>
&lt;blockquote>
&lt;p>感兴趣的读者，可以去搜索一下LLVM的作者在研究生阶段的论文以及他的职业经历。&lt;/p>
&lt;/blockquote>
&lt;p>包括笔者引用的三本编译器领域圣经：&lt;code>龙书、虎书、鲸书&lt;/code>以及其中我们现在还要反复咀嚼的编译理论，距今也有几十年多年的历史。&lt;/p>
&lt;p>能够透彻理解JVM原理的程序猿并不多，真的阅读JVM源码的更少，这或许就是我们在技术上还需要弥补的巨大差距。&lt;/p>
&lt;p>另外，通过阅读javac在词法分析部分的源码，我们就可以发现：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>编译器理论&lt;/strong>是指导&lt;strong>产品化的灵魂&lt;/strong>(如：词素、词法单元、有限状态机等)。&lt;/li>
&lt;li>&lt;strong>产品化&lt;/strong>却&lt;strong>在实践中&lt;/strong>会考虑更多因素(如：输入缓冲和哨兵标志、词素Hash表等)，&lt;strong>高于编译器理论&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h2 id="7下一步">7.下一步&lt;/h2>
&lt;p>接下来，笔者会继续分析javac在词法分析环节，如何实现有限状态机。&lt;/p>
&lt;h1 id="z参考">z.参考&lt;/h1>
&lt;blockquote>
&lt;p>龙书：《Compilers, Principles, Techniques, &amp;amp;Tools》Second Edition&lt;/p>
&lt;p>虎书：《现代编译原理-C语言描述》&lt;/p>
&lt;/blockquote></description></item><item><title>【编译引擎】-8-阅读前端编译源码的准备工作</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</link><pubDate>Thu, 14 Oct 2021 15:05:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</guid><description>&lt;h1 id="1理解前端编译的规格">1.理解前端编译的规格&lt;/h1>
&lt;p>在正式阅读OpenJDK前端编译器源码之前，建议先阅读笔者的这几篇文章，可以对JVM的前端编译的规格有一定了解：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-1-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%9A%84%E6%84%8F%E4%B9%89/">【编译引擎】 1 学习阅读Class文件结构的意义&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8A/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-上&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%AD/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-中&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8B/">【编译引擎】-2-学习阅读Class文件结构(16进制版)-下&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84javap%E7%89%88/">【编译引擎】-3-学习阅读Class文件结构(javap版)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/">【编译引擎】-4-学习阅读Class文件指令-概览&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>当我们对前端编译器的规格、术语、概念有了一定了解后，就可以阅读如下几个基础模块的代码，建立阅读前端编译器核心代码的基础。&lt;/p>
&lt;h1 id="2前端编译器基础模块1-javac的入口类">2.前端编译器基础模块1-javac的入口类&lt;/h1>
&lt;p>这部分代码可以参考这篇文章中的&amp;quot;3.javac的入口解读&amp;quot;章节，此处不赘述&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/">【宏观】如何更加深入理解Java虚拟机&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="3前端编译器基础模块2-参数管理">3.前端编译器基础模块2-参数管理&lt;/h1>
&lt;p>javac主要通过如下三个类实现了参数管理：&lt;/p>
&lt;blockquote>
&lt;p>com/sun/tools/javac/main/Option.java&lt;/p>
&lt;p>com/sun/tools/javac/main/OptionHelper.java&lt;/p>
&lt;p>com/sun/tools/javac/util/Options.java&lt;/p>
&lt;/blockquote>
&lt;h2 id="31comsuntoolsjavacmainoptionjava">3.1.com/sun/tools/javac/main/Option.java&lt;/h2>
&lt;p>Option是一个枚举类，是参数管理的核心类&lt;/p>
&lt;h3 id="从关键属性看">从关键属性看&lt;/h3>
&lt;p>Option的关键属性有：&lt;code>text&lt;/code>、&lt;code>kind&lt;/code>、&lt;code>group&lt;/code>、&lt;code>argsNameKey&lt;/code>、&lt;code>descrKey&lt;/code>、&lt;code>choiceKind&lt;/code>、&lt;code>choices&lt;/code>。&lt;/p>
&lt;p>具体见如下代码标注：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Option&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="err">……&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * HCZ:
&lt;/span>&lt;span class="cm"> * 命令配置的text
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * HCZ:
&lt;/span>&lt;span class="cm"> * javac的命令行参数配置分类，可选值：标准的、-X这种扩展的、javac的隐藏属性
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">OptionKind&lt;/span> &lt;span class="n">kind&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * HCZ：
&lt;/span>&lt;span class="cm"> * javac的命令行参数配置分组，可选值：Basic、javac文件系统专有、信息类参数、操作类参数
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">OptionGroup&lt;/span> &lt;span class="n">group&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/** Documentation key for arguments.
&lt;/span>&lt;span class="cm"> * HCZ:
&lt;/span>&lt;span class="cm"> * 命令配置的argsNameKey
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">argsNameKey&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/** Documentation key for description.
&lt;/span>&lt;span class="cm"> * HCZ:
&lt;/span>&lt;span class="cm"> * 命令配置的descrKey
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">descrKey&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/** Suffix option (-foo=bar or -foo:bar)
&lt;/span>&lt;span class="cm"> * HCZ：
&lt;/span>&lt;span class="cm"> * 命令配置是否具有后缀
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">hasSuffix&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/** The kind of choices for this option, if any.
&lt;/span>&lt;span class="cm"> * HCZ：
&lt;/span>&lt;span class="cm"> * javac的命令行参数配置的选择类型，可选值：其中任意1个、N个
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">ChoiceKind&lt;/span> &lt;span class="n">choiceKind&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/** The choices for this option, if any, and whether or not the choices
&lt;/span>&lt;span class="cm"> * are hidden
&lt;/span>&lt;span class="cm"> * HCZ:
&lt;/span>&lt;span class="cm"> * 记录任1orN个选项的具体选项
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">choices&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="err">……&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="从枚举值看">从枚举值看&lt;/h3>
&lt;p>javac支持的命令行参数就是与Option类的枚举值对应的。笔者将javac官方文档与Option类的枚举值进行了对应：&lt;/p>
&lt;blockquote>
&lt;p>javac官方文档：https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html&lt;/p>
&lt;/blockquote>
&lt;h4 id="javac文档中的standard-optionscross-compilation-optionscompact-profile-option">javac文档中的Standard Options、Cross-Compilation Options、Compact Profile Option&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Standard&lt;/span> &lt;span class="n">Options&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Akey&lt;/span>&lt;span class="o">[=&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">A&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-A&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.key.equals.value&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.A&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">cp&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">classpath&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="nf">CLASSPATH&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-classpath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.classpath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">CP&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-cp&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.classpath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Djava&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dirs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">directories&lt;/span>
&lt;span class="nf">DJAVA_EXT_DIRS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Djava.ext.dirs=&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.dirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.extdirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Djava&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">endorsed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dirs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">directories&lt;/span>
&lt;span class="nf">DJAVA_ENDORSED_DIRS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Djava.endorsed.dirs=&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.dirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.endorseddirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="n">directory&lt;/span>
&lt;span class="nf">D&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-d&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.directory&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.d&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">deprecation&lt;/span>
&lt;span class="nf">DEPRECATION&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-deprecation&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.deprecation&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">encoding&lt;/span> &lt;span class="n">encoding&lt;/span>
&lt;span class="nf">ENCODING&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-encoding&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.encoding&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.encoding&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">endorseddirs&lt;/span> &lt;span class="n">directories&lt;/span>
&lt;span class="nf">ENDORSEDDIRS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-endorseddirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.dirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.endorseddirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">extdirs&lt;/span> &lt;span class="n">directories&lt;/span>
&lt;span class="nf">EXTDIRS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-extdirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.dirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.extdirs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">g&lt;/span>
&lt;span class="nf">G&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-g&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.g&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">none&lt;/span>
&lt;span class="nf">G_NONE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-g:none&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.g.none&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="o">:[&lt;/span>&lt;span class="n">keyword&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">G_CUSTOM&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-g:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.g.lines.vars.source&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ANYOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;lines&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;vars&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">help&lt;/span>
&lt;span class="nf">H&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-h&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.directory&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.headerDest&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">HELP&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-help&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.help&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">implicit&lt;/span>&lt;span class="o">:[&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">none&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">IMPLICIT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-implicit:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.implicit&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ONEOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;class&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Joption&lt;/span>
&lt;span class="nf">J&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-J&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.flag&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.J&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">nowarn&lt;/span>
&lt;span class="nf">NOWARN&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-nowarn&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.nowarn&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">parameters&lt;/span>
&lt;span class="nf">PARAMETERS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-parameters&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;opt.parameters&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">none&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">only&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">PROC&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-proc:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.proc.none.only&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ONEOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;only&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">processor&lt;/span> &lt;span class="n">class1&lt;/span> &lt;span class="o">[,&lt;/span>&lt;span class="n">class2&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">class3&lt;/span>&lt;span class="o">...]&lt;/span>
&lt;span class="nf">PROCESSOR&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-processor&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.class.list&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.processor&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">processorpath&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="nf">PROCESSORPATH&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-processorpath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.processorpath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">dir&lt;/span>
&lt;span class="nf">S&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.directory&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.sourceDest&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">source&lt;/span> &lt;span class="n">release&lt;/span>
&lt;span class="nf">SOURCE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-source&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.release&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.source&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">sourcepath&lt;/span> &lt;span class="n">sourcepath&lt;/span>
&lt;span class="nf">SOURCEPATH&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-sourcepath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.sourcepath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">verbose&lt;/span>
&lt;span class="nf">VERBOSE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-verbose&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.verbose&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">version&lt;/span>
&lt;span class="nf">VERSION&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-version&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.version&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">werror&lt;/span>
&lt;span class="nf">WERROR&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Werror&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Werror&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">X&lt;/span>
&lt;span class="nf">X&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-X&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.X&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Cross&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Compilation&lt;/span> &lt;span class="n">Options&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">version&lt;/span>
&lt;span class="nf">TARGET&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-target&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.release&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.target&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">bootclasspath&lt;/span> &lt;span class="n">bootclasspath&lt;/span>
&lt;span class="nf">BOOTCLASSPATH&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-bootclasspath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.bootclasspath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Compact&lt;/span> &lt;span class="n">Profile&lt;/span> &lt;span class="n">Option&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">profile&lt;/span>
&lt;span class="nf">PROFILE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-profile&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.profile&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.profile&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="javac官方文档的nonstandard-options">javac官方文档的Nonstandard Options&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Nonstandard&lt;/span> &lt;span class="n">Options&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xbootclasspath&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">path&lt;/span>
&lt;span class="nf">XBOOTCLASSPATH_PREPEND&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xbootclasspath/p:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xbootclasspath.p&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xbootclasspath&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">path&lt;/span>
&lt;span class="nf">XBOOTCLASSPATH_APPEND&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xbootclasspath/a:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xbootclasspath.a&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xbootclasspath&lt;/span>&lt;span class="o">/:&lt;/span>&lt;span class="n">path&lt;/span>
&lt;span class="nf">XBOOTCLASSPATH&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xbootclasspath:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.bootclasspath&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FILEMANAGER&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xdoclint&lt;/span>&lt;span class="o">:[-]&lt;/span>&lt;span class="n">group&lt;/span> &lt;span class="o">[/&lt;/span>&lt;span class="n">access&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xdoclint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kd">protected&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xdoclint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="o">,-&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kn">package&lt;/span>
&lt;span class="err">-&lt;/span>&lt;span class="nn">Xdoclint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">none&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xdoclint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="o">[/&lt;/span>&lt;span class="n">access&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">XDOCLINT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xdoclint&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xdoclint&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">XDOCLINT_CUSTOM&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xdoclint:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xdoclint.subopts&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xdoclint.custom&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xlint&lt;/span>
&lt;span class="nf">XLINT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xlint&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xlint&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xlint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">all&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xlint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">none&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xlint&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xlint&lt;/span>&lt;span class="o">:-&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="nf">XLINT_CUSTOM&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xlint:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xlint.suboptlist&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ANYOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getXLintChoices&lt;/span>&lt;span class="o">()),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xmaxerrs&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="nf">XMAXERRS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xmaxerrs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.number&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.maxerrs&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xmaxwarns&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="nf">XMAXWARNS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xmaxwarns&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.number&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.maxwarns&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xstdout&lt;/span> &lt;span class="n">filename&lt;/span>
&lt;span class="nf">XSTDOUT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xstdout&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.file&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.Xstdout&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xprefer&lt;/span>&lt;span class="o">:[&lt;/span>&lt;span class="n">newer&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">XPREFER&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xprefer:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.prefer&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ONEOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;newer&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xpkginfo&lt;/span>&lt;span class="o">:[&lt;/span>&lt;span class="n">always&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">legacy&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">nonempty&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="nf">XPKGINFO&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xpkginfo:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.pkginfo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ONEOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;always&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;legacy&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;nonempty&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">Xprint&lt;/span>
&lt;span class="nf">XPRINT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xprint&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.print&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">XprintProcessorInfo&lt;/span>
&lt;span class="nf">XPRINTPROCESSORINFO&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-XprintProcessorInfo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.printProcessorInfo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="n">XprintRounds&lt;/span>
&lt;span class="nf">XPRINTROUNDS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-XprintRounds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.printRounds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="javac官方文档的command-line-argument-files">javac官方文档的Command-Line Argument Files&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Command&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Line&lt;/span> &lt;span class="n">Argument&lt;/span> &lt;span class="n">Files&lt;/span>
&lt;span class="nf">AT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;@&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.file&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.AT&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">STANDARD&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="javac官方文档上没有对应的枚举值的隐藏参数">javac官方文档上没有对应的枚举值的隐藏参数&lt;/h4>
&lt;p>除了前两个被定义为EXTEND类型的参数，后面的都是被定为为HIDDEN类型的参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">PLUGIN&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xplugin:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.arg.plugin&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.plugin&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">XDIAGS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xdiags:&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;opt.diags&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EXTENDED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ONEOF&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;compact&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;verbose&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">FULLVERSION&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-fullversion&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DIAGS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-XDdiags=&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MOREINFO&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-moreinfo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">PROMPT&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-prompt&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">DOE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-doe&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">PRINTSOURCE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-printsource&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">WARNUNCHECKED&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-warnunchecked&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">O&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-O&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">XJCOV&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-Xjcov&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">XD&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-XD&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BASIC&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SOURCEFILE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sourcefile&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HIDDEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">INFO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C//image-20211013173627325-1634183614455.png" alt="image-20211013173627325">&lt;/p>
&lt;h4 id="结论">结论&lt;/h4>
&lt;p>从上述源码的分析，我们可以得到以下结论：&lt;/p>
&lt;blockquote>
&lt;p>javac的命令行参数被分为了STANDARD、EXTENDED、HIDDEN。其中，&lt;/p>
&lt;p>STANDARD参数会写进javac官方文档的Standard Options、Cross-Compilation Options、Compact Profile Option章节；&lt;/p>
&lt;p>EXTENDED会写进javac官方文档Nonstandard Options章节；&lt;/p>
&lt;/blockquote>
&lt;h4 id="延伸">延伸&lt;/h4>
&lt;p>其它JDK自带的命令行工具，都有类似的Option模块处理命令行参数(如下&lt;code>java.c&lt;/code>源码中)。&lt;/p>
&lt;p>源码中有如此机制，我们可以得到一下命令行工具学习的新思路：&lt;/p>
&lt;blockquote>
&lt;p>我们可以在学习JDK命令行工具的时候，不仅局限于对应的官方文档，还可以通过Options类的枚举值探索一些隐藏的命令行参数。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C//image-20211014154700768.png" alt="image-20211014154700768">&lt;/p>
&lt;h3 id="从构造函数看">从构造函数看&lt;/h3>
&lt;blockquote>
&lt;p>如下N个构造函数，支撑了各个枚举值的定义。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C//image-20211014155636948.png" alt="image-20211014155636948">&lt;/p>
&lt;h3 id="从方法看">从方法看&lt;/h3>
&lt;p>Option的方法如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C//image-20211014155805308.png" alt="image-20211014155805308">&lt;/p>
&lt;p>关键方法是process方法，它通过将待处理的Option对象加入到OptionHelper中，支撑了2.1章节涉及的&lt;code>Main#processArgs方法&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* HCZ：
&lt;/span>&lt;span class="cm">* 将待处理的option加入到OptionHelper对象
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OptionHelper&lt;/span> &lt;span class="n">helper&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">choices&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">choiceKind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ChoiceKind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ONEOF&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// some clients like to see just one of option+choice set
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">choices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">option&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">option&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// some clients like to see option (without trailing &amp;#34;:&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// set to arg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">substring&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">nm&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// set option+word for each word in arg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,+&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">option&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">option&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="从周边关系看">从周边关系看&lt;/h3>
&lt;blockquote>
&lt;p>在Main#optionHelper中，实现了OptionHelper的匿名类
在Main#options中，维护了Options对象&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-8-%E9%98%85%E8%AF%BB%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C//image-20211014160156265.png" alt="image-20211014160156265">&lt;/p>
&lt;h2 id="32optionhelper和options">3.2.OptionHelper和Options&lt;/h2>
&lt;blockquote>
&lt;p>com/sun/tools/javac/util/Options.java和com/sun/tools/javac/main/OptionHelper.java两个类都是Option类的辅助类，&lt;/p>
&lt;p>主要是一些集合的CRUD操作，读者有兴趣可以自行阅读。&lt;/p>
&lt;/blockquote>
&lt;h1 id="4总结">4.总结&lt;/h1>
&lt;ul>
&lt;li>本文回顾了JVM前端编译器的规格。&lt;/li>
&lt;li>本文分析了前端编译器的基础模块—javac的入口模块&lt;/li>
&lt;li>本文分析了前端编译器的基础模块——参数配置模块&lt;/li>
&lt;/ul></description></item><item><title>【宏观】如何更加深入理解Java虚拟机</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Tue, 12 Oct 2021 23:39:00 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E5%AE%8F%E8%A7%82%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>&lt;h1 id="1深入理解jvm那还是别人的故事">1.深入理解JVM——那还是别人的故事&lt;/h1>
&lt;p>国庆期间，思考了一个问题：&lt;code>怎样才算深入理解了Java虚拟机？&lt;/code>&lt;/p>
&lt;p>把周志明的《深入理解Java虚拟机》看5遍算不算透彻理解了JVM？&lt;/p>
&lt;p>似乎不算：笔者已经阅读过好几遍，其中部分章节应该超过5遍。但，依然觉得很多技术点如同罩上了一层薄纱。&lt;/p>
&lt;p>为什么会这样呢？&lt;/p>
&lt;p>如果把《Java语言规范》和《Java虚拟机规范》看作是JDK和JVM的需求说明书，那么《深入理解Java虚拟机》就相当于周志明老师梳理总结的JDK和JVM的规格说明书。&lt;/p>
&lt;p>这是一种娓娓道来的&lt;code>知识论述&lt;/code>，即JVM的知识本身已经是客观存在，作者会摆出他的&lt;code>MainIdea&lt;/code>和&lt;code>Support Idea&lt;/code>，而后通过&lt;code>事实&lt;/code>和&lt;code>例子&lt;/code>事实进行&lt;code>推理&lt;/code>，进而证明作者对JVM的规格理解的正确性和逻辑自洽性。&lt;/p>
&lt;p>然而，无论马可波罗讲故事的能力有多强，他描述的神秘东方始终是他看到的客观存在。&lt;/p>
&lt;p>因此，如果我没有亲自阅读JDK和JVM的源码，那还是别人的故事。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012225213714.png" alt="image-20211012225213714">&lt;/p>
&lt;h1 id="2阅读openjdk源码从这里开始">2.阅读OpenJDK源码，从这里开始&lt;/h1>
&lt;p>下载了OpenJDK 8的源码，您会面对着海量的代码，不知如何入手。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230038531.png" alt="image-20211012230038531">&lt;/p>
&lt;p>笔者认为，不如想想JVM的体系结构：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012225535950.png" alt="image-20211012225535950">&lt;/p>
&lt;p>JVM体系中，第一个环节是将&lt;code>源代码(.java)&lt;/code>变成&lt;code>字节码(.class)&lt;/code>，也就是说&lt;code>前端编译器(javac)&lt;/code>承载了《Java语言规范》和《Java虚拟机规范》中大部分的规格。&lt;/p>
&lt;p>至少，可以认为，阅读&lt;code>前端编译器(javac)&lt;/code>的源码，可以理解编译期的静态行为。&lt;/p>
&lt;p>从javac对应的源码看，也的确如此：&lt;/p>
&lt;ul>
&lt;li>comp包中可以看到语义分析、数据流分析、语法糖擦除、泛型擦除等代码&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230328641.png" alt="image-20211012230328641">&lt;/p>
&lt;ul>
&lt;li>jvm包可以看到从AST树生成字节码的代码&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230413468.png" alt="image-20211012230413468">&lt;/p>
&lt;ul>
&lt;li>parser包可以看到词法分析生成TokenQueue的代码&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230441083.png" alt="image-20211012230441083">&lt;/p>
&lt;p>上述三点，基本就覆盖了《Java语言规范》的大部分内容，也覆盖了《Java虚拟机规范》中关于字节码规格的大部分内容。&lt;/p>
&lt;h1 id="3javac的入口解读">3.javac的入口解读&lt;/h1>
&lt;h2 id="31langtoolssrcshareclassescomsuntoolsjavacmainjava">3.1.langtools/src/share/classes/com/sun/tools/javac/Main.java&lt;/h2>
&lt;p>这是javac的入口类，代码结构很简单&lt;/p>
&lt;h3 id="类结构">类结构&lt;/h3>
&lt;blockquote>
&lt;p>这个类仅有3个方法，main函数调用了compile函数&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230802827.png" alt="image-20211012230802827">&lt;/p>
&lt;h3 id="与周边类的关系">与周边类的关系&lt;/h3>
&lt;blockquote>
&lt;p>在Main#compile()函数中，又去调用了&lt;code> com/sun/tools/javac/main/Main.java&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012230924610.png" alt="image-20211012230924610">&lt;/p>
&lt;h2 id="32langtoolssrcshareclassescomsuntoolsjavacmainmainjava">3.2.langtools/src/share/classes/com/sun/tools/javac/main/Main.java&lt;/h2>
&lt;p>这个类承载了javac真正开始干活儿的流程，代码略多，我们从&lt;code>类的属性&lt;/code>、&lt;code>类的行为&lt;/code>、&lt;code>与周边类的关系&lt;/code>来剖析它。&lt;/p>
&lt;h3 id="类的属性">类的属性&lt;/h3>
&lt;p>笔者只在此列举几个重要的属性，其它的属性可以到&lt;code>https://github.com/JHerculesqz/jdk8&lt;/code>上找到笔者详细标注的注释说明。&lt;/p>
&lt;blockquote>
&lt;p>recognizedOptions：这是一个Option数组，每个Option元素可以认为是javac后面命令行配置参数。这个数组记录了javac内置的合法的命令行参数。&lt;/p>
&lt;p>optionHelper：这是OptionHelper这个抽象类的具体实现类，它的主要职责就是维护用户实际在javac后面输入的命令行参数。&lt;/p>
&lt;p>filenames：维护了用户在javac后面输入的待编译的.java源文件。&lt;/p>
&lt;p>fileManager：javac内置的一个文件管理模块，负责对待编译的.java源文件进行处理。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012231318310.png" alt="image-20211012231318310">&lt;/p>
&lt;h3 id="类的行为">类的行为&lt;/h3>
&lt;p>除了compile方法、processArgs方法，其它都属于打辅助的方法(如：bugMessge方法就是对log对象进行了封装，用于记录错误日志)，这些辅助方法笔者就不在此赘述了，依然可以参考&lt;code>https://github.com/JHerculesqz/jdk8&lt;/code>上笔者详细标注的注释说明。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012231906655.png" alt="image-20211012231906655">&lt;/p>
&lt;p>我们在此稍微展开一下compile方法的细节：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012232303828.png" alt="image-20211012232303828">&lt;/p>
&lt;p>我们可以将这个方法拆分为3段：&lt;/p>
&lt;ul>
&lt;li>前戏：初始化Main中的各个成员对象。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JavaFileObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Processor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">processors&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ：前戏：在上下文对象中塞out对象，初始化log对象、options对象、fileNames、classnames
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">outKey&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// creates a new one
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">filenames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedHashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">classnames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ListBuffer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">JavaCompiler&lt;/span> &lt;span class="n">comp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>命令行参数处理：调用Main#processsArgs方法，处理javac后面的命令行参数&lt;/li>
&lt;/ul>
&lt;p>注意：这里有一些高级技术细节，当前不必深入其中，在展开这些高级技术细节时可以再来展开这部分源码。&lt;/p>
&lt;blockquote>
&lt;p>比如：JVM支持我们自己实现javac的插件，这里插件生命周期的初始化部分就在这段代码中。&lt;/p>
&lt;p>比如：javac在关闭nonBatchMode模式后，启用编译缓存，也在这段代码中。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JavaFileObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Processor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">processors&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * TODO: Logic below about what is an acceptable command line
&lt;/span>&lt;span class="cm"> * should be updated to take annotation processing semantics
&lt;/span>&lt;span class="cm"> * into account.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ：如果各种不合法，返回编译错误，并告知记得敲一下-help
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">classNames&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">HELP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">process&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">optionHelper&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;-help&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CMDERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ：调用Main#processArgs，获得命令行参数中的.java文件对象列表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">processArgs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CommandLine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//HCZ：Main#processArgs竟然返回了null？，返回错误信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">files&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// null signals an error in options, abort
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CMDERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">classnames&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// it is allowed to compile nothing if just asking for help or version info
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//HCZ：文件列表是Empty，说明可能是javac --help/-X/-version/-fullversion，则返回正确
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HELP&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">VERSION&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FULLVERSION&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">JavaCompiler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">explicitAnnotationProcessingRequested&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ:还不太懂？
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;err.no.source.files.classes&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ:又不是-help这种参数配置，说明用户输入错了，返回错误
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;err.no.source.files&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CMDERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FileNotFoundException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//HCZ：指定的文件找不到，则返回错误
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;err.file.not.found&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//HCZ：如果指定了stdout，清一下log对象，重定向到System.out上
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">forceStdOut&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;stdout&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">forceStdOut&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flush&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setWriters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PrintWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//HCZ：如果没有设置nonBatchMode，则在上下文对象中创建CacheFSInfo对象，用于多次编译时的缓存。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// allow System property in following line as a Mustang legacy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">batchMode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isUnset&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;nonBatchMode&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;nonBatchMode&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">batchMode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">CacheFSInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">preRegister&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// FIXME: this code will not be invoked if using JavacTask.parse/analyze/generate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// invoke any available plugins
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//HCZ：如果存在javac的插件，则...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//啥是javac插件？参考：https://www.baeldung.com/java-build-compiler-plugin
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//？待研究：如下初始化javac插件的逻辑细节。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">plugins&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PLUGIN&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">plugins&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JavacProcessingEnvironment&lt;/span> &lt;span class="n">pEnv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JavacProcessingEnvironment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">cl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pEnv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProcessorClassLoader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Plugin&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Plugin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cl&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">pluginsToCall&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedHashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">plugin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">plugins&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\x00&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">pluginsToCall&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">plugin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\s+&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">JavacTask&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Plugin&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Plugin&lt;/span> &lt;span class="n">plugin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">pluginsToCall&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">plugin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">head&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">pluginsToCall&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">task&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JavacTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pEnv&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">plugin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()]));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">apiMode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">pluginMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">pluginsToCall&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printLines&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PrefixKind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">JAVAC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;msg.plugin.not.found&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">head&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>调用JavaComplier#compile，进行真正的.java到.class的编译&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：这里也可以跳过xdoclint的代码。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JavaFileObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Processor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">processors&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="c1">//HCZ：初始化JavaCompiler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">comp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JavaCompiler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// FIXME: this code will not be invoked if using JavacTask.parse/analyze/generate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//HCZ：xdoclint相关
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//待研究：如下xdoclint的各种初始化细节
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">xdoclint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XDOCLINT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">xdoclintCustom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XDOCLINT_CUSTOM&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">xdoclint&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">xdoclintCustom&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">doclintOpts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedHashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">xdoclint&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DocLint&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMSGS_OPTION&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">xdoclintCustom&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">xdoclintCustom&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\s+&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XDOCLINT_CUSTOM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">text&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DocLint&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMSGS_CUSTOM_PREFIX&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!(&lt;/span>&lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">1&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DocLint&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMSGS_CUSTOM_PREFIX&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="o">)))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JavacTask&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BasicJavacTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// standard doclet normally generates H1, H2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DocLint&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XIMPLICIT_HEADERS&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">DocLint&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">doclintOpts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()]));&lt;/span>
&lt;span class="n">comp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keepComments&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//HCZ：如果有待编译的java文件列表，则...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fileManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JavaFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// add filenames to fileObjects
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//HCZ：这里为啥又要初始化一次JavaCompiler？
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">comp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JavaCompiler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//HCZ：待研究，啥是otherFiles？
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JavaFileObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">otherFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nil&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JavacFileManager&lt;/span> &lt;span class="n">dfm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">JavacFileManager&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">fileManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">JavaFileObject&lt;/span> &lt;span class="n">fo&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">dfm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJavaFileObjectsFromFiles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">otherFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">otherFiles&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepend&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">JavaFileObject&lt;/span> &lt;span class="n">fo&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">otherFiles&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">fileObjects&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepend&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//HCZ：调用JavaCompiler#compile方法，里面有机关，详见那边的标注
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fileObjects&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">classnames&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="n">processors&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">expectDiagKeys&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">expectDiagKeys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printRawLines&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;all expected diagnostics found&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printRawLines&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;expected diagnostic keys not found: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">expectDiagKeys&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ERROR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">comp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">errorCount&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ERROR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>收尾工作：各种异常捕获后的收尾工作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">classNames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JavaFileObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fileObjects&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Processor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">processors&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ioMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">OutOfMemoryError&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resourceMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StackOverflowError&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resourceMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">FatalError&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">feMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationProcessingError&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">apiMode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">apMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSERR&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClientCodeException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// as specified by javax.tools.JavaCompiler#getTask
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and javax.tools.JavaCompiler.CompilationTask#call
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">PropagatedException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Nasty. If we&amp;#39;ve already reported an error, compensate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for buggy compiler error recovery by swallowing thrown
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// exceptions.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">comp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">errorCount&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">options&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;dev&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">bugMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ABNORMAL&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">comp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">comp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClientCodeException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">filenames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="err">…………&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="与周边类的关系-1">与周边类的关系&lt;/h3>
&lt;p>从前文的源码分析可以看到，当前类最终是调用&lt;code>JavaCompiler#compile方法&lt;/code>实现的前端编译过程，而&lt;code>JavaCompiler&lt;/code>有依赖了&lt;code>Options类&lt;/code>读写javac的命令行配置参数。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E5%AE%8F%E8%A7%82%E3%80%91%E5%A6%82%E4%BD%95%E6%9B%B4%E5%8A%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20211012233450136.png" alt="image-20211012233450136">&lt;/p>
&lt;h1 id="4总结">4.总结&lt;/h1>
&lt;ul>
&lt;li>本文表达了笔者的对于深入理解JVM的一种观点：即，通过阅读OpenJDK源码才能达到真正的理解JVM。&lt;/li>
&lt;li>本文解析了javac入口部分的源码，为后续进一步理解JVM的前端编译过程奠定了基础。&lt;/li>
&lt;/ul></description></item><item><title>【Java新特性】-0-学习Java新特性，如何快人一步</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-0-%E5%AD%A6%E4%B9%A0java%E6%96%B0%E7%89%B9%E6%80%A7%E5%A6%82%E4%BD%95%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5/</link><pubDate>Sun, 22 Aug 2021 10:00:59 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-0-%E5%AD%A6%E4%B9%A0java%E6%96%B0%E7%89%B9%E6%80%A7%E5%A6%82%E4%BD%95%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5/</guid><description>&lt;h1 id="1why谁来挽救我的长发">1.Why：谁来挽救我的长发&lt;/h1>
&lt;p>在Java 6之前，JDK版本升级节奏比较慢，Java程序猿对Java语言本身的学习压力较小(具体体现在&amp;quot;&lt;code>频率低&lt;/code>&amp;quot;和&amp;quot;&lt;code>资源多&lt;/code>&amp;rdquo;)：&lt;/p>
&lt;ul>
&lt;li>频率低：如果已经掌握了Java 6或之前的某个版本，那么学习Java新版本也不那么紧迫。&lt;/li>
&lt;li>资源多：如果您阅读英文资料有点困难，那么等一段时间后，Java新版本的中文资料非常多。&lt;/li>
&lt;/ul>
&lt;p>然而，随着Oracle完成收购Sun和JRockit，Oracle宣布Java将按照&lt;code>每半年发布一个版本，每三年发布一个LTS版本&lt;/code>的节奏&lt;code>小步快跑&lt;/code>。&lt;/p>
&lt;p>Java这种快速迭代的版本节奏，给Java程序猿带来了学习新知识的负担。这种学习负担，通常在产品中表现出2种现象：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>现象1：Java程序猿并未掌握好7年前发布的Java8的众多新特性。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>2014年3月，Java8发布。7年过去了，依然还有很多Java程序猿没有真正掌握Lambda表达式&amp;amp;Stream等Java 8的新特性。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>现象2：市面上的Java新特性资料，少有做到&amp;quot;全面&amp;rdquo;、&amp;ldquo;条理&amp;rdquo;、&amp;ldquo;及时&amp;rdquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>笔者所在的公司曾邀请业界一些咨询公司来讲解Java11的新特性，效果不尽如人意。或只是对Java11新特性的罗列，或过于强调某些单点新特性(如：&amp;ldquo;模块化&amp;rdquo;)，甚至部分新特性的阐述与Oracle最新文档是矛盾的。&lt;/p>
&lt;/blockquote>
&lt;p>终于，Oracle的版本节奏，成为带走Java程序猿飘飘长发的一个新的因素。。。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210820192105074.png" alt="image-20210820192105074">&lt;/p>
&lt;p>如何高效率地学习Java新特性呢？&lt;/p>
&lt;p>如何挽救我们的长发？&lt;/p>
&lt;p>笔者试图通过本文，探讨快速自学Java新特性的方法，希望这篇文章能挽救你我的一头秀发。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210821233636736.png" alt="image-20210821233636736">&lt;/p>
&lt;h1 id="2what什么是jepjsr">2.What：什么是JEP/JSR&lt;/h1>
&lt;p>我们先来看一下Java 8至今的项目里程碑：&lt;/p>
&lt;blockquote>
&lt;p>2014.3，Java8发布&lt;/p>
&lt;p>2017.9.21，Java9发布&lt;/p>
&lt;p>2018.1.16，Java9.0.4发布&lt;/p>
&lt;p>2018.7.17，Java10.0.2发布&lt;/p>
&lt;p>2019.1.15，Java11.0.2发布-&amp;gt;2021.7.20，Java11.0.12发布&lt;/p>
&lt;p>2019.7.16，Java12.0.2发布&lt;/p>
&lt;p>2020.1.14，Java13.0.2发布&lt;/p>
&lt;p>2020.7.14，Java14.0.2发布&lt;/p>
&lt;p>2021.1.19, Java15.0.2发布&lt;/p>
&lt;p>2021.7.20，Java16.0.2发布&lt;/p>
&lt;/blockquote>
&lt;p>其中，Oracle从Java9开始，每个版本的发布周期是6个月，每个LTS版本发布周期是3年。&lt;/p>
&lt;p>从Java9以后的版本看，Oracle的确严格执行了6个月准时发版本的承诺。&lt;/p>
&lt;blockquote>
&lt;p>一个有趣的事件是：Java9的正式发布与Java8相隔了4年。&lt;/p>
&lt;p>并且由于多次跳票一度动摇了业界对Java的信心，那阵子Java恶评如潮。&lt;/p>
&lt;p>不过仔细阅读了Java9的新特性列表，我们可以发现Java9新增了非常多的新特性，它们为后续的Java11奠定了坚实的基础。&lt;/p>
&lt;/blockquote>
&lt;p>Oracle的确把吹过的牛逼实现了，实现的还挺彻底。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210821234525704.png" alt="image-20210821234525704">&lt;/p>
&lt;p>帮助Oracle准时发版本的背后就是JSR、JSR：&lt;/p>
&lt;ul>
&lt;li>JEP：JDK Enhancement Proposals，JDK改进提案&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>为Java增加新特性，可以向JCP(Java Community Process)提交JEP，即JDK改进提案。&lt;/p>
&lt;p>通过评审的JEP将列入新版本的Java开发计划，并且明确具体落地的Java版本。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JSR：Java Specification Requests，Java规范提案。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>为Java增加新特性的另一个途径是向JCP提出一个新的、正式的规范(Specification)，纳入到《Java Specification》或者《JVM Specification》。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以把JEP、JSR简单理解为Oracle管理Java新特性的需求清单，&lt;/p>
&lt;p>需求清单中每条需求都会被专门的组织评审并确定落地版本，Java9的JEP列表如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822002010521.png" alt="image-20210822002010521">&lt;/p>
&lt;p>当然，这又引出了新的问题：JEP列表只是&lt;code>&amp;quot;平铺直述&amp;quot;&lt;/code>地罗列了该Java版本中的新特性，我们如何高效、有条理地阅读和理解JEP列表呢？&lt;/p>
&lt;h1 id="3how梳理jep列表">3.How：梳理JEP列表&lt;/h1>
&lt;h2 id="31编程语言的知识脉络">3.1.编程语言的知识脉络&lt;/h2>
&lt;h3 id="311java语言的知识脉络">3.1.1.Java语言的知识脉络&lt;/h3>
&lt;p>大部分现代编程语言(如：C++、Java等)，其包含的技术点可以按照分为3个层次：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>语言语法：编程语言定义的一套语言语法规则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类库：编程语言通常提供给程序猿的类库，类库也可以分为两个小类：&lt;/p>
&lt;ul>
&lt;li>核心类库：基于该语言语法实现的类库。&lt;/li>
&lt;li>扩展类库：基于核心类库实现的更高级的类库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编译器与调优：编程语言的编译器(或解释器)会提供一些编译选项、运行时参数，程序猿可以根据自己的场景提升应用软件的运行效率。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>具体到Java，细化具体的技术点：&lt;/p>
&lt;ul>
&lt;li>语言语法：声明与初始化、数据类型、表达式、控制语句、方法、面向对象、异常、代码组织结构&lt;/li>
&lt;li>核心类库：集合与泛型、多线程编程、反射&lt;/li>
&lt;li>扩展类库：IO编程、数据库编程、网络编程、安全类库、正则表达式……&lt;/li>
&lt;li>JVM：字节码结构&amp;amp;前端编译器、类加载、运行时数据区、垃圾回收算法与垃圾收集器、JIT&amp;amp;AOT、工具链&lt;/li>
&lt;/ul>
&lt;p>上述编程语言的知识脉络，基本覆盖了Java程序猿在&lt;code>Java语言&lt;/code>领域比较完整的技术栈。&lt;/p>
&lt;p>假设一个Java程序猿小明，&lt;/p>
&lt;p>首先，熟练掌握了&lt;code>Java语言语法&lt;/code>，就能开始编写一个产品的业务逻辑代码了。&lt;/p>
&lt;p>进一步，熟练掌握了&lt;code>Java核心类库&lt;/code>与&lt;code>Java扩展类库&lt;/code>，就能从开发效率、安全性、性能三方面，提升这些业务逻辑代码的质量。&lt;/p>
&lt;p>再进一步，深刻理解JVM，就能看到这些业务逻辑代码在Java虚拟机内部的执行过程，进而从更高的维度、更高级的手段解决Java代码的疑难杂症、安全性、性能问题。&lt;/p>
&lt;h3 id="312jep与java语言知识脉络的关系">3.1.2.JEP与Java语言知识脉络的关系&lt;/h3>
&lt;p>回到JEP列表，每一个JEP，都会标注这个需求单所属的组件，即改进了Java的哪一类技术点，也能与上述编程语言的知识脉络一一对应。&lt;/p>
&lt;p>比如：JEP 110，就是在改进了&lt;code>扩展类库-网络编程&lt;/code>技术点。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822073959702.png" alt="image-20210822073959702">&lt;/p>
&lt;p>笔者以Java9的JEP列表为例，&lt;/p>
&lt;p>在按照编程语言知识脉络分类前，&lt;strong>很难从技术点的罗列中，看出Java9新增的91个新特性到底对Java8有哪些方面的改进&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822074441769.png" alt="image-20210822074441769">&lt;/p>
&lt;p>按照编程语言知识脉络分类后，可以很清晰地看到Java9在4个方面的改进：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>语言语法：&lt;/p>
&lt;ul>
&lt;li>表达式：钻石表达式升级&lt;/li>
&lt;li>面向对象：接口的私有方法&lt;/li>
&lt;li>代码组织：支持了模块化——★大改进
&lt;ul>
&lt;li>其中，模块化特性影响了Java的N个模块，涉及好多条JEP，这也是Java9变化最大的特性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>核心类库：&lt;/p>
&lt;ul>
&lt;li>集合与泛型：提供了of方法&lt;/li>
&lt;li>多线程编程：提升了多线程编程部分类库API的性能&lt;/li>
&lt;li>反射：增强了MethodHandle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>扩展类库：&lt;/p>
&lt;ul>
&lt;li>IO编程：优化了Xml类库的内部实现，提升了安全性&lt;/li>
&lt;li>安全类库：更新了安全算法、证书、密钥库等——★大改进&lt;/li>
&lt;li>Js引擎：引入了Nashorn——★大改进&lt;/li>
&lt;li>GUI编程：升级了JavaFx——★大改进&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>JVM：——★大改进&lt;/p>
&lt;ul>
&lt;li>字节码格式：字符串相加生成的字节码优化，提升性能&lt;/li>
&lt;li>运行时数据区：字符串的存储结构发生了变化，提升性能&lt;/li>
&lt;li>GC：G1上位、CMS下台、废弃某些垃圾收集器组合，提升性能&lt;/li>
&lt;li>JIT&amp;amp;AOT：优化C1/C2、支持更多平台，提升性能与JIT性能&lt;/li>
&lt;li>工具链：规范/细化javac的编译告警，提升前端编译器分层归因性能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822081029823.png" alt="image-20210822081029823">&lt;/p>
&lt;h3 id="313从梳理后的jep列表宏观理解新版本java">3.1.3.从梳理后的JEP列表，宏观理解新版本Java&lt;/h3>
&lt;p>基于梳理后的JEP列表，我们可以清晰地宏观理解新版本Java，还是以Java9为例：&lt;/p>
&lt;ul>
&lt;li>看Oracle的商业意图：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>期望占据&amp;quot;模块化&amp;quot;的标准话语权。&lt;/p>
&lt;p>期望在Js引擎、GUI编程上发力(但从Java10、Java11看，这两个领域都放弃了)。&lt;/p>
&lt;p>期望强化垃圾回收器和JIT的地位。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>看技术意图：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在性能方面，Oracle做了不少底层优化，如果Java程序猿合理利用即可获得比较好的性能提升。&lt;/p>
&lt;p>在安全方面，Oracle也默默地做了很多底层工作，如果Java程序猿合理利用即可获得比较好的安全提升。&lt;/p>
&lt;p>在语法方面，Oracle基于Coin项目，添加了若干更加便捷的语法小优化。&lt;/p>
&lt;/blockquote>
&lt;p>因此，我们很容易判断出Java程序猿应该学习哪些Java9的新特性：&lt;/p>
&lt;ul>
&lt;li>性能方面：要重点掌握多线程编程的底层优化、JIT底层优化、字符串优化的原理，对产品性能有帮助。&lt;/li>
&lt;li>语法方面：要重点掌握模块化新特性，对产品升级到Java9有比较大的影响。&lt;/li>
&lt;li>语法方面：要熟练掌握语法小改进，对产品开发效率有帮助。&lt;/li>
&lt;li>安全方面：了解改动点的基本原理即可，在产品开发中不要错误使用即可。&lt;/li>
&lt;/ul>
&lt;h2 id="32梳理java91011的jep列表">3.2.梳理Java9/10/11的JEP列表&lt;/h2>
&lt;p>接下来，笔者将Java9、Java10、Java11的新特性按照上述方法进行梳理，后续再详细解读各新特性：&lt;/p>
&lt;h3 id="321java9新特性">3.2.1.Java9新特性&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822081029823.png" alt="image-20210822081029823">&lt;/p>
&lt;h3 id="322java10新特性">3.2.2.Java10新特性&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822083115018.png" alt="image-20210822083115018">&lt;/p>
&lt;h3 id="323java11新特性">3.2.3.Java11新特性&lt;/h3>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-0-%E6%80%8E%E4%B9%88%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0Java%E6%96%B0%E7%89%B9%E6%80%A7/image-20210822083247655.png" alt="image-20210822083247655">&lt;/p></description></item><item><title>【Java新特性】-4-Java9-StackWalker</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-4-java9-stackwalker/</link><pubDate>Sun, 22 Aug 2021 10:02:59 +0805</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-4-java9-stackwalker/</guid><description>&lt;h1 id="1困扰">1.困扰&lt;/h1>
&lt;p>每一个JEP都会通过&lt;code>Motivation&lt;/code>描述改进的目标，通过&lt;code>Summary&lt;/code>描述改进的内容，通过&lt;code>Description&lt;/code>描述改进的细节与效果。&lt;/p>
&lt;p>但，对于&lt;code>StackWalker&lt;/code>这类&lt;strong>新增、修改API&lt;/strong>的JEP，往往看完以后会有一种&amp;quot;眼睛会了手不会&amp;quot;的感觉(阅读它们的javadoc，也有同样的感觉)。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210911112706063.png" alt="image-20210911112706063">&lt;/p>
&lt;p>以JEP259和&lt;code>StackWalker&lt;/code>的javadoc为例：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>摘自 JEP259-Motivation章节&lt;/strong>：&lt;/p>
&lt;p>There is no standard API to traverse selected frames on the execution stack efficiently and access the &lt;code>Class&lt;/code> instance of each frame.&lt;/p>
&lt;p>There are existing APIs that provide access to a thread&amp;rsquo;s stack:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Throwable::getStackTrace&lt;/code> and &lt;code>Thread::getStackTrace&lt;/code> return an array of &lt;code>StackTraceElement&lt;/code> objects, which contain the class name and method name of each stack-trace element.&lt;/li>
&lt;li>&lt;code>SecurityManager::getClassContext&lt;/code> is a protected method, which allows a &lt;code>SecurityManager&lt;/code> subclass to access the class context.&lt;/li>
&lt;/ul>
&lt;p>………………&lt;/p>
&lt;p>&lt;strong>摘自JEP259&lt;/strong>：Summary&lt;/p>
&lt;p>Define an efficient standard API for stack walking that allows easy filtering of, and lazy access to, the information in stack traces.&lt;/p>
&lt;p>………………&lt;/p>
&lt;p>&lt;strong>摘自javadoc：&lt;/strong>&lt;/p>
&lt;p>A stack walker.&lt;/p>
&lt;p>The walk method opens a sequential stream of StackFrames for the current thread and then applies the given function to walk the StackFrame stream.&lt;/p>
&lt;p>The stream reports stack frame elements in order, from the top most frame that represents the execution point at which the stack was generated to the bottom most frame.&lt;/p>
&lt;p>The StackFrame stream is closed when the walk method returns. If an attempt is made to reuse the closed stream, IllegalStateException will be thrown.&lt;/p>
&lt;/blockquote>
&lt;p>大意就是说，如果Java程序猿想获得虚拟机栈，用老的API(&lt;code>Throwable::getStackTrace&lt;/code>)，即不易用，也不高性能。新的API(&lt;code>StackWalker&lt;/code>)已经完美的解决了这个问题。&lt;/p>
&lt;p>阅读完JEP，笔者情不自禁地产生了若干疑问：&lt;/p>
&lt;ul>
&lt;li>为什么需要获得虚拟机栈？
&lt;ul>
&lt;li>前提：我们已经理解了虚拟机栈的相关基础知识。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为啥返回了&lt;code>Stream&lt;/code>就要抛&lt;code>IllegalStateException &lt;/code>？&lt;/li>
&lt;li>过滤就能提升性能？——假设被搜索的全集是线性的，那么获得子集和获得全集的性能损耗似乎只有对象的创建。&lt;/li>
&lt;li>什么是&lt;code>lazy access&lt;/code>？&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;p>这可能就是产生&amp;quot;眼睛会了手不会&amp;quot;困扰的根源：&lt;/p>
&lt;ul>
&lt;li>JEP和javadoc默认我们已经具备了这个API相关的先验知识。
&lt;ul>
&lt;li>比如：&lt;code>StackWalker&lt;/code>的JEP已经默认我们理解了虚拟机栈、虚拟机栈帧等。&lt;/li>
&lt;li>比如：&lt;code>StackWalker&lt;/code>的Javadoc默认我们理解JIT可能进行的栈上优化的影响。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JEP和javadoc无法在有限的篇幅展开技术细节，只能描述技术结论。
&lt;ul>
&lt;li>比如：&lt;code>StackWalker&lt;/code>的JEP只能描述它的性能优于老的API，却无法展开阐述它是开展的性能优化，我们不了解完整的性能优化逻辑链，就有可能错误地使用&lt;code>StackWalker&lt;/code>的API(甚至，大名鼎鼎的log4j团队也在StackWalker踩过坑，见后文)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="2基础知识回顾虚拟机栈">2.基础知识回顾：虚拟机栈&lt;/h1>
&lt;ul>
&lt;li>在JVM的运行时数据区中，有一块区域叫做&amp;quot;虚拟机栈&amp;rdquo;&lt;/li>
&lt;li>JVM为每个线程维护一个虚拟机栈。&lt;/li>
&lt;li>每个虚拟机栈中包含若干栈帧。&lt;/li>
&lt;li>每个栈帧对应一个方法
&lt;ul>
&lt;li>比如：线程1从函数1开始，函数1调用函数2，那么JVM会为线程1开辟1个虚拟机栈，函数1栈帧和函数2栈帧依次入栈，函数2执行完出栈，函数1继续执行完成后出栈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个栈帧的最关键信息是操作数栈，每个操作数栈存储的就是这个函数的实现。
&lt;ul>
&lt;li>操作数栈存储的内容是JVM指令序列，JVM就是在执行这个指令序列来执行这个函数体。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210911115656192.png" alt="image-20210911115656192">&lt;/p>
&lt;h1 id="3为什么要获得虚拟机栈">3.为什么要获得虚拟机栈？&lt;/h1>
&lt;p>根据&lt;code>1.基础知识回顾：虚拟机栈&lt;/code>，我们知道虚拟机栈可以反应某个线程内，函数的调用链，比如：&lt;/p>
&lt;ul>
&lt;li>场景1：业务代码从main函数开始，层层调用了哪些函数？&lt;/li>
&lt;li>场景2：业务代码启动了某个线程，这个线程内部层层调用了哪些函数？&lt;/li>
&lt;/ul>
&lt;p>什么时候需要获得&amp;quot;函数调用链&amp;quot;呢？比如：&lt;/p>
&lt;ul>
&lt;li>日志组件log4j，它打印错误日志的时候，就需要打印出&amp;quot;函数调用链&amp;rdquo;。&lt;/li>
&lt;li>安全检查的时候，我们可以通过&amp;quot;函数调用链&amp;quot;识别是否有不安全的调用者、不安全的调用链路。&lt;/li>
&lt;/ul>
&lt;h1 id="4how能用">4.How：能用&lt;/h1>
&lt;p>StackWalker提供了4种方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>getInstace&lt;/strong>：获得StackWalker实例&lt;/li>
&lt;li>&lt;strong>forEach&lt;/strong>：遍历栈帧&lt;/li>
&lt;li>&lt;strong>walk&lt;/strong>：通过Stream方式遍历栈帧&lt;/li>
&lt;li>&lt;strong>其它&lt;/strong>：getCallerClass()&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210911162315472.png" alt="image-20210911162315472">&lt;/p>
&lt;p>从实战角度，有两种使用方式：&lt;/p>
&lt;ul>
&lt;li>getInstance + forEach&lt;/li>
&lt;li>getInstance + walk&lt;/li>
&lt;/ul>
&lt;h2 id="41getinstance--foreach">4.1.getInstance + forEach&lt;/h2>
&lt;p>先看一下&lt;code>getInstance和forEach&lt;/code>结合使用的实例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// getInstance + forEach
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">StackWalker&lt;/span> &lt;span class="n">stackWalker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>forEach&lt;/code>方法等效于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="42getinstance--walk">4.2.getInstance + walk&lt;/h2>
&lt;p>再看一下&lt;code>getInstance和walk&lt;/code>结合使用的实例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// getInstance + walk
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">StackWalker&lt;/span> &lt;span class="n">stackWalker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StackFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常，面向谷歌编程的我们，都能对&lt;code>StackWalker&lt;/code>了解到这个程度。但想在实战中用好它，还需要进一步探索。&lt;/p>
&lt;h1 id="5how用好">5.How：用好&lt;/h1>
&lt;h2 id="51安全性-walk为什么禁止返回stream">5.1.安全性-walk()为什么禁止返回Stream？&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210911164640764.png" alt="image-20210911164640764">&lt;/p>
&lt;p>如上图所示，&lt;code>walk方法&lt;/code>的入参&lt;code>function&lt;/code>，这个回调的输入是&lt;code>Stream&amp;lt;StackFrame&amp;gt;&lt;/code>，返回值是T。&lt;code>walk方法&lt;/code>的返回值也是T。&lt;/p>
&lt;p>从语法上，显然可以通过&lt;code>function&lt;/code>将&lt;code>Stream&amp;lt;StackFrame&amp;gt;&lt;/code>作为&lt;code>walk方法&lt;/code>的返回值保存下来。我们可以对保存下来的Stream继续进行二次操作。但运行结果是抛出了异常&lt;code>IllegalStateException &lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 返回了Stream
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stream&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StackFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">returnStreamError&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frames&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">frames&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 继续对Stream进行操作
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">returnStreamError&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">count&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们很容易这样想：当我们在某个时刻调用walk方法时，walk方法通过调用JVM底层某个API获得此时此刻的调用栈的快照，那么我们将这个调用栈快照以Stream的形式保存下来进行二次操作，似乎是逻辑合理的。为什么这个API要禁止这种行为呢？&lt;/p>
&lt;p>然而，逻辑合理不代表&lt;strong>安全&lt;/strong>：基于JVM在运行时的栈优化原理，JVM可能出于性能优化的理由，在任意时刻改变当前的栈结构进行修改。因此，不仅我们保存Stream的行为不安全，每次调用&lt;code>StackWalker#walk()&lt;/code>方法时，都要重新调用JVM侧的native方法，重新对本次调用时刻的虚拟机栈进行快照：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210911174312200.png" alt="image-20210911174312200">&lt;/p>
&lt;blockquote>
&lt;p>说明：上述截图，来自于StackStreamFactory.java#callStackWalk方法&lt;/p>
&lt;/blockquote>
&lt;h2 id="52易用性-getcallerclass-简化get方式">5.2.易用性-getCallerClass()-简化get方式&lt;/h2>
&lt;p>在实战中，我们会有这样一种需求：&lt;code>获得调用者的Class对象&lt;/code>。&lt;/p>
&lt;p>在Java9之前，我们除了通过反射法，还有一种&amp;quot;曲线救国&amp;quot;的手段：&lt;/p>
&lt;ul>
&lt;li>STEP1.继承SecurityMananger，提供一个&lt;code>SecurityManager::getClassContext&lt;/code>方法的包装接口。
&lt;ul>
&lt;li>&lt;code>SecurityManager::getClassContext&lt;/code>方法可以返回调用栈的Class数组。&lt;/li>
&lt;li>&lt;code>SecurityManager::getClassContext&lt;/code>方法是protected类型的方法。&lt;/li>
&lt;li>&lt;code>SecurityManager::getClassContext&lt;/code>方法的内部实现是调用了native方法——&lt;code>protected native Class&amp;lt;?&amp;gt;[] getClassContext()&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：反射法就是先通过Thread::getStackTrace方法获得调用者的类标识符，再通过反射进而获得调用者的Class对象&lt;/p>
&lt;/blockquote>
&lt;p>我们通过示例代码来感受一下这种&amp;quot;曲线救国&amp;quot;的手段：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 自定义SecurityManager
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CustomSecurityManager&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">SecurityManager&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 暴露protected getClassContext()方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">getClassContextWrapper&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">getClassContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">……&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">StackWalker3&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">CustomSecurityManager&lt;/span> &lt;span class="n">customSecurityManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CustomSecurityManager&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stackWalk3&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// get caller class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">clazzArrOld&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">customSecurityManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassContextWrapper&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazzArrOld&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">……&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方法比反射法的优点就是省略了自行反射，弊端是获取Class&amp;lt;?&amp;gt;[]中第N个元素——因为这个数组表示的调用栈的size会随着调用者不同而变化，确定要获取哪个元素的索引，将会变成隐晦的&amp;quot;业务潜规则&amp;rdquo;。&lt;/p>
&lt;p>在Java9，有了&lt;code>StackWalker&lt;/code>，我们再来体验一下新的访问方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// get caller class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazzNew&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCallerClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazzNew&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样的感觉就很&amp;quot;舒服&amp;quot;了，一行代码就可以获得调用者的Class&amp;lt;?&amp;gt;。&lt;/p>
&lt;p>&lt;code>getCallerClass()&lt;/code>方法的内部实现，依然是调用了&lt;code>walk&lt;/code>方法。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913083651592.png" alt="image-20210913083651592">&lt;/p>
&lt;blockquote>
&lt;p>说明：见JDK源码-StackStreamFactory.java&lt;/p>
&lt;/blockquote>
&lt;h2 id="53性能">5.3.性能&lt;/h2>
&lt;p>JEP259中强调了&lt;code>StackWalker&lt;/code>提升了获取虚拟机栈的性能，归纳网上各种技术资料的观点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>观点1&lt;/strong>：&lt;code>getCallerClass()&lt;/code>可以提升性能&lt;/li>
&lt;li>&lt;strong>观点2&lt;/strong>：&lt;code>limit、estimateDepth、skip&lt;/code>可以提升性能&lt;/li>
&lt;li>&lt;strong>观点3&lt;/strong>：延迟加载&lt;code>StackFrame&lt;/code>可以提升性能&lt;/li>
&lt;/ul>
&lt;p>&lt;code>StackWalker&lt;/code>的本质是get的过程，&lt;/p>
&lt;p>如果我们抽象一下get的过程，可以包括两个步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP1.get&lt;/strong>：JDK层调用JVM的native接口，获得虚拟机此时此刻的栈帧集合。&lt;/li>
&lt;li>&lt;strong>STEP2.返回get的结果集&lt;/strong>：JVM的native接口返回抓取的栈帧集合。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913115502150.png" alt="image-20210913115502150">&lt;/p>
&lt;p>那么，我们可以脑补一下可行的性能优化措施：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>约束get的范围&lt;/strong>：支持&amp;quot;分页查找&amp;rdquo;，限制get的行为是获取部分栈帧集合。&lt;/li>
&lt;li>&lt;strong>懒加载get的结果集&lt;/strong>：JVM层用C++实现，JDK层用Java实现，获得的栈帧集合需要从C++的内存数据转换为Java的内存数据。如果高频调用&lt;code>StackWalker&lt;/code>提供的接口，频繁地反序列化栈帧集合的数据结构势必造成性能瓶颈。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913121844567.png" alt="image-20210913121844567">&lt;/p>
&lt;p>基于上述推理，我们可以进一步猜测网上各种技术资料的3个观点是否有可能逻辑成立：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>观点1可能没有显著的性能提升&lt;/strong>：&lt;code>getCallerClass()&lt;/code>仅仅是对walk的包装函数，没有约束get的范围，同时结果集的数据结构也和&lt;code>SecurityManager.getClassContext()&lt;/code>的不同，没有同等的可比性。因此，观点1可能是个性能提升的伪命题。&lt;/li>
&lt;li>&lt;strong>观点2可能有性能提升&lt;/strong>：&lt;code>limit、estimateDepth、skip&lt;/code>本质是在约束get的范围，有性能提升的可能性。&lt;/li>
&lt;li>&lt;strong>观点3可能有性能提升&lt;/strong>：延迟加载&lt;code>StackFrame&lt;/code>可以提升性能&lt;/li>
&lt;/ul>
&lt;p>我们接下来从测试数据和JDK源码，逐一论证。&lt;/p>
&lt;h3 id="531get的方式-getcallerclass">5.3.1.get的方式-getCallerClass&lt;/h3>
&lt;p>一些文章说&lt;code>getCallerClass()&lt;/code>的性能会优于&lt;code>SecurityManager::getClassContext()&lt;/code>，经过实测，并没有太大的差距：&lt;/p>
&lt;p>笔者写了一段测试代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Warmup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Measurement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Threads&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">StackWalkerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShareData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">StackWalkerTest&lt;/span> &lt;span class="n">comp1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StackWalkerTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CustomSecurityManager&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">SecurityManager&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">getClassContextWrapper&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">getClassContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">CustomSecurityManager&lt;/span> &lt;span class="n">customSecurityManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CustomSecurityManager&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">securityManager&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">customSecurityManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassContextWrapper&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">stackWalker&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getCallerClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Benchmark Mode Cnt Score Error Units
StackWalkerTest.securityManager avgt 3 1.112 ± 1.830 us/op
StackWalkerTest.stackWalker avgt 3 1.159 ± 2.166 us/op
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从测试结果看，&lt;code>getCallerClass()&lt;/code>并没有性能提升。&lt;/p>
&lt;p>进一步对比JDK源码：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SecurityManager::getClassContext()&lt;/code>最终调用了&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">native&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">getClassContext&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>StackWalker::getCallerClass()&lt;/code>最终调用了&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">native&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="nf">callStackWalk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">skipframes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">batchSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">startIndex&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">frames&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>暂时没有再深入到JVM的源码，但可以脑补一下，JVM层抓取虚拟机栈的机制不可能有极大的变化，即使做了特殊处理，也不可能有极大的性能提升。&lt;/p>
&lt;p>综合上述测试结果和源码分析，我们基本可以得到这样的结论：&lt;strong>&lt;code>StackWalker::getCallerClass()&lt;/code>性能方面没有太大的变化&lt;/strong>。&lt;/p>
&lt;h3 id="532get的范围-limitestimatedepthskip">5.3.2.get的范围-limit、estimateDepth、skip&lt;/h3>
&lt;p>先看一下比较常用的对walk的Stream处理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// filter1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">filter1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">filter1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StackFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filter1Res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stackWalker&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">filter1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaringClass&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">findFirst&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filter1Res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// filter2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Filter2:&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StackFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">limit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filter2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>写到这里，我们只能得到这样一个结论：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>性能提升的可能性&lt;/strong>：&lt;code>StackWalker.walk()&lt;/code>方法通过支持业务侧根据需要获得栈帧子集，这只是性能提升的可能性。
&lt;ul>
&lt;li>如果业务侧需要获得栈帧的全集，那么也不能说这就是&lt;code>StackWalker.walk()&lt;/code>方法性能提升的根因。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>但，我们知道JDK提供的很多集合类，都存在&amp;rdquo;&lt;strong>初始容量&lt;/strong>&amp;ldquo;问题，因此采用limit、skip方式限定get的范围可能有不同的性能表现。&lt;/p>
&lt;h4 id="5321用limit限定get范围">5.3.2.1.用limit限定get范围&lt;/h4>
&lt;p>栈本质是线性结构，如果栈帧数量为N，那么理论上不断增加limit的数量M，查询时间应该是线性递增的。&lt;/p>
&lt;p>笔者写了这样一段测试代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Warmup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Measurement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Threads&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LimitTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;6&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;7&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;8&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;9&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;11&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;12&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;13&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;14&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;15&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;17&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;18&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">StackWalker&lt;/span> &lt;span class="n">stackWalker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stackWalker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Blackhole&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// LimitTestObj构造了一个多级调用的调用栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">LimitTestObj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">test1&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 用limit处理Stream
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">stackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">limit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">limit&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">consume&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>附LimitTestObj代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">LimitTestObj&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test3&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test3&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test4&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test4&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test5&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test5&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test6&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test6&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test7&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test7&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test8&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test8&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test9&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test9&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test10&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test10&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test11&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test11&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test12&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test12&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test13&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test13&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test14&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test14&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test15&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test15&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test16&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test16&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test17&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test17&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test18&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test18&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">test19&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test19&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ILimitTestCallback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">callback&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">interface&lt;/span> &lt;span class="nc">ILimitTestCallback&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Benchmark (limit) Mode Cnt Score Error Units
LimitTest.stackWalker 1 avgt 3 1.297 ± 5.239 us/op
LimitTest.stackWalker 2 avgt 3 1.467 ± 14.593 us/op
LimitTest.stackWalker 3 avgt 3 1.964 ± 2.089 us/op
LimitTest.stackWalker 4 avgt 3 2.371 ± 0.93 us/op
LimitTest.stackWalker 5 avgt 3 3.147 ± 1.169 us/op
LimitTest.stackWalker 6 avgt 3 3.744 ± 8.11 us/op
LimitTest.stackWalker 7 avgt 3 3.808 ± 5.468 us/op
LimitTest.stackWalker 8 avgt 3 7.098 ± 1.072 us/op
LimitTest.stackWalker 9 avgt 3 5.94 ± 3.466 us/op
LimitTest.stackWalker 10 avgt 3 6.172 ± 14.064 us/op
LimitTest.stackWalker 11 avgt 3 6.202 ± 3.207 us/op
LimitTest.stackWalker 12 avgt 3 6.467 ± 18.106 us/op
LimitTest.stackWalker 13 avgt 3 6.714 ± 4.904 us/op
LimitTest.stackWalker 14 avgt 3 6.667 ± 29.945 us/op
LimitTest.stackWalker 15 avgt 3 6.767 ± 7.403 us/op
LimitTest.stackWalker 16 avgt 3 8.857 ± 8.56 us/op
LimitTest.stackWalker 17 avgt 3 6.682 ± 7.17 us/op
LimitTest.stackWalker 18 avgt 3 6.705 ± 3.477 us/op
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913144346707.png" alt="image-20210913144346707">&lt;/p>
&lt;p>我们可以发现测试结果并没有完全遵循线性规律，而是在limit=8、limit=16出现一个性能跳变。&lt;/p>
&lt;p>为什么会出现性能跳变呢？这里细化一下get的调用过程，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913145348392.png" alt="image-20210913145348392">&lt;/p>
&lt;p>所以，遇到8的倍数，就有可能因为Buffer的扩容出现性能跳变，打破性能的线性化增长。&lt;/p>
&lt;p>我们如何消峰呢？根据&lt;code>StackStreamFactory&lt;/code>的源码，初始化Buffer时，如果&lt;code>StackWalker.getInstace&lt;/code>时设置了&lt;code>estimateDepath&lt;/code>参数，Buffer的Size就是以此为准。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913151127327.png" alt="image-20210913151127327">&lt;/p>
&lt;p>因此，我们可以将limit和estimateDepth结合起来，减少Buffer扩容的影响，示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">limit&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">limit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">limit&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">consume&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基于limit和estimateDepth结合的做法，测试结果中8的峰值被消减掉了：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913153246532.png" alt="image-20210913153246532">&lt;/p>
&lt;h4 id="5322skip">5.3.2.2.skip&lt;/h4>
&lt;p>我们编写了这样一段测试代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Warmup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Measurement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Threads&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LimitTest4&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;6&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;8&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;12&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;14&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">skip&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stackWalker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Blackhole&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">LimitTestObj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">test1&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Option&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETAIN_CLASS_REFERENCE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">walk&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">skip&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">skip&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">consume&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果是skip并不会产生太大的性能差异：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913155815509.png" alt="image-20210913155815509">&lt;/p>
&lt;p>为什么skip并不会带来性能的差异呢？&lt;/p>
&lt;p>因为，根据前文细化的get细节，即使设置了skip，&lt;code>StackWalker&lt;/code>也是从第一帧开始调用JVM::fectchStackFrame方法。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913145348392.png" alt="image-20210913145348392">&lt;/p>
&lt;h4 id="5323小结">5.3.2.3.小结&lt;/h4>
&lt;p>至此，我们可以得到这样的结论：&lt;/p>
&lt;ul>
&lt;li>&lt;code>StackWalker.walk()&lt;/code>方法支持业务侧限定get范围，给了业务侧性能提升的可能性。
&lt;ul>
&lt;li>在Java9之前，即使业务侧只需要获得1个栈帧，JDK也会获得JVM中的全部栈帧。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StackWalker.walk()&lt;/code>方法在限定get范围时，如果可以预估栈帧的size，可以通过limit+estimateDepth降低性能跳变。&lt;/li>
&lt;/ul>
&lt;h3 id="533get结果的处理-stackframe">5.3.3.get结果的处理-StackFrame&lt;/h3>
&lt;p>在JEP259中，强调了&lt;code>StackTraceElement&lt;/code>类是一个&lt;code>代价不菲&lt;/code>的数据结构。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913162826236.png" alt="image-20210913162826236">&lt;/p>
&lt;p>我们来详细解读一下&lt;code>StackFrame&lt;/code>、&lt;code>StackFrameInfo&lt;/code>、&lt;code>StackTraceElement&lt;/code>的关系：&lt;/p>
&lt;p>首先，在walk的过程中仅仅会创建&lt;code>StackFrameInfo&lt;/code>，它实现了&lt;code>StackFrame&lt;/code>接口，&lt;code>StackFrameInfo&lt;/code>只有简单的几个属性：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913163134017.png" alt="image-20210913163134017">&lt;/p>
&lt;p>其中，&lt;code>JLIA&lt;/code>是&lt;code>JavaLangInvokeAccess&lt;/code>类型的，一路跟踪进去，它本质就是对&lt;code>java.lang.invoke&lt;/code>包下的一组API的封装。&lt;/p>
&lt;p>也就是说，在walk期间构造的&lt;code>StackFrameInfo&lt;/code>仅仅通过JVM的native接口获得了一些足够支撑反射的信息，大部分在JDK侧通过反射就能获得的信息，就不用调用性能代价更高的JVM的native接口去获取了。&lt;/p>
&lt;p>另外，调用了&lt;code>StackFrameInfo&lt;/code>对象的&lt;code>getFileName()&lt;/code>、&lt;code>getLineNumber()&lt;/code>、&lt;code>toString()&lt;/code>方法后，这些方法会调用&lt;code>toStackTraceElement()&lt;/code>，这个函数将会生成&lt;code>StackFrameElement&lt;/code>对象，在这个对象中，将会调用JVM的native接口，虽然&lt;code>StackeFrameElement&lt;/code>具备完整的栈帧信息，但是需要通过JVM的native接口获得，所以性能将下降很多。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-4-Java9-StackWalker/image-20210913164023218.png" alt="image-20210913164023218">&lt;/p>
&lt;p>我们可以这样进行对比测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Warmup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Measurement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Threads&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ToStringTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShareData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ToStringTest&lt;/span> &lt;span class="n">comp1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ToStringTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getStackTrace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Blackhole&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">stackTraceElementArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Throwable&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StackTraceElement&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">stackTraceElementArr&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">consume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Benchmark&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stackWalker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Blackhole&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">StackWalker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">consume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toStackTraceElement&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果发现：如果在不必要的场景下，触发了&lt;code>StackFrameElement&lt;/code>的生成，性能表现还不如Java9之前使用&lt;code>Thread::getStackTrace&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Benchmark Mode Cnt Score Error Units
ToStringTest.getStackTrace avgt 3 11.047 ± 16.395 us/op
ToStringTest.stackWalker avgt 3 20.032 ± 27.051 us/op
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至此，我们可以得到两个结论：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>StackWalker&lt;/code>性能优化的核心原理&lt;/strong>：JDK侧通过反射可以获得虚拟机栈中的大部分信息，JVM侧中虽然有虚拟机栈的全量信息，但从JDK侧获取的性能代价非常小，因此&lt;code>StackWalker&lt;/code>所谓的延迟加载就是在非必要的情况下绝不去从JVM去获取虚拟机栈的信息。&lt;/li>
&lt;li>&lt;strong>慎用&lt;code>StackWalker&lt;/code>的性能敏感方法&lt;/strong>：&lt;code>getFileName()&lt;/code>、&lt;code>getLineNumber()&lt;/code>、&lt;code>toString()&lt;/code>方法会触发从JVM获取虚拟机栈的信息，如果业务非必要，慎用。&lt;/li>
&lt;/ul>
&lt;h1 id="6思考">6.思考&lt;/h1>
&lt;p>在学习&lt;code>StackWalker&lt;/code>之初(见第4章节)，是&lt;code>模糊&lt;/code>的，&lt;/p>
&lt;p>在理解了&lt;code>StackWalker&lt;/code>的内部实现(见第5.3.1~5.3.3章节)，我们形成了JDK完整的&amp;rdquo;&lt;strong>性能提升逻辑链&lt;/strong>&amp;quot;：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>性能优化的主要措施&lt;/strong>：&lt;code>StackWalker&lt;/code>主要是使用轻量级对象&lt;code>StackFrameInfo&lt;/code>，降低调用JVM的native接口的性能消耗，这才是性能消耗的大头。&lt;/li>
&lt;li>&lt;strong>性能优化的辅助措施&lt;/strong>：&lt;code>StackWalker&lt;/code>通过支持业务侧限定查询结果的范围，辅助降低了性能消耗。&lt;/li>
&lt;/ul>
&lt;p>有了完整的&amp;quot;性能提升逻辑链&amp;rdquo;，我们才能得到&lt;strong>用好&lt;code>StackWalker&lt;/code>的实战经验&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>缩小get的范围&lt;/strong>：业务侧可以根据需要，通过limit+estimateDepth，提升获取虚拟机栈的性能。&lt;/li>
&lt;li>&lt;strong>尽量使用轻量级结果对象&lt;/strong>：业务侧可以尽量避免调用&lt;code>getFileName()&lt;/code>、&lt;code>getLineNumber()&lt;/code>、&lt;code>toString()&lt;/code>方法。&lt;/li>
&lt;/ul>
&lt;p>笔者在查阅&lt;code>StackWalker&lt;/code>相关资料的时候，还发现了一个有趣与Log4J有关的案例：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://issues.apache.org/jira/browse/LOG4J2-2880">https://issues.apache.org/jira/browse/LOG4J2-2880&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Log4J有这么一个问题单，大致意思就是升级为Java11之后，Log4j会导致CPU得到100%，这个结果将会相当严重。。。&lt;/p>
&lt;p>Log4J的程序猿最后定位的原因是业务侧没有使用&lt;code>private static final&lt;/code>修饰logger对象，同时业务侧采用的是ZGC，&lt;/p>
&lt;p>而logger对象记录日志时又调用了&lt;code>StackWalker&lt;/code>，StackWalker调用JVM::fetch接口时在C++的代码中产生的栈帧对象又不会被ZGC回收(ZGC的Bug)，而C++代码中的栈帧对象又是以Map的形式存储，当Map中的对象越来越多，Hash冲突就越多，于是越查找越慢，最后JVM不断消耗CPU。。。&lt;/p>
&lt;p>这也是触动笔者较大的感触：学习标准库的初级境界是&amp;rdquo;&lt;strong>能用&lt;/strong>&amp;quot;，高级的境界是&amp;rdquo;&lt;strong>用好&lt;/strong>&amp;quot;，&amp;ldquo;用好&amp;quot;的关键有依赖于程序猿的&lt;strong>基本功&lt;/strong>与&lt;strong>探索力&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>基本功&lt;/strong>：面对一种编程语言，基本功往往是先验知识。
&lt;ul>
&lt;li>不要以&amp;quot;实战中用不到&amp;quot;给自己设限(仅停留在语言语法层面)，最好能深入到底层(API的源码-&amp;gt;JVM-&amp;gt;操作系统-&amp;gt;硬件)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>探索逻辑的完备性&lt;/strong>：不要盲目接受新特性&amp;quot;宣称&amp;quot;的优点，特别是一些性能敏感的API。通过JDK/JVM源码推理出完备的逻辑链，避免在产品中踩坑。&lt;/li>
&lt;li>&lt;strong>探索细节背后的故事&lt;/strong>：不要忽略javadoc里的细节或结论，这些细节很可能是API提供者曾经花费大量精力攻克的难关，也可能是API提供者设计的精妙机关。&lt;/li>
&lt;/ul>
&lt;p>没有达到&amp;rdquo;&lt;strong>用好&lt;/strong>&amp;ldquo;的境界，就有可能在不合适的场景下使用&amp;rdquo;&lt;strong>新特性/新API&lt;/strong>&amp;quot;，最终得到极差的**&amp;ldquo;性能&amp;rdquo;、&amp;ldquo;安全性&amp;rdquo;**等。&lt;/p>
&lt;h1 id="7参考">7.参考&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://issues.apache.org/jira/browse/LOG4J2-2880">https://issues.apache.org/jira/browse/LOG4J2-2880&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mail.openjdk.java.net/pipermail/zgc-dev/2019-March/000612.html">https://mail.openjdk.java.net/pipermail/zgc-dev/2019-March/000612.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://openjdk.java.net/jeps/259">https://openjdk.java.net/jeps/259&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://cr.openjdk.java.net/~mchung/jdk9/jep259/api/java/lang/StackWalker.html">https://cr.openjdk.java.net/~mchung/jdk9/jep259/api/java/lang/StackWalker.html&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>【Java新特性】-3-Java9的类加载机制变化</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-3-java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/</link><pubDate>Sun, 22 Aug 2021 10:01:59 +0805</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-3-java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/</guid><description>&lt;h1 id="1why">1.Why&lt;/h1>
&lt;p>在Java Bug System中，我们可以看到Java9与ClassLoader相关的一系列issue：&lt;/p>
&lt;blockquote>
&lt;p>JDK-8170294：java.lang: Define behaviour of &lt;code>null&lt;/code> resource name&lt;/p>
&lt;p>JDK-8161230：java.lang: Add &lt;code>ClassLoader.resources()&lt;/code>&lt;/p>
&lt;p>JDK-8165346：java.lang: Specify exceptional condition for &lt;code>get*Package()&lt;/code>&lt;/p>
&lt;p>JDK-8165793：java.lang: Add &lt;code>ClassLoader.isRegisteredAsParallelCapable()&lt;/code>&lt;/p>
&lt;p>JDK-6516909：java.lang: Enhanced &lt;code>ClassLoader&lt;/code> with respect to loading array classes&lt;/p>
&lt;p>JDK-8165563：java.lang: Update &lt;code>ClassLoader.getSystemClassLoader()&lt;/code>&lt;/p>
&lt;p>JDK-7180225：java.lang: Declare &lt;code>SecurityException&lt;/code> consistently in class loader methods&lt;/p>
&lt;p>JDK-8155770：Networking: Document support of &lt;code>jar:&lt;/code> scheme URLs in &lt;code>URLClassLoader&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>这些Issue表明了两个信息：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>变化&lt;/strong>：在Java9，JVM的类加载机制发生了变化。&lt;/li>
&lt;li>&lt;strong>变化不大&lt;/strong>：JVM类加载机制的变化不大。如果有较大的变化，就不会只通过几个issue来实施，应该通过JEP来落地。&lt;/li>
&lt;/ul>
&lt;p>进一步思考一下，不难理解&lt;code>为什么JVM会出现类加载机制的变化?&lt;/code>：&lt;/p>
&lt;p>以&lt;code>Ext ClassLoader&lt;/code>为例：&lt;/p>
&lt;p>在Java9之前，JDK为了具有扩展性，会将&lt;code>扩展&lt;/code>的jar包放到&lt;code>&amp;lt;JAVA_HOME&amp;gt;\lib\ext&lt;/code>和&lt;code>java.ext.dirts&lt;/code>下，&lt;code>Ext ClassLoader&lt;/code>负责加载这些&lt;code>扩展包&lt;/code>。&lt;/p>
&lt;p>而从Java9开始，Java9引入了&lt;code>JPMS(Java Platform Module System)&lt;/code>，模块化机制帮助Java类库天然地具备扩展性。&lt;/p>
&lt;p>因此，原来的扩展机制可以废弃掉，用来加载这些路径类库的类加载器——&lt;code>Ext ClassLoader&lt;/code>也就完成了它的历史使命。&lt;/p>
&lt;blockquote>
&lt;p>说明：Java9中，基于JPMS机制，tools.jar、rt.jar从物理层面上被拆分成了10+个jmod文件。&lt;/p>
&lt;/blockquote>
&lt;p>至于，类加载机制的变化不大，说明Java9不会因为JPMS而推翻JVM原有的&lt;code>双亲委派模型&lt;/code>和&lt;code>类加载机制&lt;/code>，只是为了在引入JPMS的同时，保证Java9的前向兼容性。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-3-Java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/image-20210909131341238.png" alt="image-20210909131341238">&lt;/p>
&lt;h1 id="2变化点1新的双亲委派模型">2.变化点1：新的双亲委派模型&lt;/h1>
&lt;p>在&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6-1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%89%96%E6%9E%90-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%80%9F%E8%A7%88/">《【类加载机制】-1-类加载器剖析-类加载器速览》&lt;/a>中，笔者对Java8的双亲委派模型评价为&lt;code>&amp;quot;妈宝模型&amp;quot;&lt;/code>。&lt;/p>
&lt;p>即，任何一个待加载的类，都要从&lt;code>Application ClassLoader&lt;/code>一路向上，问上级类加载器能否加载。&lt;/p>
&lt;p>在Java9，因为有了JPMS机制，任何一个类一定都有归属的&lt;code>module&lt;/code>。&lt;/p>
&lt;p>如果事先就定义好系统级的类加载器能够加载哪些系统级的&lt;code>module&lt;/code>，那么这些&lt;code>module&lt;/code>下的类就不必在加载的时候，都要走一圈&lt;code>向上级类加载器询问能否加载&lt;/code>的过程了。&lt;/p>
&lt;p>新的双亲委派模型，本质上就是在原有的双亲委派模型的基础上，给各种类加载器约定了&lt;code>责任田&lt;/code>——即，谁的孩子谁直接带走。&lt;/p>
&lt;p>下图对比了Java9前后的双亲委派模型差异。&lt;/p>
&lt;p>比如：已知&lt;code>类A&lt;/code>归属于&lt;code>系统moduleB&lt;/code>，JVM已经约定&lt;code>系统moduleB&lt;/code>由&lt;code>BootStrap ClassLoader&lt;/code>加载，&lt;/p>
&lt;p>因此，当加载类A时，如下图蓝色线，类A直接交给&lt;code>BootStrap ClassLoader&lt;/code>加载。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-3-Java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/image-20210909135001699.png" alt="image-20210909135001699">&lt;/p>
&lt;p>附：Java9中各个类加载器默认加载的&lt;code>module&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>摘自《深入理解JVM》,周志明&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>BootStrap ClassLoader负责加载的模块：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>java.base&lt;/p>
&lt;p>java.datatransfer&lt;/p>
&lt;p>java.desktop&lt;/p>
&lt;p>java.instrument&lt;/p>
&lt;p>java.logging&lt;/p>
&lt;p>java.management&lt;/p>
&lt;p>java.management.rmi&lt;/p>
&lt;p>java.naming&lt;/p>
&lt;p>java.prefs&lt;/p>
&lt;p>java.rmi&lt;/p>
&lt;p>java.security.sasl&lt;/p>
&lt;p>java.xml&lt;/p>
&lt;p>jdk.httpserver&lt;/p>
&lt;p>jdk.internal.vm.ci&lt;/p>
&lt;p>jdk.management&lt;/p>
&lt;p>jdk.management.agent&lt;/p>
&lt;p>jdk.naming.rmi&lt;/p>
&lt;p>jdk.net&lt;/p>
&lt;p>jdk.sctp&lt;/p>
&lt;p>jdk.unsupported&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Platform ClassLoader负责的&lt;code>module&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>java.activation*&lt;/p>
&lt;p>java.compiler*&lt;/p>
&lt;p>java.corba*&lt;/p>
&lt;p>java.scripting&lt;/p>
&lt;p>java.se&lt;/p>
&lt;p>java.se.ee&lt;/p>
&lt;p>java.security.jgss&lt;/p>
&lt;p>java.smartcardio&lt;/p>
&lt;p>java.sql&lt;/p>
&lt;p>java.sql.rowset&lt;/p>
&lt;p>java.transaction*&lt;/p>
&lt;p>java.xml.bind*&lt;/p>
&lt;p>java.xml.crypto&lt;/p>
&lt;p>java.xml.ws*&lt;/p>
&lt;p>java.xml.ws.annotation*&lt;/p>
&lt;p>jdk.accessibility&lt;/p>
&lt;p>jdk.charsets&lt;/p>
&lt;p>jdk.crypto.cryptoki&lt;/p>
&lt;p>jdk.crypto.ec&lt;/p>
&lt;p>jdk.dynalink&lt;/p>
&lt;p>jdk.incubator.httpclient&lt;/p>
&lt;p>jdk.internal.vm.compiler*&lt;/p>
&lt;p>jdk.jsobject&lt;/p>
&lt;p>jdk.localedata&lt;/p>
&lt;p>jdk.naming.dns&lt;/p>
&lt;p>jdk.scripting.nashorn&lt;/p>
&lt;p>jdk.security.auth&lt;/p>
&lt;p>jdk.security.jgss&lt;/p>
&lt;p>jdk.xml.dom&lt;/p>
&lt;p>jdk.zipfs&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>App ClassLoader负责加载的&lt;code>module&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>jdk.aot&lt;/p>
&lt;p>jdk.attach&lt;/p>
&lt;p>jdk.compiler&lt;/p>
&lt;p>jdk.editpad&lt;/p>
&lt;p>jdk.hotspot.agent&lt;/p>
&lt;p>jdk.internal.ed&lt;/p>
&lt;p>jdk.internal.jvmstat&lt;/p>
&lt;p>jdk.internal.le&lt;/p>
&lt;p>jdk.internal.opt&lt;/p>
&lt;p>jdk.jartool&lt;/p>
&lt;p>jdk.javadoc&lt;/p>
&lt;p>jdk.jcmd&lt;/p>
&lt;p>jdk.jconsole&lt;/p>
&lt;p>jdk.jdeps&lt;/p>
&lt;p>jdk.jdi&lt;/p>
&lt;p>jdk.jdwp.agent&lt;/p>
&lt;p>jdk.jlink&lt;/p>
&lt;p>jdk.jshell&lt;/p>
&lt;p>jdk.jstatd&lt;/p>
&lt;p>jdk.pack&lt;/p>
&lt;p>jdk.policytool&lt;/p>
&lt;p>jdk.rmic&lt;/p>
&lt;p>jdk.scripting.nashorn.shell&lt;/p>
&lt;p>jdk.xml.bind*&lt;/p>
&lt;p>jdk.xml.ws*&lt;/p>
&lt;/blockquote>
&lt;h1 id="3变化点2classloader的类层次关系">3.变化点2：ClassLoader的类层次关系&lt;/h1>
&lt;ul>
&lt;li>在Java9之前，JDK没有提供&lt;code>BootStrapClassLoader&lt;/code>类，&lt;code>ExtClassLoader&lt;/code>类和&lt;code>AppClassLoader&lt;/code>类继承于URLClassLoader。&lt;/li>
&lt;li>在Java9之后，JDK提供了&lt;code>BootClassLoader&lt;/code>类，同时&lt;code>BootClassLoader&lt;/code>、&lt;code>PlatformClassLoader&lt;/code>、&lt;code>AppClassLoader&lt;/code>类继承于&lt;code>BuiltinClassLoader&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-3-Java9%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%98%E5%8C%96/image-20210909145749490.png" alt="image-20210909145749490">&lt;/p>
&lt;p>查看Java9的&lt;code>BuiltinClassLoader::loadClass()&lt;/code>方法源码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">protected&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">loadClassOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">resolve&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">getClassLoadingLock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// check if already loaded
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findLoadedClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// find the candidate module for this class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">LoadedModule&lt;/span> &lt;span class="n">loadedModule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findLoadedModule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">loadedModule&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// package is in a module
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BuiltinClassLoader&lt;/span> &lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loadedModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">loader&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">VM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isModuleSystemInited&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findClassInModuleOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loadedModule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// delegate to the other loader
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClassOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// check parent
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClassOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// check class path
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">hasClassPath&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">VM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isModuleSystemInited&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findClassOnClassPathOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">resolve&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">resolveClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到：JVM优先从&lt;code>module&lt;/code>中查找是否加载了待加载的类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// find the candidate module for this class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">loadedModule&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// package is in a module
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BuiltinClassLoader&lt;/span> &lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loadedModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">loader&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">VM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isModuleSystemInited&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findClassInModuleOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loadedModule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// delegate to the other loader
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClassOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当待加载类不归属于&lt;code>系统级module&lt;/code>，则还是沿用原来的双亲委派模型去加载：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// check parent
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClassOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// check class path
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">hasClassPath&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">VM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isModuleSystemInited&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findClassOnClassPathOrNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="4参考">4.参考&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">深入理解JVM——周志明
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>【Java新特性】-2-Java9新特性宏观解读</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-2-java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/</link><pubDate>Sun, 22 Aug 2021 10:00:59 +0805</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-2-java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/</guid><description>&lt;p>Java9命运多舛，一次次跳票(据说经历了4次跳票)，极大地影响了Java开发者的信心。&lt;/p>
&lt;p>在·www.reddit.com·上，能看到诸如： &lt;a href="https://www.reddit.com/r/java/comments/5mrubn/so_how_do_you_feel_about_java_9/">&amp;lsquo;Java 9, it did break some things,&amp;rsquo; Oracle bod admits to devs still clinging to version 8&lt;/a>这类讨论，这些讨论中充满了Java开发者的不安与焦虑。&lt;/p>
&lt;p>但这些讨论过于强调Java9的某些单点特性和跳票本身。&lt;/p>
&lt;p>显然，不是局部特性的成败，就能决定Java9的成败。&lt;/p>
&lt;p>显然，不是所有的跳票，都不能留给人悬念。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/1.png" alt="image-20210830095628354">&lt;/p>
&lt;p>笔者在《&lt;a href="https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/java%E6%96%B0%E7%89%B9%E6%80%A7-0-%E5%AD%A6%E4%B9%A0java%E6%96%B0%E7%89%B9%E6%80%A7%E5%A6%82%E4%BD%95%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A5/">【Java新特性】-0-学习Java新特性，如何快人一步&lt;/a>》中分享了一种快速学习Java新特性的方法，本文将采用这种方法，对于Java9新特性的全貌进行解读。&lt;/p>
&lt;h1 id="1java9新特性全貌">1.Java9新特性全貌&lt;/h1>
&lt;p>Java9的新特性覆盖了四个方面：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>语言语法&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>核心类库&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展类库&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>JVM&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/Java9%E6%96%B0%E7%89%B9%E6%80%A7.png" alt="Java9新特性">&lt;/p>
&lt;h1 id="2语言语法">2.语言语法&lt;/h1>
&lt;h2 id="21jep">2.1.JEP&lt;/h2>
&lt;p>JEP涉及的改进包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>声明与初始化&lt;/strong>：下划线&amp;rdquo;_&amp;quot;，不再是合法字符。&lt;/li>
&lt;li>&lt;strong>数据类型&lt;/strong>：字符串的内部存储结构发生了变化，用于减少存储空间。&lt;/li>
&lt;li>&lt;strong>面向对象&lt;/strong>：接口支持了私有方法。&lt;/li>
&lt;li>&lt;strong>异常&lt;/strong>：try-with-resources中，支持在try之前定义try()中的资源相关的变量。&lt;/li>
&lt;li>&lt;strong>代码组织方式&lt;/strong>：增加了模块化——这也是Java9最大的新特性，也是饱受争议的新特性。&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>Java依托Coin项目，持续地对&lt;strong>基础语法进行小改进&lt;/strong>，我们及时了解这些改进，有助于提升我们实战中的编码效率。&lt;/li>
&lt;li>Java克服重重阻力，重点推出了&lt;strong>模块化&lt;/strong>。如何熟练使用模块化、如何平滑迁移现有软件产品都是我们的重点研究方向。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：Coin项目是Java团队针对Java语言语法的改进专项，其中吸收了不少从其它现代编程语言中吸收的有趣语法特性，即使这些改进不一定都会在Java中落地，了解它们也能看到在现代编程语言中的广受欢迎的语法特性、语言设计思想。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95-JEP.png" alt="语言语法-JEP">&lt;/p>
&lt;h2 id="22-issues">2.2. Issues&lt;/h2>
&lt;p>Java9在语言语法方面的其它小改进：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据类型&lt;/strong>：主要是API层次的改进
&lt;ul>
&lt;li>增强包装类的parse方法，如：parseInt()&lt;/li>
&lt;li>修改String、StringBuilder、StringBuffer的实现，如：字符串连接，如：修复了indexOf方法的Bug&lt;/li>
&lt;li>加强java.lang.Math，如：增加了fma()，如：增加了floorDiv()、floorMod()、multiplyExact()&lt;/li>
&lt;li>加强了BigDecimal/BigInteger，如：增加了BigDecimal.sqrt()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>查阅这些新增或修改的API的用法，编写测试代码用来留下大致印象，思考实战中能使用这些新API的场景。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：除了通过JEP可以看到新版本Java的变化，还可以通过JDK Bug System(&lt;a href="https://bugs.openjdk.java.net/">https://bugs.openjdk.java.net/&lt;/a>)识别出新版本Java的改动。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95-JDKx.png" alt="语言语法-JDKx">&lt;/p>
&lt;h1 id="3核心类库">3.核心类库&lt;/h1>
&lt;h2 id="31jep">3.1.JEP&lt;/h2>
&lt;p>JEP涉及的改进包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>集合与泛型&lt;/strong>：新增了of方法，便于简化创建集合的代码。&lt;/li>
&lt;li>&lt;strong>多线程编程&lt;/strong>：主要针对API底层实现的修改，用来提升线程相关性能，如：提升存在竞争的对象锁的性能，如：自旋循环提示。&lt;/li>
&lt;li>&lt;strong>反射&lt;/strong>：增加了MethodHandle。&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>重点学习集合与泛型新增的API，有助于提升开发效率。&lt;/li>
&lt;li>了解MethodHandle相关API，有助于编写更有技巧性的代码。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93-JEP.png" alt="核心类库-JEP">&lt;/p>
&lt;h2 id="32-issues">3.2. Issues&lt;/h2>
&lt;p>Java9在核心类库的其它小改进：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>集合与泛型&lt;/strong>：Collections包有少量优化，新增了一些Stream的API——重点。&lt;/li>
&lt;li>&lt;strong>多线程编程&lt;/strong>：优化了java.util.concurrent。&lt;/li>
&lt;li>&lt;strong>反射&lt;/strong>：优化了java.lang.invoke。&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>熟练StreamAPI的优化，提升开发效率。&lt;/li>
&lt;li>熟悉juc包的变化，增强并发编程能力。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93-JDKx.png" alt="核心类库-JDKx">&lt;/p>
&lt;h1 id="4扩展类库">4.扩展类库&lt;/h1>
&lt;h2 id="41jep">4.1.JEP&lt;/h2>
&lt;p>JEP涉及的改进包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>IO编程&lt;/strong>：增强了ProcessAPI&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络编程&lt;/strong>：提供新的HttpClient接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全类库&lt;/strong>：增强了加密算法/密钥等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其它类库&lt;/strong>：如：Nashorn引入和增强，废弃Applet/增强JavaFx，日志库增强等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>熟悉新的ProcessAPI、HttpClient，思考实战中使用场景。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：对于进程相关的库，没有找到更合适的归类方法，暂时放在IO编程分类了。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E6%89%A9%E5%B1%95%E7%B1%BB%E5%BA%93-JEP.png" alt="扩展类库-JEP">&lt;/p>
&lt;h2 id="42issues">4.2.Issues&lt;/h2>
&lt;p>Java9在扩展类库的其它小改进：&lt;/p>
&lt;ul>
&lt;li>修改了IO &amp;amp; NIO对应的API及其底层实现，用来提升性能和健壮性——这是学习的重点。&lt;/li>
&lt;li>XML相关API的内部实现升级。&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>熟悉IO &amp;amp; NIO新的API，以便提升IO编程相关性能。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/%E6%89%A9%E5%B1%95%E7%B1%BB%E5%BA%93-JDKx.png" alt="扩展类库-JDKx">&lt;/p>
&lt;h1 id="5jvm">5.JVM&lt;/h1>
&lt;h2 id="51jep">5.1.JEP&lt;/h2>
&lt;p>JEP涉及的改进包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>编译引擎&amp;amp;类加载&lt;/strong>：模块化导致的双亲委派模型的变化，字符串相加的字节码优化。&lt;/li>
&lt;li>&lt;strong>运行时数据区&lt;/strong>：CDS内存存储字符串的优化，提供栈遍历API。&lt;/li>
&lt;li>&lt;strong>GC&lt;/strong>：将G1作为默认的垃圾回收器、将CMS以及配套的垃圾回收器组合废除——这也是JVM特性最大的改动。&lt;/li>
&lt;li>&lt;strong>执行引擎&lt;/strong>：持续优化C1&amp;amp;C2编译器、增加了AOT编译器&lt;/li>
&lt;li>&lt;strong>工具链&lt;/strong>：增加了jshell、废弃jhat、小改进了javac/java/javadoc等&lt;/li>
&lt;li>&lt;strong>JVMTI/JVMCI&lt;/strong>：增加了JVMCI接口&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GC&lt;/strong>：要熟练掌握GC回收器的配置组合，理解G1的原理——这将成为性能调优的基本技能。&lt;/li>
&lt;li>熟悉JVMCI的接口，以便后续在某些高级场景下使用。&lt;/li>
&lt;li>了解分层编译的原理性知识，了解提前编译器原理和目标。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/JVM-JEP.png" alt="JVM-JEP">&lt;/p>
&lt;h2 id="52issues">5.2.Issues&lt;/h2>
&lt;p>Java9在语言语法方面的其它小改进：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>java.lang.ref&lt;/strong>：对强、软、弱、虚引用的处理进行了增强。&lt;/li>
&lt;li>&lt;strong>java.util.spi、javax.management、java.lang.instrument&lt;/strong>的修改。&lt;/li>
&lt;/ul>
&lt;p>从上述新特性，可以看出我们学习的重点：&lt;/p>
&lt;ul>
&lt;li>理解强、软、弱、虚引用的原理。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90Java%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%91-2-Java9%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%8F%E8%A7%82%E8%A7%A3%E8%AF%BB/JVM-JDKx.png" alt="JVM-JDKx">&lt;/p>
&lt;h1 id="6下一步">6.下一步&lt;/h1>
&lt;p>通过上述解读，相信各位读者对Java9的新特性全景，应该有了一定的理解。&lt;/p>
&lt;p>笔者将在后续文章中，详细剖析上述重点特性。&lt;/p></description></item><item><title>【执行引擎】-1-理清前端编译、即时编译、提前编译</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/</link><pubDate>Fri, 06 Aug 2021 15:00:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/</guid><description>&lt;h1 id="1如何学习jit">1.如何学习JIT？&lt;/h1>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/1.png" alt="1">&lt;/p>
&lt;p>查阅java.exe文档，有三个参数：&lt;code>-Xcomp&lt;/code>、&lt;code>-Xint&lt;/code>、&lt;code>-Xmixed&lt;/code>，引发了笔者的思考：&lt;/p>
&lt;p>虽然JIT是JVM中技术含量极高的核心特性之一，但实战中我们却极少触及(除非您从事的是编译器相关的工作)。&lt;/p>
&lt;p>我们应该如何快速了解JIT的各种编译模式？如何针对性地在实战灵活使用它们？本文将围绕上述问题与读者展开探讨。&lt;/p>
&lt;h1 id="2对立统一编译能力的技术指标">2.对立统一：编译能力的技术指标&lt;/h1>
&lt;h2 id="21在折腾啥">2.1.在折腾啥？&lt;/h2>
&lt;p>了解编译能力技术指标之前，我们先搞清楚现代编译器在折腾啥？&lt;/p>
&lt;p>主流编程语言可以分为2种编译流派：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>直奔主题派&lt;/strong>：编译期直接生成机器码，以C/C++为例：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/2.png" alt="2">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>含蓄婉约派&lt;/strong>：编译期不直接生成机器码，以Java为例：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/3.png" alt="3">&lt;/p>
&lt;p>这里存在一个有趣的技术细节：&lt;code>是不是含蓄婉约派都是在运行时获得机器码呢？&lt;/code>，答案是否定的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>纯解释器时代&lt;/strong>：在Java的初期版本，仅依靠解释器，在这个时期，Java是运行时获得机器码的。&lt;/li>
&lt;li>&lt;strong>解释器+即时编译器时代&lt;/strong>：纯解释器引发了&lt;code>Java的执行性能远低于C/C++&lt;/code>的诟病，于是Java很快就有了即时编译器。在这个时期，Java虽然还是在运行时获得机器码，但机器码除了来自于解释器，很大部分可能来自于即时编译器(被JIT识别为热点代码的字节码会被编译成机器码缓存下来，减少解释器在运行时重复编译的损耗)。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806114107579.png" alt="image-20210806114107579">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>提前编译器时代&lt;/strong>：随着云原生、大数据等业务领域出现，Java也提供了提前编译器。在这个时期，Java就有可能从编译期获得机器码。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806114918865.png" alt="image-20210806114918865">&lt;/p>
&lt;p>上面这个技术细节的有趣之处在于：它体现了现代编译器在编译技术上面临的挑战与发展趋势。&lt;/p>
&lt;p>&lt;a href="http://www.best-of-robotics.org/pages/publications/gherardi12java.pdf">《A Java vs. C++ performance evaluation: a 3D modeling benchmark》&lt;/a>这篇论文，对Java和C++进行性能测试，得到的3个观点也在说明这个趋势：&lt;/p>
&lt;ul>
&lt;li>在纯解释器模式下，Java速度比C++慢10+倍。&lt;/li>
&lt;li>在解释器+即时编译模式下，Java比C++平均慢1.45到2.91倍。
&lt;ul>
&lt;li>在Long-running应用中(JVM有机会进入热机状态)，Java比C++慢1.09~1.91倍。&lt;/li>
&lt;li>在Short-running应用中(JVM无机会进入冷机状态)，Java比C++慢2.72~5.61倍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JIT(即时编译器)无论如何优化，也无法忽视AOT(提前编译器)带来的优势。&lt;/li>
&lt;/ul>
&lt;p>我们可以看到，现代编译器在折腾3个东西：&lt;/p>
&lt;ul>
&lt;li>静态编译(前端编译)&lt;/li>
&lt;li>即时编译&lt;/li>
&lt;li>提前编译&lt;/li>
&lt;/ul>
&lt;h2 id="22折腾的原动力对立统一的编译能力技术指标">2.2.折腾的原动力：对立统一的编译能力技术指标&lt;/h2>
&lt;p>如果说互联网高速发展的源动力是人们对苍老师和PxxxHub的需要，那么现代编译器的驱动力是矛盾的评价指标：&lt;/p>
&lt;ul>
&lt;li>代码优化质量&lt;/li>
&lt;li>编译速度&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806152946493.png" alt="image-20210806152946493">&lt;/p>
&lt;p>&lt;strong>首先，代码优化是很有灰度的工作：&lt;/strong>&lt;/p>
&lt;p>无论编译器如何发展，它们都必须心存敬畏地讨好它们的神——&lt;code>CPU&lt;/code>&lt;/p>
&lt;p>代码优化就是在做&lt;code>讨好CPU&lt;/code>的工作。&lt;/p>
&lt;p>但，过犹不及地&lt;code>讨好&lt;/code>就上升为了&lt;code>欺骗&lt;/code>，马屁拍到马腿上的后果就是&lt;code>过度地代码优化&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806135534437.png" alt="image-20210806135534437">&lt;/p>
&lt;p>&lt;strong>其次，在高质量地优化代码的前提下，还要保证编译速度。&lt;/strong>&lt;/p>
&lt;p>一个质量指标，一个效率指标，两个矛盾的指标，最终&lt;strong>催生了对立统一的优化手段&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解释器+即时编译器混合模式：先基于解释器解释获得机器码，然后将热点代码交给即时编译器获得机器码并缓存&lt;/p>
&lt;ul>
&lt;li>即时编译器优化先做激进优化，激进优化成功了就缓存激进优化后的机器码&lt;/li>
&lt;li>即时编译器激进优化失败了，就降低代码优化级别，再缓存保守优化的机器码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>提前编译模式：啥也不说了，直接一步到位的获得机器码&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：在虚拟机类型的世界里，有个假设，静态编译永远不如即时编译和提前编译的代码优化质量好。&lt;/p>
&lt;/blockquote>
&lt;h2 id="23各领风骚">2.3.各领风骚&lt;/h2>
&lt;p>了解了编译器的技术指标，也就了解了编译器追求的方向，也就形成了这3类编译器各领风骚的技术发展现状。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>各厂家持续在即时编译器领域发力&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如下图所示，Hotspot虚拟机的即时编译器就包含了C1和C2，同时在Java10加入了C2的替代者Graal。&lt;/p>
&lt;blockquote>
&lt;p>说明：C1的职责只是常规的编译优化，C2则承担了更多激进优化的任务。。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>各厂家在探索提前编译器&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如下图所示，Hotspot虚拟机提供了实验性质的jaotc。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/5.png" alt="5">&lt;/p>
&lt;h1 id="3实战中的应用场景">3.实战中的应用场景&lt;/h1>
&lt;h2 id="31场景1解释器c1c2">3.1.场景1：解释器+C1+C2&lt;/h2>
&lt;p>在实战环境中，解释模式+C1+C2是最常用的应用场景。&lt;/p>
&lt;p>以Hotspot为例，解释器与即时编译器的配合过程：首先还是解释器工作，然后热点代码触发即时编译器，即时编译一旦出现激进优化失败就优化降级，甚至把执行权还给解释器。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/6.png" alt="6">&lt;/p>
&lt;p>上图特指Java7及更高版本，在这个前提下，才会有C1和C2，才会发生激进优化、优化降级，这个过程称为&lt;code>分层编译&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>说明：本文不展开分层编译原理。&lt;/p>
&lt;/blockquote>
&lt;h2 id="32场景2解释器">3.2.场景2：解释器&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806144744523.png" alt="image-20210806144744523">&lt;/p>
&lt;p>如上图所示，解释器+即时编译器模式挺好，为啥还需要纯粹的解释器模式呢？实战中，这种一般用于性能调优和测试。&lt;/p>
&lt;p>由于C1和C2的代码优化，我们在产品代码中编写的&lt;code>性能不太友好&lt;/code>的代码可能被JVM自动优化掉。&lt;/p>
&lt;p>但，我们就不能精准、高效地发现这些&lt;code>性能不友好&lt;/code>的代码了。&lt;/p>
&lt;p>所以JVM才通过java.exe的参数提供了这种强制关闭即时编译器的开关。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/1.png" alt="1">&lt;/p>
&lt;p>JVM默认采用混合模式运行(无论JVM处于client模式还是server模式)：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E3%80%91-1-%E7%90%86%E6%B8%85%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E3%80%81%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E3%80%81%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91/image-20210806145459698.png" alt="image-20210806145459698">&lt;/p>
&lt;p>在java.exe的参数中，提供了三个参数，强制控制运行模式：&lt;/p>
&lt;ul>
&lt;li>-Xint：强制虚拟机运行于解释模式。&lt;/li>
&lt;li>-Xcomp:强制虚拟机运行于编译模式&lt;/li>
&lt;li>-Xmixed:运行于混合模式&lt;/li>
&lt;/ul>
&lt;h1 id="4总结">4.总结&lt;/h1>
&lt;p>本文主要内容：&lt;/p>
&lt;ul>
&lt;li>编译器技术指标：代码优化质量、编译速度。&lt;/li>
&lt;li>各厂商重点在即时编译器领域发力，在提前编译器领域探索。&lt;/li>
&lt;li>生产环境上，通常采用解释器+C1+C2模式。&lt;/li>
&lt;li>开发态做性能调优，可以采用强制解释器模式。&lt;/li>
&lt;/ul>
&lt;h1 id="5参考文献">5.参考文献&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>【编译引擎】-4-学习阅读Class文件指令-概览</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/</link><pubDate>Thu, 05 Aug 2021 15:05:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/</guid><description>&lt;h1 id="1前言">1.前言&lt;/h1>
&lt;p>在《【编译引擎】学习阅读Class文件结构(javap版)》中，我们看到了Code属性包含了JVM指令序列。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702135411052.png" alt="image-20210702135411052">&lt;/p>
&lt;p>在理解了Class文件结构之后，学习JVM指令有助于我们更进一步地理解Class文件结构。&lt;/p>
&lt;p>然而，JVM指令是JVM规范另一个大篇幅知识点，我们应该如何高效学习它呢？&lt;/p>
&lt;p>本文将通过上述代码，阐述JVM指令的执行过程(例如：局部变量表中的数据入栈、栈上数据存储回局部变量表等)，为读者展示JVM指令的全貌以及学习方法。&lt;/p>
&lt;h1 id="2jvm指令概览">2.JVM指令概览&lt;/h1>
&lt;h2 id="21本质-信息压缩">2.1.本质-信息压缩&lt;/h2>
&lt;p>在学习具体的JVM之前，我们应该先来看看JVM指令的本质以及它存在的意义。&lt;/p>
&lt;p>不知道您是否考虑过这样一个问题：&amp;ldquo;如何表达一个方法的实现呢？&amp;rdquo;&lt;/p>
&lt;p>您可能会说：可以用代码来描述，如下伪码所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那么，我们把问题增加一些限制：&amp;ldquo;如何用最小的信息量表达一个方法的实现？&amp;rdquo;&lt;/p>
&lt;p>聪明的读者可能会想到&amp;quot;代号法&amp;rdquo;，即为上述伪码取个特殊的代号(假设&amp;quot;int i = 1&amp;quot;的代号是&amp;quot;帅哥&amp;rdquo;，&amp;ldquo;print(i)&amp;ldquo;的代号是&amp;quot;美女&amp;rdquo;)，那么上述伪码可以简化为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">帅哥&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">美女&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们继续把问题增加一些限制：&amp;ldquo;如何用计算机能理解的最小信息量表达一个方法的实现？&amp;rdquo;&lt;/p>
&lt;p>什么是计算机能理解的信息？显然是字节。所以，我们可以约定&amp;quot;0A&amp;quot;就是&amp;quot;帅哥&amp;rdquo;，&amp;ldquo;0B&amp;quot;就是&amp;quot;美女&amp;rdquo;，如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">0A&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">0B&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样的信息，在某些场景下(对于人)越大越好，在某些场景下(对于机器)越小越好。&lt;/p>
&lt;p>更关键的是，二者能相互转换——这就好像三体中智子的高维折叠和低维展开。&lt;/p>
&lt;p>这或许就是计算机的世界中，最令人着迷的地方。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702144922740.png" alt="image-20210702144922740">&lt;/p>
&lt;h2 id="22jvm指令格式">2.2.JVM指令格式&lt;/h2>
&lt;p>JVM指令的格式一般是这样的：&lt;/p>
&lt;blockquote>
&lt;p>操作码+操作数&lt;/p>
&lt;/blockquote>
&lt;p>操作码为1个字节，在JVM规范中约定了这个字节表达的具体的JVM指令含义。&lt;/p>
&lt;p>这是一个有趣的细节：1个字节是8位，所以JVM指令的操作码最多只有255个&lt;/p>
&lt;p>操作数可以没有，也可能有多个。&lt;/p>
&lt;h2 id="23jvm指令分类">2.3.JVM指令分类&lt;/h2>
&lt;p>JVM规范中的JVM指令非常多，我们可以根据指令的使用场景分类，本文仅列举实战中最常用的场景：&lt;/p>
&lt;ul>
&lt;li>加载与存储：比如将局部变量表的数据放到虚拟机栈中&lt;/li>
&lt;li>算数指令：比如i++&lt;/li>
&lt;li>类型转换指令：比如int转double&lt;/li>
&lt;li>对象创建/字段访问：比如创建一个类的实例，并且访问该实例的某个属性&lt;/li>
&lt;li>方法调用：比如访问一个类的静态方法&lt;/li>
&lt;li>异常处理：比如抛出一个异常&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h2 id="24真理都在规范中">2.4.真理都在规范中&lt;/h2>
&lt;p>当我们具备了前面的基本知识，最高效、最准确地学习JVM指令，就要查阅JVM规范了：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702150908956.png" alt="image-20210702150908956">&lt;/p>
&lt;h1 id="3实例解读">3.实例解读&lt;/h1>
&lt;p>为了方便阅读，我们将javap输出的日志简化后展示如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]);&lt;/span>
&lt;span class="err">……………………&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// String start
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">8&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokestatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="c1">// Method test:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">14&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">6&lt;/span> &lt;span class="c1">// String end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">16&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">19&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="err">……………………&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="err">……………………&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">7&lt;/span> &lt;span class="c1">// class java/lang/IllegalArgumentException
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span>
&lt;span class="n">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">8&lt;/span> &lt;span class="c1">// String exception
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">9&lt;/span> &lt;span class="c1">// Method java/lang/IllegalArgumentException.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">athrow&lt;/span>
&lt;span class="err">……………………&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="31对象创建指令">3.1对象创建指令&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702152821188.png" alt="image-20210702152821188">&lt;/p>
&lt;p>new是操作码，#7是操作数。&lt;/p>
&lt;p>#7表示常量池中的常量，从javap的输出可知，#7表示IllegalArgumentException异常。&lt;/p>
&lt;p>new表示创建了IllegalArgumentException异常对象。&lt;/p>
&lt;p>创建了异常对象后，对象本身放到堆中，对象的内存地址会放到栈中。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702152324438.png" alt="image-20210702152324438">&lt;/p>
&lt;p>下一步就是dup，dup只有操作码，没有操作数。&lt;/p>
&lt;p>dup就是将栈中前一个元素进行了复制。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702152609221.png" alt="image-20210702152609221">&lt;/p>
&lt;p>那么为什么要dup呢？&lt;/p>
&lt;p>这就涉及到后面方法调用的指令了，当执行了&lt;code>invokespecial&lt;/code>指令，就会将栈中的&lt;code>#0001&lt;/code>出栈。&lt;/p>
&lt;p>所以，一般创建了对象后，会紧跟着dup一下。&lt;/p>
&lt;h2 id="32常量入栈指令">3.2.常量入栈指令&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702152857941.png" alt="image-20210702152857941">&lt;/p>
&lt;p>ldc是操作码，#8是操作数。&lt;/p>
&lt;p>根据javap的输出提示，#8表示的是字符串类型常量&amp;quot;exception&amp;rdquo;。&lt;/p>
&lt;p>ldc负责将这个常量入栈：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702153046669.png" alt="image-20210702153046669">&lt;/p>
&lt;h2 id="33方法调用指令">3.3.方法调用指令&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702153131436.png" alt="image-20210702153131436">&lt;/p>
&lt;p>invokespecial是操作码，#9是操作数&lt;/p>
&lt;p>#9表示&lt;code>IllegalArgumentException&lt;/code>异常的构造函数&lt;/p>
&lt;p>invokespecial表示了调用特定的函数，在这里调用的是&lt;code>IllegalArgumentException&lt;/code>异常的构造函数，并且需要给构造函数输入一个字符串参数&amp;quot;exception&amp;rdquo;。&lt;/p>
&lt;p>此时运行时数据区变成了这样：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702153403860.png" alt="image-20210702153403860">&lt;/p>
&lt;h2 id="34异常处理指令">3.4.异常处理指令&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702153452470.png" alt="image-20210702153452470">&lt;/p>
&lt;p>athrow只有操作码，表示抛出&lt;code>IllegalArgumentException&lt;/code>异常，并结束了test方法。&lt;/p>
&lt;p>至此，我们通过test()方法，就覆盖了JVM指令主要的4个场景：创建对象-&amp;gt;常量入栈-&amp;gt;调用方法-&amp;gt;抛出异常。&lt;/p>
&lt;h2 id="35main函数的jvm指令执行过程">3.5.main函数的JVM指令执行过程&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-4-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4-%E6%A6%82%E8%A7%88/image-20210702153713484.png" alt="image-20210702153713484">&lt;/p>
&lt;p>有了3.1~3.4的基础，我们再看main函数的执行就很容易举一反三了：&lt;/p>
&lt;p>&lt;code>getstatic #2&lt;/code>属于类/对象的属性获取场景，即将System.out放到栈中&lt;/p>
&lt;p>&lt;code>invokevirtual #4&lt;/code>类似invokestatic指令，也是调用方法，即调用System.out.println&lt;/p>
&lt;p>此时，控制台打印了&amp;quot;start&amp;rdquo;。&lt;/p>
&lt;p>执行到invokestatic #5，即执行了test()方法，会抛出异常，导致main函数不再往下执行后面的JVM指令。&lt;/p>
&lt;p>因此，最终控制台打印了start后抛出&lt;code>IllegalArgumentException&lt;/code>异常&lt;/p>
&lt;h1 id="4总结">4.总结&lt;/h1>
&lt;p>本文接着javap案例，进一步解读了javap的JVM指令部分，具体如下：&lt;/p>
&lt;ul>
&lt;li>JVM指令的本质是信息压缩&lt;/li>
&lt;li>JVM指令格式一般包含1个操作码+N个操作数&lt;/li>
&lt;li>可以根据场景对JVM指令分类，有助于高效学习JVM指令&lt;/li>
&lt;li>通过一个示例代码，解读了JVM指令的运行过程&lt;/li>
&lt;/ul>
&lt;h1 id="5参考资料">5.参考资料&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html&lt;/a>&lt;/p>
&lt;p>《深入理解Java虚拟机：JVM高级特性与最佳实践》&lt;/p>
&lt;/blockquote></description></item><item><title>【编译引擎】-3-学习阅读Class文件结构(javap版)</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84javap%E7%89%88/</link><pubDate>Thu, 05 Aug 2021 15:00:31 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84javap%E7%89%88/</guid><description>&lt;h1 id="1前言">1.前言&lt;/h1>
&lt;p>在《【编译引擎】学习阅读Class文件结构(16进制版)》中，我们一起直接阅读了Class文件的16进制版本。&lt;/p>
&lt;p>虽然这种方式可以帮助我们深刻理解Class文件结构，但如果您从事的是应用软件开发(而不是编译器相关工作)，这样就比较低效了。&lt;/p>
&lt;p>今天我们就来看看JVM提供的javap，如何提升我们解读Class结构的工作效率。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210129115436313.png" alt="image-20210129115436313">&lt;/p>
&lt;h1 id="2javap">2.javap&lt;/h1>
&lt;h2 id="21命令行学习方法">2.1.命令行学习方法&lt;/h2>
&lt;p>最好的学习资源就是官方文档：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/en/java/javase/11/tools/javap.html#GUID-BE20562C-912A-4F91-85CF-24909F212D7F">https://docs.oracle.com/en/java/javase/11/tools/javap.html#GUID-BE20562C-912A-4F91-85CF-24909F212D7F&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在这里，我们可以获得最全面的javap使用指导。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604135122739.png" alt="image-20210604135122739">&lt;/p>
&lt;h2 id="22命令行详解">2.2.命令行详解&lt;/h2>
&lt;h3 id="221javap的命令行结构">2.2.1.javap的命令行结构&lt;/h3>
&lt;blockquote>
&lt;p>javap [options] classfiles&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>[options]：javap的命令行选项&lt;/p>
&lt;p>classfiles：是我们需要反汇编的一个或多个类文件。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604135556794.png" alt="image-20210604135556794">&lt;/p>
&lt;h3 id="222最常用的options">2.2.2.最常用的options&lt;/h3>
&lt;p>实战中，比较常用的options是输出所有显示所有类和成员、输出类的附件信息(如：堆栈大小、局部变量数量和方法的参数)&lt;/p>
&lt;blockquote>
&lt;p>javap -v -p Test.class&lt;/p>
&lt;/blockquote>
&lt;p>其中，&lt;/p>
&lt;ul>
&lt;li>-v：输出类的附件信息(如：堆栈大小、局部变量数量和方法的参数)&lt;/li>
&lt;li>-p：显示所有的类和成员&lt;/li>
&lt;/ul>
&lt;h3 id="223梳理options">2.2.3.梳理options&lt;/h3>
&lt;p>在官方文档中，javap的options很多，笔者做了这样的归类：&lt;/p>
&lt;ul>
&lt;li>与类有关的options：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>-l：打印行和局部变量表&lt;/p>
&lt;p>-package：显示程序包/受保护的/公共类和成员 (默认)&lt;/p>
&lt;p>-public：只显示公共类和成员&lt;/p>
&lt;p>-protected：只显示受保护的和公共的类和成员&lt;/p>
&lt;p>-p -private：显示所有的类和成员&lt;/p>
&lt;p>-s：打印内部类型签名&lt;/p>
&lt;p>-constants：显示static final常量&lt;/p>
&lt;p>-c：打印类中每个方法的反汇编代码，例如，组成Java字节码的指令&lt;/p>
&lt;p>-v，-verbose：打印堆栈大小、局部变量数量和方法的参数&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>与JVM有关的options：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>-classpath &lt;path>，-cp &lt;path>：指定javap命令用于查找类的路径。覆盖默认的CLASSPATH环境变量
-bootclasspath &lt;path>：指定加载引导类的路径。默认情况下，引导类是实现位于jre/lib/rt.jar和其它几个jar
-extdir dirs：覆盖扩展类的位置。扩展的默认位置是java.ext.dirs的值
Joption：将指定的选项传递给JVM(JVM的options详见java命令文档)
eg:
javap -J-version
javap -J-Djava.security.manager -J-Djava.security.policy=MyPolicy MyClassName
-sysinfo：显示正在处理的类的系统信息(路径、大小、日期、MD5哈希值)&lt;/p>
&lt;/blockquote>
&lt;h3 id="224javap的形和神">2.2.4.javap的形和神&lt;/h3>
&lt;p>前面解读了javap的命令行手册，这些只能算作javap的形，也比较好掌握，我们看看官方文档的javap输出的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Compiled&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s">&amp;#34;HelloWorldFrame.java&amp;#34;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloWorldFrame&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">swing&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">JFrame&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">HelloWorldFrame&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="c1">// Method javax/swing/JFrame.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// String Hello World!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">putfield&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// Field message:Ljava/lang/String;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// class HelloWorldFrame$1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">14&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span>
&lt;span class="n">15&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">16&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="c1">// Method HelloWorldFrame$1.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:(LHelloWorldFrame;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">19&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">6&lt;/span> &lt;span class="c1">// Method setContentPane:(Ljava/awt/Container;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">22&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">23&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">bipush&lt;/span> &lt;span class="n">100&lt;/span>
&lt;span class="n">25&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">bipush&lt;/span> &lt;span class="n">100&lt;/span>
&lt;span class="n">27&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">7&lt;/span> &lt;span class="c1">// Method setSize:(II)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">30&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]);&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">8&lt;/span> &lt;span class="c1">// class HelloWorldFrame
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span>
&lt;span class="n">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">9&lt;/span> &lt;span class="c1">// Method &amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">astore_1&lt;/span>
&lt;span class="n">8&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_1&lt;/span>
&lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_1&lt;/span>
&lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">10&lt;/span> &lt;span class="c1">// Method setVisible:(Z)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">13&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不了解JVM字节码的程序猿依然看不懂，这些就是javap的神。&lt;/p>
&lt;p>这就好像&lt;code>辟邪剑法&lt;/code>与&lt;code>辟邪剑谱&lt;/code>的关系。&lt;/p>
&lt;p>接下来，我们就来解读一下javap的输出结果——字节码。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604142536789.png" alt="image-20210604142536789">&lt;/p>
&lt;h1 id="3javap输出结果解读">3.javap输出结果解读&lt;/h1>
&lt;blockquote>
&lt;p>说明：Java虚拟机规范中很大的篇幅就是约定字节码各个Section的职责、含义、约束，以及JVM指令集，本文不可能一一详尽阐述。因此本文聚焦于解读字节码的总体结构，旨在最快速地为大家建立Class文件结构的脉络，后续案例也会进一步展开字节码技术，对试题进行更有深度的解读。&lt;/p>
&lt;/blockquote>
&lt;h2 id="31字节码的基础知识">3.1.字节码的基础知识&lt;/h2>
&lt;p>为了便于不太了解JVM字节码的程序猿更快进入下一章节，我们简单回顾和小结一下字节码的知识：&lt;/p>
&lt;ul>
&lt;li>STEP1.我们通过java命令，将.java文件转化为.class文件(也就是字节码)&lt;/li>
&lt;li>STEP2.字节码文件本身是什么呢？我们可以用16进制编辑器打开它&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>字节码文件本身就是一串字节流。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604144157084.png" alt="image-20210604144157084">&lt;/p>
&lt;ul>
&lt;li>STEP3.为了看的更加清楚一些，我们将有关联的字节用同一种颜色着色：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果您做过网络协议的开发，会发现字节码(字节流)与协议栈(如：ModBus)的逻辑很类似，几个字节为一组表达一个信息。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604144211764.png" alt="image-20210604144211764">&lt;/p>
&lt;ul>
&lt;li>STEP4.抽象一下上述着色字节流，我们可以将Class文件结构抽象如下&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>字节码基础属性&lt;/p>
&lt;p>常量池：占据字节码文件最大的篇幅&lt;/p>
&lt;p>类的基本信息：包含类名的索引、类访问标识、父类名的索引、实现了多少接口等信息&lt;/p>
&lt;p>字段列表：包含有多少字段，每个字段名的索引、访问标识等&lt;/p>
&lt;p>方法列表：包含多少方法，每个方法名的索引、访问标识、方法的实现等&lt;/p>
&lt;p>附加属性&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604145305097.png" alt="image-20210604145305097">&lt;/p>
&lt;h2 id="32通过示例代码解读javap的输出">3.2.通过示例代码，解读javap的输出&lt;/h2>
&lt;p>我们以一段示例代码，来解读javap的输出：&lt;/p>
&lt;ul>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604150455456.png" alt="image-20210604150455456">&lt;/p>
&lt;ul>
&lt;li>javap输出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">javap&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="n">Demo2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>
&lt;span class="n">Classfile&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">Demo2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>
&lt;span class="n">Last&lt;/span> &lt;span class="n">modified&lt;/span> &lt;span class="n">2021&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">25&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="n">613&lt;/span> &lt;span class="n">bytes&lt;/span>
&lt;span class="n">MD5&lt;/span> &lt;span class="n">checksum&lt;/span> &lt;span class="n">f7c661d99330a1eefb32b6429e5a48b4&lt;/span>
&lt;span class="n">Compiled&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s">&amp;#34;Demo2.java&amp;#34;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">firelord&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zsample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jvm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">frontcompiler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Demo2&lt;/span>
&lt;span class="n">minor&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="n">major&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">52&lt;/span>
&lt;span class="n">flags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ACC_PUBLIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ACC_SUPER&lt;/span>
&lt;span class="n">Constant&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Methodref&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">7&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">21&lt;/span> &lt;span class="c1">// java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Fieldref&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">6&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">22&lt;/span> &lt;span class="c1">// com/firelord/zsample/lang/jvm/frontcompiler/Demo2.field1:I
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Fieldref&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">23&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">24&lt;/span> &lt;span class="c1">// java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">25&lt;/span> &lt;span class="c1">// hello world
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Methodref&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">26&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">27&lt;/span> &lt;span class="c1">// java/io/PrintStream.println:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">28&lt;/span> &lt;span class="c1">// com/firelord/zsample/lang/jvm/frontcompiler/Demo2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">7&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">29&lt;/span> &lt;span class="c1">// java/lang/Object
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">field1&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">9&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">I&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">11&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="o">()&lt;/span>&lt;span class="n">V&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">12&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">Code&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">13&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">LineNumberTable&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">LocalVariableTable&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">15&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="k">this&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">Lcom&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">firelord&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">zsample&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">frontcompiler&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Demo2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">17&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">hello&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">19&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">SourceFile&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">Demo2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">21&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NameAndType&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">11&lt;/span> &lt;span class="c1">// &amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">22&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NameAndType&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">8&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">9&lt;/span> &lt;span class="c1">// field1:I
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">23&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">30&lt;/span> &lt;span class="c1">// java/lang/System
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">24&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NameAndType&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">32&lt;/span> &lt;span class="c1">// out:Ljava/io/PrintStream;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">25&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">hello&lt;/span> &lt;span class="n">world&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">26&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">33&lt;/span> &lt;span class="c1">// java/io/PrintStream
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">27&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NameAndType&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">34&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">35&lt;/span> &lt;span class="c1">// println:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">28&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">firelord&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">zsample&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">frontcompiler&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Demo2&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">29&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Object&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">30&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">System&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">31&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">out&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">Ljava&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">PrintStream&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">33&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">PrintStream&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">34&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="n">println&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">35&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Utf8&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Ljava&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">;)&lt;/span>&lt;span class="n">V&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">field1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">descriptor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">I&lt;/span>
&lt;span class="n">flags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ACC_PRIVATE&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">firelord&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zsample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jvm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">frontcompiler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Demo2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">descriptor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">()&lt;/span>&lt;span class="n">V&lt;/span>
&lt;span class="n">flags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ACC_PUBLIC&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">stack&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">locals&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">1&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="c1">// Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span>
&lt;span class="n">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_1&lt;/span>
&lt;span class="n">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">putfield&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field field1:I
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="n">LineNumberTable&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="n">LocalVariableTable&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">Start&lt;/span> &lt;span class="n">Length&lt;/span> &lt;span class="n">Slot&lt;/span> &lt;span class="n">Name&lt;/span> &lt;span class="n">Signature&lt;/span>
&lt;span class="n">0&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="n">Lcom&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">firelord&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">zsample&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">frontcompiler&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Demo2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">descriptor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">()&lt;/span>&lt;span class="n">V&lt;/span>
&lt;span class="n">flags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ACC_PUBLIC&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">stack&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">locals&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">1&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_1&lt;/span>
&lt;span class="n">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;span class="n">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// String hello world
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="n">LineNumberTable&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="n">8&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">10&lt;/span>
&lt;span class="n">LocalVariableTable&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">Start&lt;/span> &lt;span class="n">Length&lt;/span> &lt;span class="n">Slot&lt;/span> &lt;span class="n">Name&lt;/span> &lt;span class="n">Signature&lt;/span>
&lt;span class="n">0&lt;/span> &lt;span class="n">11&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="n">Lcom&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">firelord&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">zsample&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">frontcompiler&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Demo2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">2&lt;/span> &lt;span class="n">9&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="n">I&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nl">SourceFile:&lt;/span> &lt;span class="s">&amp;#34;Demo2.java&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="321class文件基础信息">3.2.1.Class文件基础信息&lt;/h3>
&lt;p>Class文件的基础信息包括：&lt;/p>
&lt;ul>
&lt;li>class文件的路径&lt;/li>
&lt;li>class文件的修改时间、class文件的大小&lt;/li>
&lt;li>class文件的MD5值&lt;/li>
&lt;li>java文件的名称&lt;/li>
&lt;li>jdk的大版本/小版本号&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604151205810.png" alt="image-20210604151205810">&lt;/p>
&lt;h3 id="332常量池">3.3.2.常量池&lt;/h3>
&lt;p>常量池的细节知识有很多，但是有3个关键点：&lt;/p>
&lt;ul>
&lt;li>访问权限、字符串等等，都是JVM所认为的&amp;quot;常量&amp;rdquo;&lt;/li>
&lt;li>常量池中存储了多种类型的常量&lt;/li>
&lt;li>常量之间以类似&amp;quot;指针&amp;quot;的形式来表达源代码&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>例如：class Demo2，那么常量池有就会有一个UTF-8类型的常量表示&amp;quot;Demo2&amp;rdquo;，还会有一个类的符号引用指向&amp;quot;Demo2&amp;quot;这个UTF-8的常量。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604151237501.png" alt="image-20210604151237501">&lt;/p>
&lt;h3 id="333访问标识类索引">3.3.3.访问标识、类索引&lt;/h3>
&lt;p>在常量池的基础上，JVM首先要表达源文件中的类，类的关键要素包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>类名：javap的输出结果中有多处呈现了类名是Demo2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类的访问权限：本例中，javap的输出就是表示Demo2类是public的，并且继承于Object类&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604151731952.png" alt="image-20210604151731952">&lt;/p>
&lt;h3 id="334字段表">3.3.4.字段表&lt;/h3>
&lt;p>进一步，字节码要表达：&lt;/p>
&lt;ul>
&lt;li>Demo2类中有几个字段：javap的输出告诉我们，Demo2只有1个字段field1&lt;/li>
&lt;li>field1字段的数据类型：从输出可以看到，field1是int类型&lt;/li>
&lt;li>field1字段的访问权限：从输出可以看出，field1是private&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604152056658.png" alt="image-20210604152056658">&lt;/p>
&lt;h3 id="335方法表">3.3.5.方法表&lt;/h3>
&lt;p>更进一步，字节码要表达：&lt;/p>
&lt;ul>
&lt;li>Demo2@类中有几个方法：本例中，有一个默认的构造函数，还有一个hello方法&lt;/li>
&lt;li>方法的原型：从输出看，hello方法的访问权限是public，返回值是void，没有输入参数&lt;/li>
&lt;li>方法的具体实现：从输出看，hello方法被转换为了73~88行的JVM指令序列、行号表、局部变量表。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-3-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(javap%E7%89%88)/image-20210604152334770.png" alt="image-20210604152334770">&lt;/p>
&lt;blockquote>
&lt;p>说明：本文篇幅有限，无法展开讲解hello方法的指令执行过程，以及如何动态set/get局部变量表。有兴趣的读者可以尝试解读一下hello方法的指令执行过程。&lt;/p>
&lt;/blockquote>
&lt;h1 id="4总结">4.总结&lt;/h1>
&lt;p>本文解读了javap的使用以及javap的输出结果，具体如下：&lt;/p>
&lt;ul>
&lt;li>理解字节码以及JVM价值&lt;/li>
&lt;li>javap的学习方法&lt;/li>
&lt;li>javap命令行常用option&lt;/li>
&lt;li>javap命令行的options解读&lt;/li>
&lt;li>字节码的主体结构&lt;/li>
&lt;li>通过一个示例代码，演练了javap输出结果中各个section的含义&lt;/li>
&lt;/ul>
&lt;h1 id="5参考资料">5.参考资料&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/en/java/javase/11/tools/javap.html#GUID-BE20562C-912A-4F91-85CF-24909F212D7F">https://docs.oracle.com/en/java/javase/11/tools/javap.html#GUID-BE20562C-912A-4F91-85CF-24909F212D7F&lt;/a>&lt;/p>
&lt;p>《深入理解Java虚拟机：JVM高级特性与最佳实践》&lt;/p>
&lt;/blockquote></description></item><item><title>【编译引擎】-2-学习阅读Class文件结构(16进制版)-下</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8B/</link><pubDate>Thu, 05 Aug 2021 14:55:02 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8B/</guid><description>&lt;p>在《【编译引擎】学习阅读Class文件结构(16进制版)-上》、《【编译引擎】学习阅读Class文件结构(16进制版)-中》两篇文章中，笔者讲解了如何以16进制的方式，解读Demo2.java对应字节码的常量池、字段表、方法表。&lt;/p>
&lt;p>我们继续解读Demo2.class字节码的方法表的Code属性片段。&lt;/p>
&lt;h1 id="1复杂信息的树状表达属性树">1.复杂信息的树状表达：属性树&lt;/h1>
&lt;p>如果说前面两篇文章描述的信息相对简单，那么当我们需要用一种形式表达一个函数的实现就显得更加复杂了。&lt;/p>
&lt;p>我们逆向思考一下，假设我们就是JVM，JVM需要完成哪些&lt;strong>重要的任务&lt;/strong>：&lt;/p>
&lt;h2 id="11源代码转化为指令序列">1.1.源代码转化为指令序列&lt;/h2>
&lt;p>在编译阶段，JVM能够获得的信息形式是——&lt;strong>函数实现的源代码X&lt;/strong>&lt;/p>
&lt;p>而在运行阶段，JVM需要输出给CPU的信息形式是——&lt;strong>CPU能够理解并执行的CPU指令序列Z&lt;/strong>&lt;/p>
&lt;p>因此，JVM需要将&lt;strong>源代码X&lt;/strong>转换为&lt;strong>指令序列Z&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Z = G(X)&lt;/p>
&lt;/blockquote>
&lt;p>为了实现&lt;strong>转换函数G&lt;/strong>，首先，在编译阶段，JVM将&lt;strong>源代码X&lt;/strong>转换为&lt;strong>JVM指令序列Y&lt;/strong>，即&lt;/p>
&lt;blockquote>
&lt;p>Y = F1(X)&lt;/p>
&lt;/blockquote>
&lt;p>然后，在运行阶段，JVM动态地将&lt;strong>JVM指令序列Y&lt;/strong>转换为&lt;strong>CPU指令序列Z&lt;/strong>，即&lt;/p>
&lt;blockquote>
&lt;p>Z = F2(Y)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/1.png" alt="image-20201213164014831">&lt;/p>
&lt;p>至此，我们可以得到一个结论：&lt;strong>JVM指令序列是表示函数实现源代码的重要信息之一&lt;/strong>。&lt;/p>
&lt;h2 id="12维护局部变量列表">1.2.维护局部变量列表&lt;/h2>
&lt;p>我们至少知道3个经验：&lt;/p>
&lt;blockquote>
&lt;p>如果函数内一条语句使用了前面已经定义过的局部变量，则该语句能获得此局部变量最新的值。&lt;/p>
&lt;p>如果函数内一条语句使用了一个局部变量，但局部变量没有定义，IDE就会出现语法错误。&lt;/p>
&lt;p>即使是一个空的函数实现，这个函数里面，IDE至少能联想出一个变量this。&lt;/p>
&lt;/blockquote>
&lt;p>通过这3个经验，我们知道JVM至少具备如下能力：&lt;/p>
&lt;blockquote>
&lt;p>函数内定义了哪些局部变量，这些局部变量最新的值是多少。&lt;/p>
&lt;p>这些局部变量的作用范围从哪里开始，到哪里结束。&lt;/p>
&lt;/blockquote>
&lt;p>JVM通过实现&lt;strong>局部变量表&lt;/strong>存储上述信息：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/2.png" alt="image-20201213165522458">&lt;/p>
&lt;p>因此，我们可以得到另一个结论：&lt;strong>局部变量表也是表示函数实现源代码的必要信息&lt;/strong>。&lt;/p>
&lt;h2 id="13源代码与jvm指令序列的映射关系">1.3.源代码与JVM指令序列的映射关系&lt;/h2>
&lt;p>从1.1可知，调试程序本质是调试运行时指令序列，我们必然需要知道调试的指令序列对应于源代码中的位置。&lt;/p>
&lt;p>JVM通过行号表存储了映射关系：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/3.png" alt="image-20201213210037072">&lt;/p>
&lt;p>同样的，我们得到另一个结论：&lt;strong>行号表也是表示函数实现源代码的必要信息&lt;/strong>。&lt;/p>
&lt;h2 id="14属性树">1.4.属性树&lt;/h2>
&lt;p>综合前述的分析，JVM需要定义一个&lt;strong>表达属性的树表结构&lt;/strong>才能表示一个函数的内部实现，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/4.png" alt="image-20201213225139342">&lt;/p>
&lt;p>&lt;strong>Code属性自身具有一些基础信息&lt;/strong>(例如：操作数栈最大深度)，Code属性还包含&lt;strong>子属性&lt;/strong>(例如：行号表子属性、局部变量表子属性)。&lt;/p>
&lt;p>这样，就形成了一个属性树。&lt;/p>
&lt;h2 id="15属性">1.5.属性&lt;/h2>
&lt;blockquote>
&lt;p>JVM：&lt;em>Attributes&lt;/em> are used in the &lt;code>ClassFile&lt;/code>, &lt;code>field_info&lt;/code>, &lt;code>method_info&lt;/code>, and &lt;code>Code_attribute&lt;/code> structures of the &lt;code>class&lt;/code> file format&lt;/p>
&lt;/blockquote>
&lt;p>JVM将Code抽象的称为&lt;strong>属性&lt;/strong>，将&lt;strong>行号表&lt;/strong>也抽象为&lt;strong>属性&lt;/strong>，将&lt;strong>局部变量表&lt;/strong>也抽象地称为&lt;strong>属性&lt;/strong>。在JVM中，还有其它更多的&lt;strong>属性&lt;/strong>。&lt;/p>
&lt;p>但无论哪种属性，JVM都采用了如下数据结构表示&lt;strong>属性的共性&lt;/strong>：&lt;/p>
&lt;p>2个字节是属性名在常量池中的索引。&lt;/p>
&lt;p>4个字节表示这个属性的字节码长度N。&lt;/p>
&lt;p>紧接着N个字节表示这个属性具体的字节码。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/5.png" alt="image-20201213230831717">&lt;/p>
&lt;p>深一步思考，又有一个问题：不同的属性应该有不同的数据结构，&lt;strong>JVM怎么区分表达属性的特有信息&lt;/strong>呢？&lt;/p>
&lt;p>JVM就是根据属性名来区分的不同类型的属性，&lt;strong>每种属性又有自己独有的数据结构&lt;/strong>，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/6.png" alt="image-20201213232241686">&lt;/p>
&lt;p>好，有了这些前置知识，我们接下来详细解读Code、LineNumberTable、LocalVariableTable属性。&lt;/p>
&lt;h1 id="2code属性">2.Code属性&lt;/h1>
&lt;h2 id="21code属性名">2.1.Code属性名&lt;/h2>
&lt;p>hello方法下挂的属性名索引=&lt;strong>00 0C&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/7.png" alt="image-20201213230043475">&lt;/p>
&lt;p>&lt;strong>00 0C=12&lt;/strong>，对应&lt;strong>第12个常量&lt;/strong>，即&lt;strong>Code属性&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/8.png" alt="image-20201214002838199">&lt;/p>
&lt;h2 id="22code属性字节码长度">2.2.Code属性字节码长度&lt;/h2>
&lt;p>hello方法下挂的Code属性长度=&lt;strong>00 00 00 47&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/9.png" alt="image-20201214002946890">&lt;/p>
&lt;p>说明Code属性占据的字节码长度为&lt;strong>00 00 00 47=71&lt;/strong>，如下图红框：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/10.png" alt="image-20201214003317799">&lt;/p>
&lt;h2 id="23code属性操作数栈最大长度">2.3.Code属性.操作数栈最大长度&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>Code&lt;/code> attribute is a variable-length attribute in the &lt;code>attributes&lt;/code> table of a &lt;code>method_info&lt;/code> structure . A &lt;code>Code&lt;/code> attribute contains the Java Virtual Machine instructions and auxiliary information for a method, including an instance initialization method or a class or interface initialization method&lt;/p>
&lt;/blockquote>
&lt;p>进一步，查阅JVM规范，Code属性的数据结构如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/11.png" alt="image-20201214090813324">&lt;/p>
&lt;p>从max_stack开始，2个字节表示操作数栈最大深度。&lt;/p>
&lt;p>&lt;strong>00 02 = 2&lt;/strong>，表示针对Demo2代码，&lt;strong>操作数栈的最大深度为2&lt;/strong>。&lt;/p>
&lt;p>另外，这里涉及到对虚拟机栈的理解，笔者将会在后续文章中展开。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/12.png" alt="image-20201214071931530">&lt;/p>
&lt;h2 id="24code属性局部变量表长度">2.4.Code属性.局部变量表长度&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>max_locals&lt;/code> item gives the number of local variables in the local variable array allocated upon invocation of this method&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/13.png" alt="image-20201214072317654">&lt;/p>
&lt;p>00 02 = 2，&lt;strong>局部变量表最大长度为2&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/14.png" alt="image-20201214072400159">&lt;/p>
&lt;h2 id="25code属性指令序列长度">2.5.Code属性.指令序列长度&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>code_length&lt;/code> item gives the number of bytes in the &lt;code>code&lt;/code> array for this method.&lt;/p>
&lt;/blockquote>
&lt;p>4个字节表示紧接着的有多少个字节存储JVM指令序列。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/15.png" alt="image-20201214072528544">&lt;/p>
&lt;p>&lt;strong>00 00 00 0B=11&lt;/strong>，表示Demo2的hello方法转化的JVM指令序列，需要11个字节存储。&lt;/p>
&lt;p>这就很神奇了，一段这样的代码，竟然被转换成了11个字节：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/16.png" alt="image-20201214073202146">&lt;/p>
&lt;h2 id="26code属性指令序列">2.6.Code属性.指令序列&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>code&lt;/code> array gives the actual bytes of Java Virtual Machine code that implement the method.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/17.png" alt="image-20201214073245663">&lt;/p>
&lt;p>下图是Demo2的hello方法转换后的JVM指令序列：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/18.png" alt="image-20201214073409407">&lt;/p>
&lt;p>根据JVM规范，笔者将16进制字节码人工翻译成JVM指令序列：&lt;/p>
&lt;p>&lt;strong>04 =&amp;gt; iconst_1&lt;/strong>，表示将1加载到虚拟机栈中。&lt;/p>
&lt;p>&lt;strong>3C =&amp;gt; istore_1&lt;/strong>，表示将上一步的数据存储到局部变量表的第1位。&lt;/p>
&lt;p>&lt;strong>B2 00 03 =&amp;gt; getstatic 3&lt;/strong>，表示调用第3个常量映射的&lt;strong>java.io.PrintStream&lt;/strong>类。&lt;/p>
&lt;p>&lt;strong>12 04 =&amp;gt; Idc 4&lt;/strong>，表示将第4个常量映射的**&amp;ldquo;hello world&amp;quot;字符串**加载到虚拟机栈中。&lt;/p>
&lt;p>&lt;strong>B6 00 05=&amp;gt;invokevirtual 5&lt;/strong>，表示调用第5个常量映射的&lt;strong>println&lt;/strong>方法。&lt;/p>
&lt;p>&lt;strong>B1=&amp;gt;return&lt;/strong>，表示此函数&lt;strong>执行完成后返回&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/19.png" alt="image-20201214095755437">&lt;/p>
&lt;p>我们对比一下Demo2的源代码：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/20.png" alt="image-20201214100012611">&lt;/p>
&lt;h1 id="3linenumbertable属性">3.LineNumberTable属性&lt;/h1>
&lt;h2 id="31linenumbertable属性名">3.1.LineNumberTable属性名&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>attribute_name_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>2个字节表示属性名。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/21.png" alt="image-20201214101143092">&lt;/p>
&lt;p>&lt;strong>00 0D=13&lt;/strong>，表示第13个常量。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/22.png" alt="image-20201214103511715">&lt;/p>
&lt;p>根据常量池映射关系，&lt;strong>第13个常量&lt;/strong>表示&lt;strong>LineNumberTable&lt;/strong>字符串&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/23.png" alt="image-20201214103741137">&lt;/p>
&lt;h2 id="32linenumbertable属性字节码长度">3.2.LineNumberTable属性字节码长度&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>attribute_length&lt;/code> item indicates the length of the attribute, excluding the initial six bytes.&lt;/p>
&lt;/blockquote>
&lt;p>4个字节表示属性占用的字节码长度。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/24.png" alt="image-20201214101226009">&lt;/p>
&lt;p>&lt;strong>00 00 00 0E&lt;/strong>=14，表示行号表占据字节码14个字节长度。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/25.png" alt="image-20201214103837705">&lt;/p>
&lt;p>因此，行号表的字节码如下图红框所示：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/26.png" alt="image-20201214104013281">&lt;/p>
&lt;h2 id="33linenumbertable属性的行数据">3.3.LineNumberTable属性的行数据&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Each entry in the &lt;code>line_number_table&lt;/code> array indicates that the line number in the original source file changes at a given point in the &lt;code>code&lt;/code> array. Each &lt;code>line_number_table&lt;/code> entry must contain the following two items:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>start_pc&lt;/p>
&lt;p>The value of the &lt;code>start_pc&lt;/code> item must indicate the index into the &lt;code>code&lt;/code> array at which the code for a new line in the original source file begins.The value of &lt;code>start_pc&lt;/code> must be less than the value of the &lt;code>code_length&lt;/code> item of the &lt;code>Code&lt;/code> attribute of which this &lt;code>LineNumberTable&lt;/code> is an attribute.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>line_number&lt;/p>
&lt;p>The value of the &lt;code>line_number&lt;/code> item must give the corresponding line number in the original source file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>行号表分为两列，一列是&lt;strong>在JVM指令序列的索引(start_pc)&lt;/strong>，一列是&lt;strong>源代码的行号(line_number)&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/27.png" alt="image-20201214101431970">&lt;/p>
&lt;p>我们将前文解读的JVM指令序列、Demo2的hello方法的源代码，与行号表的字节码对比，可以看到：&lt;/p>
&lt;p>行号表第1行数据：表示JVM指令序列第0行与源代码第7行对应。&lt;/p>
&lt;p>行号表第2行数据：表示JVM指令序列第2行与源代码第8行对应。&lt;/p>
&lt;p>行号表第3行数据：表示JVM指令序列第10行与源代码第9行对应。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/28.png" alt="image-20201214102952547">&lt;/p>
&lt;h1 id="4localvariabletable属性">4.LocalVariableTable属性&lt;/h1>
&lt;h2 id="41localvariabletable属性名">4.1.LocalVariableTable属性名&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>attribute_name_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>2个字节表示属性名。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/29.png" alt="image-20201214105409665">&lt;/p>
&lt;p>&lt;strong>00 0E=14&lt;/strong>，表示第14个常量。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/30.png" alt="image-20201214105753233">&lt;/p>
&lt;p>根据常量池映射关系，&lt;strong>第14个常量&lt;/strong>表示&lt;strong>LocalVariableTable&lt;/strong>字符串。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/31.png" alt="image-20201214110018137">&lt;/p>
&lt;h2 id="42localvariabletable属性字节码长度">4.2.LocalVariableTable属性字节码长度&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>attribute_length&lt;/code> item indicates the length of the attribute, excluding the initial six bytes.&lt;/p>
&lt;/blockquote>
&lt;p>4个字节表示属性占用的字节码长度。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/32.png" alt="image-20201214105443811">&lt;/p>
&lt;p>&lt;strong>00 00 00 16&lt;/strong>=22，表示局部变量表占据字节码22个字节长度。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/33.png" alt="image-20201214110048114">&lt;/p>
&lt;p>因此，行号表的字节码如下图红框所示：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/34.png" alt="image-20201214111222724">&lt;/p>
&lt;h2 id="43localvariabletable属性的行数据">4.3.LocalVariableTable属性的行数据&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Each entry in the &lt;code>local_variable_table&lt;/code> array indicates a range of &lt;code>code&lt;/code> array offsets within which a local variable has a value. It also indicates the index into the local variable array of the current frame at which that local variable can be found. Each entry must contain the following five items:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>start_pc, length&lt;/p>
&lt;p>The given local variable must have a value at indices into the &lt;code>code&lt;/code> array in the interval [&lt;code>start_pc&lt;/code>, &lt;code>start_pc + length&lt;/code>), that is, between &lt;code>start_pc&lt;/code> inclusive and &lt;code>start_pc + length&lt;/code> exclusive.The value of &lt;code>start_pc&lt;/code> must be a valid index into the &lt;code>code&lt;/code> array of this &lt;code>Code&lt;/code> attribute and must be the index of the opcode of an instruction.The value of &lt;code>start_pc + length&lt;/code> must either be a valid index into the &lt;code>code&lt;/code> array of this &lt;code>Code&lt;/code> attribute and be the index of the opcode of an instruction, or it must be the first index beyond the end of that &lt;code>code&lt;/code> array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>name_index&lt;/p>
&lt;p>The value of the &lt;code>name_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table. The &lt;code>constant_pool&lt;/code> entry at that index must contain a &lt;code>CONSTANT_Utf8_info&lt;/code> structure (&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7">§4.4.7&lt;/a>) representing a valid unqualified name denoting a local variable (&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.2.2">§4.2.2&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>descriptor_index&lt;/p>
&lt;p>The value of the &lt;code>descriptor_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table. The &lt;code>constant_pool&lt;/code> entry at that index must contain a &lt;code>CONSTANT_Utf8_info&lt;/code> structure (&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7">§4.4.7&lt;/a>) representing a field descriptor which encodes the type of a local variable in the source program (&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2">§4.3.2&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>index&lt;/p>
&lt;p>The given local variable must be at &lt;code>index&lt;/code> in the local variable array of the current frame.If the local variable at &lt;code>index&lt;/code> is of type &lt;code>double&lt;/code> or &lt;code>long&lt;/code>, it occupies both &lt;code>index&lt;/code> and &lt;code>index + 1&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>行号表分为X列：&lt;/p>
&lt;p>列1是&lt;strong>局部变量在JVM指令序列的索引(start_pc)&lt;/strong>&lt;/p>
&lt;p>列2是&lt;strong>局部变量在JVM指令序列偏移量(length)&lt;/strong>&lt;/p>
&lt;p>列3是&lt;strong>局部变量名在常量池中的索引&lt;/strong>&lt;/p>
&lt;p>列4是&lt;strong>局部变量类型&lt;/strong>&lt;/p>
&lt;p>列5是&lt;strong>局部变量槽位&lt;/strong>——这里涉及到槽位重用问题，笔者将在讲解虚拟机栈的后续章节展开。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/35.png" alt="image-20201214105609730">&lt;/p>
&lt;p>我们将前文解读的JVM指令序列、Demo2的hello方法的源代码，与行号表的字节码对比，可以看到：&lt;/p>
&lt;p>局部变量表第1行数据：表示局部变量this，类型为Demo2，作用域hello整个函数。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/36.png" alt="image-20201214112254032">&lt;/p>
&lt;p>局部变量表第2行数据：表示局部变量i，类型为int，作用域hello函数的**&amp;ldquo;int i =1&amp;quot;语句后**，**“return”语句前**。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/37.png" alt="image-20201214112737327">&lt;/p>
&lt;h1 id="5总结jvm如何描述一个方法的内部实现">5.总结：JVM如何描述一个方法的内部实现?&lt;/h1>
&lt;p>根据Demo2演练代码，JVM描述了如下信息：&lt;/p>
&lt;h2 id="51三大重要信息的转换与存储">5.1.三大重要信息的转换与存储&lt;/h2>
&lt;ul>
&lt;li>在&lt;strong>虚拟机栈&lt;/strong>中，为hello方法开辟了一个&lt;strong>栈帧&lt;/strong>&lt;/li>
&lt;li>将源代码转换为&lt;strong>JVM指令序列&lt;/strong>，存储在&lt;strong>栈帧的Code属性&lt;/strong>中&lt;/li>
&lt;li>将局部变量存储在&lt;strong>栈帧的局部变量表&lt;/strong>中&lt;/li>
&lt;li>将源代码和JVM指令序列&lt;strong>位置映射关系&lt;/strong>，&lt;strong>存储在栈帧的行号表&lt;/strong>中&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/38.png" alt="image-20201214120538585">&lt;/p>
&lt;h2 id="52随着jvm指令序列执行动态刷新内存栈帧">5.2.随着JVM指令序列执行，动态刷新内存(栈帧)&lt;/h2>
&lt;ul>
&lt;li>当逻辑代码&lt;strong>int i =1&lt;/strong>执行时，栈帧中JVM指令序列执行到3C处，局部变量i被赋值为1；&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/39.png" alt="image-20201214121148759">&lt;/p>
&lt;ul>
&lt;li>当逻辑代码&lt;strong>System.out.println(&amp;ldquo;hello world&amp;rdquo;)&lt;strong>语句执行时，栈帧中JVM指令序列执行到&lt;/strong>05&lt;/strong>处，打印了常量池中&amp;quot;hello world&amp;quot;字符串；&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/40.png" alt="image-20201214121349494">&lt;/p>
&lt;p>上述过程，引出了JVM运行时数据区中的栈区以及内存结构。读者可以参考笔者这篇文章《【运行时数据区】用仓库管理员的视角理解运行时数据区》&lt;/p>
&lt;h1 id="6再看阅读字节码">6.再看阅读字节码&lt;/h1>
&lt;p>笔者在文章开头写了那个&amp;quot;牛逼程序猿看着一堆16进制致敬女神&amp;quot;的段子，但是头条不让开车就删掉了O(∩_∩)O~&lt;/p>
&lt;p>虽然我们不追求段子中的效果，但阅读字节码，的确是程序猿技术深度的重要体现。&lt;/p>
&lt;p>如果您耐心的将笔者的4篇文章阅读完，&lt;/p>
&lt;ul>
&lt;li>《【编译引擎】学习阅读Class文件结构的意义》&lt;/li>
&lt;li>《【编译引擎】学习阅读Class文件结构(16进制版)-上》&lt;/li>
&lt;li>《【编译引擎】学习阅读Class文件结构(16进制版)-中》&lt;/li>
&lt;li>《【编译引擎】学习阅读Class文件结构(16进制版)-下》&lt;/li>
&lt;/ul>
&lt;p>我们可以再来看看能够阅读字节码的Java程序猿，将具备哪些&amp;quot;一般码农&amp;quot;缺乏的能力：&lt;/p>
&lt;h2 id="61能够从更深的深度理解java的语言语法特性">6.1.能够从更深的深度，理解Java的语言语法特性&lt;/h2>
&lt;p>当您看到《Effective Java》、《阿里编程规范》等编程规范、高效编程实践的时候，&lt;/p>
&lt;p>不了解Java字节码的码农，是这样的思维：&lt;/p>
&lt;blockquote>
&lt;p>因为规范禁止我们这样做，所以我在实战中的代码一定不会这样写。&lt;/p>
&lt;/blockquote>
&lt;p>而了解Java字节码的程序猿，是这样的思维：&lt;/p>
&lt;blockquote>
&lt;p>为什么规范要禁止我们这样做，我要看看JVM指令序列，看看JVM是如何处理的。&lt;/p>
&lt;/blockquote>
&lt;p>例如：规范中禁止&lt;strong>count=count++这种语句&lt;/strong>，&lt;/p>
&lt;p>不了解Java字节码的码农，只能死记硬背；&lt;/p>
&lt;p>而了解Java字节码的程序猿，就可以查看JVM指令序列。&lt;/p>
&lt;h2 id="62能够提供性能优化的高维打击手段">6.2.能够提供性能优化的高维打击手段&lt;/h2>
&lt;p>在Spring源码中，有很多细节代码，下图摘自知乎的一个帖子：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8B/41.png" alt="image-20201214123137927">&lt;/p>
&lt;p>如果不了解字节码，您肯定想不到第2行的代码，居然会对性能优化产生一定的帮助。&lt;/p>
&lt;p>谢谢各位读者！&lt;/p></description></item><item><title>【编译引擎】-2-学习阅读Class文件结构(16进制版)-中</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%AD/</link><pubDate>Thu, 05 Aug 2021 14:55:01 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%AD/</guid><description>&lt;p>在《【编译引擎】学习阅读Class文件结构(16进制版)-上》中，笔者讲解了如何以16进制的方式，解读Demo2.java对应字节码的常量池。&lt;/p>
&lt;p>我们继续解读Demo2.class字节码的属性表、方法表等重要的片段。&lt;/p>
&lt;h1 id="1对类的描述访问标识">1.对类的描述：访问标识&lt;/h1>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>access_flags&lt;/code> item is a mask of flags used to denote access permissions to and properties of this class or interface.&lt;/p>
&lt;/blockquote>
&lt;p>在字节码文件中，紧接着常量池之后，2个字节表示了当前类或者接口访问标识。&lt;/p>
&lt;p>它的结构如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/1.png" alt="image-20201210103634981">&lt;/p>
&lt;p>我们看一下第35个常量之后紧接着的2个字节：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/2.png" alt="image-20201210104039071">&lt;/p>
&lt;p>这个值=&lt;strong>00 21&lt;/strong>，对照JVM规范可知，&lt;strong>0x0021 = 0x0001 | 0x0020&lt;/strong>，表示当前类是public类型的，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/3.png" alt="image-20201210104405014">&lt;/p>
&lt;p>这两个字节，表示的就是演练代码中红框处内容：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/4.png" alt="image-20201210105237723">&lt;/p>
&lt;h1 id="2继承结构类索引父类索引接口列表">2.继承结构：类索引/父类索引/接口列表&lt;/h1>
&lt;blockquote>
&lt;p>JVM规范：&lt;/p>
&lt;p>The value of the &lt;code>this_class&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;p>For a class, the value of the &lt;code>super_class&lt;/code> item either must be zero or must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;p>The value of the &lt;code>interfaces_count&lt;/code> item gives the number of direct superinterfaces of this class or interface type.&lt;/p>
&lt;/blockquote>
&lt;p>2个字节表示当前&lt;strong>类索引&lt;/strong>&lt;/p>
&lt;p>2个字节表示&lt;strong>父类索引&lt;/strong>&lt;/p>
&lt;p>2个字节表示&lt;strong>接口计数器&lt;/strong>、N个字节(N=接口计数器的值)表示&lt;strong>接口索引列表&lt;/strong>(每个接口索引占2个字节)。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/5.png" alt="image-20201210105451548">&lt;/p>
&lt;p>我们看一下下图红框处的6个字节：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/6.png" alt="image-20201210110411942">&lt;/p>
&lt;p>&lt;strong>00 06&lt;/strong>表示常量池中第6个常量(CONSTANT_Class类型)，进而指向了第28个常量(CONSTANT_Utf8类型)，表示的就是Demo2类。&lt;/p>
&lt;p>&lt;strong>00 07&lt;/strong>表示常量池中第6个常量(CONSTANT_Class类型)，进而指向了第28个常量(CONSTANT_Utf8类型)，表示的就是Demo2的父类——Object类。&lt;/p>
&lt;p>&lt;strong>00 00&lt;/strong>表示接口计数器为0，表示Demo2类没有实现任何接口。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/7.png" alt="image-20201210142241019">&lt;/p>
&lt;p>这些字节码表达了红框处代码的信息：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/8.png" alt="image-20201210143458209">&lt;/p>
&lt;h1 id="3类的成员们字段表">3.类的成员们：字段表&lt;/h1>
&lt;h2 id="31字段计数器">3.1.字段计数器&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>fields_count&lt;/code> item gives the number of &lt;code>field_info&lt;/code> structures in the &lt;code>fields&lt;/code> table&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/9.png" alt="image-20201210143849778">&lt;/p>
&lt;p>红框处的2个字节&lt;strong>00 01&lt;/strong>，表示Demo2类中有1个字段&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/10.png" alt="image-20201210144133507">&lt;/p>
&lt;h2 id="32jvm如何表示一个字段">3.2.JVM如何表示一个字段&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Each field is described by a &lt;code>field_info&lt;/code> structure.&lt;/p>
&lt;p>No two fields in one &lt;code>class&lt;/code> file may have the same name and descriptor&lt;/p>
&lt;/blockquote>
&lt;p>JVM为了表示类中的一个字段(例如：一个实例变量)，用如下数据结构表示：&lt;/p>
&lt;p>访问标志：2个字节，就是这个字段的访问权限，例如：private、public等。&lt;/p>
&lt;p>字段名索引：2个字节，就是这个字段的在常量池中的索引。&lt;/p>
&lt;p>字段描述符：2个字节，就是这个字段的类型。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/11.png" alt="image-20201210145124123">&lt;/p>
&lt;h2 id="33字段访问标志">3.3.字段访问标志&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>access_flags&lt;/code> item is a mask of flags used to denote access permission to and properties of this field.&lt;/p>
&lt;/blockquote>
&lt;p>JVM认为字段访问标志包括：public、private、protected，也包括static、final、volatile、transient，还包括enum修饰符&lt;/p>
&lt;p>具体如下表：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/12.png" alt="image-20201210144454329">&lt;/p>
&lt;p>在Demo2类的字节码中，显示值为&lt;strong>00 02&lt;/strong>，说明Demo2有1个字段，字段为private。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/13.png" alt="image-20201210144522844">&lt;/p>
&lt;p>对应Demo2的代码如下图红框：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/14.png" alt="image-20201210145650738">&lt;/p>
&lt;h2 id="33字段名索引">3.3.字段名索引&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>name_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>如同其它&amp;quot;索引&amp;quot;类型的信息片段，JVM也是用在常量池的索引表示字段名。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/15.png" alt="image-20201210150016307">&lt;/p>
&lt;p>在Demo2的字节码中，字段名索引值=&lt;strong>00 08&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/16.png" alt="image-20201210150106811">&lt;/p>
&lt;p>&lt;strong>00 08&lt;/strong>表示了常量池&lt;strong>第8个常量&lt;/strong>，第8个常量为CONSTANT_Utf8类型，就是&lt;strong>字面量&amp;quot;field1&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/17.png" alt="image-20201210150325539">&lt;/p>
&lt;p>Demo2源码中，也说明，&lt;strong>Demo2类中实例变量名就是field1&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/18.png" alt="image-20201210150529362">&lt;/p>
&lt;h2 id="34字段描述符">3.4.字段描述符&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>descriptor_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>2个字节的字段描述符，就是表示字段的数据类型，例如：int、byte、char、double或者对象引用等。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/19.png" alt="image-20201210150830424">&lt;/p>
&lt;p>Demo2的字节码中，&lt;strong>00 09&lt;/strong>就是字段field1的描述符：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/20.png" alt="image-20201210151009853">&lt;/p>
&lt;p>&lt;strong>00 09&lt;/strong>表示field1的类型可以去查常量池的&lt;strong>第9个常量&lt;/strong>，第9个常量是CONSTANT_Utf8类型，&lt;strong>值为I，I表示的就是int&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/21.png" alt="image-20201210151218499">&lt;/p>
&lt;p>看到Demo2的源码中，&lt;strong>field1的数据类型就是int&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/22.png" alt="image-20201210151241013">&lt;/p>
&lt;h1 id="4类的行为集合方法表">4.类的行为集合：方法表&lt;/h1>
&lt;h2 id="41方法计数器">4.1.方法计数器&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>methods_count&lt;/code> item gives the number of &lt;code>method_info&lt;/code> structures in the &lt;code>methods&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>JVM用2个字节，表示类中具有多少个方法。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/23.png" alt="image-20201210152620970">&lt;/p>
&lt;p>Demo2的字节码中，&lt;strong>00 02&lt;/strong>说明有2个方法。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/24.png" alt="image-20201210152702983">&lt;/p>
&lt;p>可是Demo2的源码中，不是只有一个方法hello吗？&lt;/p>
&lt;p>那是因为Demo2还有一个构造函数，JVM将构造函数命名为&lt;init>方法。&lt;/p>
&lt;p>JVM还会在某些场景下生成&lt;clinit>方法，笔者将在后续文章中阐述。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/25.png" alt="image-20201210152848314">&lt;/p>
&lt;h2 id="42jvm如何表示一个方法">4.2.JVM如何表示一个方法&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Each method, including each instance initialization method and the class or interface initialization method, is described by a &lt;code>method_info&lt;/code> structure.&lt;/p>
&lt;/blockquote>
&lt;p>要用一种数据结构表达方法，最基本的有3个要素：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>方法的访问权限&lt;/strong>&lt;/li>
&lt;li>&lt;strong>方法名&lt;/strong>&lt;/li>
&lt;li>&lt;strong>方法返回值类型&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>进一步，方法体、方法内的局部变量等等怎么表达呢？&lt;/p>
&lt;p>JVM采用了属性表来表示它们，这一部分，也是笔者认为&amp;quot;广义的编译器&amp;quot;非常聪明、非常巧妙的信息表示方法。&lt;/p>
&lt;p>下图摘自JVM规范，方法内部的信息采用属性表表示，属性表中每一个属性又可以嵌套一个子属性表。&lt;/p>
&lt;p>这样就形成了一个多级的属性树。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/26.png" alt="image-20201210155258368">&lt;/p>
&lt;p>这里表述的很抽象，我们接下来以Demo2中的hello方法为例，具象化地理解JVM表达方法的method_info以及下属的属性树。&lt;/p>
&lt;p>下图红框，就是hello方法，在字节码中的信息片段。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/27.png" alt="image-20201210152525140">&lt;/p>
&lt;h2 id="43hello方法的访问标识符">4.3.hello方法的访问标识符&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>access_flags&lt;/code> item is a mask of flags used to denote access permission to and properties of this method.&lt;/p>
&lt;/blockquote>
&lt;p>方法访问标识符包括：public/private/protected，也包括static/final，还包括synchronized/native，以及abstract等等。&lt;/p>
&lt;p>可以看到方法的访问标识符就是Java代码中，在方法名前面，对方法的各种访问限定，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/28.png" alt="image-20201210163636030">&lt;/p>
&lt;p>Demo2的字节码中，访问标识符=&lt;strong>00 01&lt;/strong>，根据上表，说明hello方法是public类型的：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/29.png" alt="image-20201210163418660">&lt;/p>
&lt;p>对照Demo2的源代码，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/30.png" alt="image-20201210163938998">&lt;/p>
&lt;h2 id="44hello方法名">4.4.hello方法名&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>name_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>这2个字节也是索引类型，指向了常量池中的常量。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/31.png" alt="image-20201210164225563">&lt;/p>
&lt;p>Demo2的字节码中，&lt;strong>00 11&lt;/strong>指向了&lt;strong>第17个常量&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/32.png" alt="image-20201210164206078">&lt;/p>
&lt;p>根据常量池中的第17个常量，进而可以&lt;strong>得到方法名为&amp;quot;hello&amp;rdquo;&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/33.png" alt="image-20201210164338588">&lt;/p>
&lt;p>对照Demo2的源码，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/34.png" alt="image-20201210164353158">&lt;/p>
&lt;h2 id="45hello方法的描述符">4.5.hello方法的描述符&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>descriptor_index&lt;/code> item must be a valid index into the &lt;code>constant_pool&lt;/code> table.&lt;/p>
&lt;/blockquote>
&lt;p>方法描述符，可以理解为方法的输入参数类型列表和返回值类型&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/35.png" alt="image-20201210164948299">&lt;/p>
&lt;p>Demo2字节码的方法描述为&lt;strong>00 08&lt;/strong>，指向了常量池中&lt;strong>第11个常量&lt;/strong>，第11个常量的值=**&amp;quot;()V&amp;rdquo;**。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/36.png" alt="image-20201210164907934">&lt;/p>
&lt;p>&lt;strong>()&lt;strong>表示没有输入参数，&lt;strong>V&lt;/strong>表示&lt;/strong>void&lt;/strong>类型的返回值：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/37.png" alt="image-20201210165507268">&lt;/p>
&lt;p>对应Demo2的源代码：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/38.png" alt="image-20201210165604070">&lt;/p>
&lt;h2 id="46hello方法的属性计数器">4.6.hello方法的属性计数器&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The value of the &lt;code>attributes_count&lt;/code> item indicates the number of additional attributes of this method.&lt;/p>
&lt;/blockquote>
&lt;p>方法下，下挂了属性树，这2个字节就表示了属性个数。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/39.png" alt="image-20201210171021692">&lt;/p>
&lt;p>Demo2的字节码中，&lt;strong>00 01&lt;/strong>表示hello方法下挂了&lt;strong>1个属性&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/40.png" alt="image-20201210170911839">&lt;/p>
&lt;p>在此，我们先剧透一下hello方法下挂的属性树结构：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/41.png" alt="image-20201210170336772">&lt;/p>
&lt;p>从上图，我们可以得到2个信息：&lt;/p>
&lt;ul>
&lt;li>JVM对于类中的方法，都会下挂一个&lt;strong>Code属性&lt;/strong>，Code属性&lt;strong>像一个容器&lt;/strong>，下面&lt;strong>可以挂更多的子属性&lt;/strong>&lt;/li>
&lt;li>&lt;strong>LineNumberTable&lt;/strong>属性、&lt;strong>LocalVariableTable&lt;/strong>属性，都是一种&lt;strong>表结构类型的属性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="5总结jvm如何描述一个类">5.总结：JVM如何描述一个类?&lt;/h1>
&lt;p>根据Demo2演练代码，JVM描述了如下信息：&lt;/p>
&lt;h2 id="51类的信息">5.1.类的信息&lt;/h2>
&lt;p>JVM字节码中构建了这样一颗与类有关的信息树&lt;/p>
&lt;blockquote>
&lt;p>有一个叫Demo2的类，是public类型的，继承于Object类&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/42.png" alt="image-20201210174253160">&lt;/p>
&lt;h2 id="52类中字段相关的信息">5.2.类中字段相关的信息&lt;/h2>
&lt;p>JVM构建了字节相关的信息树，遍历可知：&lt;/p>
&lt;blockquote>
&lt;p>Demo2类中有一个字段field1，是private的，是int类型的&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/43.png" alt="image-20201210174530083">&lt;/p>
&lt;h2 id="53类中方法相关的信息">5.3.类中方法相关的信息&lt;/h2>
&lt;p>JVM构建了方法相关的信息树，遍历可知：&lt;/p>
&lt;blockquote>
&lt;p>Demo2类中有一个方法叫做hello，是public的，没有输入也没有返回&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/44.png" alt="image-20201210174755908">&lt;/p>
&lt;h1 id="6下一步">6.下一步&lt;/h1>
&lt;p>笔者下篇会继续阅读本演练代码对应的Class文件剩余部分，包括&lt;/p>
&lt;blockquote>
&lt;p>方法内部相关的信息&lt;/p>
&lt;/blockquote>
&lt;p>如果您能耐心地看到这句话，恭喜您，距离&amp;rdquo;&lt;strong>看着16进制享受而诡魅的微笑&lt;/strong>&amp;ldquo;又近了一步，加油！&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%AD/45.png" alt="image-20201210174921805">&lt;/p></description></item><item><title>【编译引擎】-2-学习阅读Class文件结构(16进制版)-上</title><link>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8A/</link><pubDate>Thu, 05 Aug 2021 14:55:00 +0800</pubDate><guid>https://jherculesqz.github.io/post/java%E6%8B%BE%E9%81%97/%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%8416%E8%BF%9B%E5%88%B6%E7%89%88-%E4%B8%8A/</guid><description>&lt;p>大学时有个段子：什么是最牛逼的程序猿？&lt;/p>
&lt;p>最牛程序猿深情地注视着屏幕上一堆16进制，露出满足而诡魅的微笑。&lt;/p>
&lt;p>同学问他在看啥，他小声说：蒼井そら。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/1.png" alt="image-20201203084643095">&lt;/p>
&lt;p>好，下面，我们也来学习阅读一下16进制版的Class文件。&lt;/p>
&lt;h1 id="1源头class规范">1.源头：Class规范&lt;/h1>
&lt;p>每一个Java版本发布时，会公布两份规范文档(以Java8为例)：&lt;/p>
&lt;blockquote>
&lt;p>Java语言规范：《The Java Language Specification, Java SE 8 Edition》&lt;/p>
&lt;p>Java虚拟机规范：《The Java Virtual Machine Specification, Java SE 8 Edition》&lt;/p>
&lt;/blockquote>
&lt;p>Java虚拟机规范中有很大篇幅就是描述Class文件格式的规格，它也是帮助我们学习、理解Class文件最好的参考资料。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/2.png" alt="image-20201203090336783">&lt;/p>
&lt;h1 id="2验证演练代码">2.验证：演练代码&lt;/h1>
&lt;p>为了更好地覆盖JVM规范中描述的Class文件格式主脉络，笔者设计了如下示例代码：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/3.png" alt="image-20201203085719069">&lt;/p>
&lt;p>这段代码体现了5种Java的语法特征：&lt;/p>
&lt;blockquote>
&lt;p>类：Demo2&lt;/p>
&lt;p>成员变量：私有成员变量filed1，int类型，初始值为1&lt;/p>
&lt;p>方法：公有方法hello，无参数无返回值&lt;/p>
&lt;p>局部变量：局部变量i，int类型，初始值为1&lt;/p>
&lt;p>语句：打印语句println，打印内容为hello world&lt;/p>
&lt;/blockquote>
&lt;p>使用javac编译上述代码，我们会得到Demo2.class文件，用16进制编辑器打开如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/4.png" alt="image-20201203101943544">&lt;/p>
&lt;p>为了更清晰的查看，我们将上述数据复制到Excel表格中，着色&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/5.png" alt="image-20201203112942827">&lt;/p>
&lt;h1 id="3合法性检查依据魔数版本号">3.合法性检查依据：魔数、版本号&lt;/h1>
&lt;p>首先，通过阅读规范，我们获得如下知识：&lt;/p>
&lt;blockquote>
&lt;p>魔数：4个字节&lt;/p>
&lt;p>副版本号：2个字节&lt;/p>
&lt;p>主版本号：2个字节&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/6.png" alt="image-20201203102514844">&lt;/p>
&lt;p>然后，在IDE中将&lt;strong>魔数&lt;/strong>标记出来：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/7.png" alt="image-20201203113140375">&lt;/p>
&lt;p>然后，在IDE中将&lt;strong>版本号&lt;/strong>标记出来：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/8.png" alt="image-20201203113240887">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分析&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>魔数值和版本号是JVM加载Class文件时的合法性检查依据：&lt;/p>
&lt;blockquote>
&lt;p>如果16进制文件内容的开始不是&lt;strong>CA FE BA BE&lt;/strong>，则JVM就认为这个文件不是合法的Class文件；&lt;/p>
&lt;p>如果16进制文件内容的版本号与JVM版本号不匹配，则JVM就拒绝加载。&lt;strong>00 00 00 34&lt;/strong>，表示Java8对应的JVM可以加载。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>技术直男的浪漫&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>这里值得提到一个趣闻：魔数值&lt;strong>CA FE BA BE&lt;/strong>，应该这样断句：&lt;strong>CAFE BABE&lt;/strong>。&lt;/p>
&lt;p>Gosling，这位资深技术直男，就是这样温情地形容，他发明的这个编程语言——&lt;strong>咖啡宝贝&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/9.png" alt="image-20201203105231554">&lt;/p>
&lt;h1 id="4信息仓库常量池">4.信息仓库：常量池&lt;/h1>
&lt;h2 id="41常量池计数器">4.1.常量池计数器&lt;/h2>
&lt;p>在笔者前一篇文章《【编译引擎】学习阅读Class文件结构的意义》中提到：&lt;/p>
&lt;blockquote>
&lt;p>常量池：本质是一张表格。&lt;/p>
&lt;p>常量：是站在JVM角度看，公用的一些常量值，为了压缩Class文件的大小而存在。&lt;/p>
&lt;/blockquote>
&lt;p>因此，JVM规范才规定Class文件中，有2个字节的&lt;strong>常量池计数器&lt;/strong>(表示常量表格的长度)，紧接着的&lt;strong>N个字节&lt;/strong>存储&lt;strong>M个常量&lt;/strong>的具体内容&lt;/p>
&lt;blockquote>
&lt;p>M个常量：M=常量池计数器的值 - 1&lt;/p>
&lt;p>N个字节：N是变长的，因为每个常量类型不同，有的常量需要4个字节存储，有的常量需要很多字节存储。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/10.png" alt="image-20201203110434464">&lt;/p>
&lt;ul>
&lt;li>首先，找到&lt;strong>常量池计数器&lt;/strong>=&lt;strong>00 24&lt;/strong>，转换为10进制是36，说明&lt;strong>常量池中存储了35个常量&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一个规范中的细节：The &lt;code>constant_pool&lt;/code> table is indexed from 1 to &lt;code>constant_pool_count&lt;/code> - 1.&lt;/p>
&lt;p>这段话的意思是，常量池计数器值-1就是常量个数&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/11.png" alt="image-20201203114851834">&lt;/p>
&lt;h2 id="42n种常量类型">4.2.N种常量类型&lt;/h2>
&lt;p>接下来，我们解读具体的常量，前文讲过，常量有不同的类型，那么Class文件如何表达常量类型呢？&lt;/p>
&lt;p>规范中，采用了如下结构表示不同类型的常量：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/12.png" alt="image-20201203115414837">&lt;/p>
&lt;p>那么，JVM支持多少种类型的常量呢？&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/13.png" alt="image-20201203115520340">&lt;/p>
&lt;p>本文的演练代码中，涉及到了种类型的常量：&lt;/p>
&lt;blockquote>
&lt;p>CONSTANT_Utf8：1&lt;/p>
&lt;p>CONSTANT_String：8&lt;/p>
&lt;p>CONSTANT_Class：7&lt;/p>
&lt;p>CONSTANT_Fieldref：9&lt;/p>
&lt;p>CONSTANT_NameAndType：12&lt;/p>
&lt;p>CONSTANT_Methodref：10&lt;/p>
&lt;/blockquote>
&lt;h2 id="43constant_utf8类型的常量">4.3.CONSTANT_Utf8类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>CONSTANT_Utf8_info&lt;/code> structure is used to represent constant string values&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，就是表达字符串字面量。&lt;/p>
&lt;p>它的结构如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/14.png" alt="image-20201203120726026">&lt;/p>
&lt;p>我们以第25个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/15.png" alt="image-20201203120926294">&lt;/p>
&lt;p>这个常量值=&lt;strong>01 00 0B 68 65 6C 6C 6F 20 77 6F 72 6C 64&lt;/strong>，如下图所示的含义&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/16.png" alt="image-20201203121756603">&lt;/p>
&lt;p>第25个常量，表示的就是演练代码中的打印的字符串内容：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/17.png" alt="image-20201203122016513">&lt;/p>
&lt;h2 id="44constant_string类型的常量">4.4.CONSTANT_String类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>CONSTANT_String_info&lt;/code> structure is used to represent constant objects of the type &lt;code>String&lt;/code>:&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，是字符串对象类型的，它的值指向4.3中描述的字符串字面量。&lt;/p>
&lt;p>它的结构如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/18.png" alt="image-20201203122939616">&lt;/p>
&lt;p>我们以第5个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/19.png" alt="image-20201203122644594">&lt;/p>
&lt;p>这个常量的值= &lt;strong>08 00 19&lt;/strong>，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/20.png" alt="image-20201203123306833">&lt;/p>
&lt;p>结合第5个常量和第25个常量，再看演练代码，我们窥见&lt;strong>JVM处理字符串的原理&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/21.png" alt="image-20201203123552479">&lt;/p>
&lt;h2 id="45constant_class类型的常量">4.5.CONSTANT_Class类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>CONSTANT_Class_info&lt;/code> structure is used to represent a class or an interface&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，表示类或者接口&lt;/p>
&lt;p>它的结构如下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/22.png" alt="image-20201203124237102">&lt;/p>
&lt;p>我们以第6个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/23.png" alt="image-20201203124334512">&lt;/p>
&lt;p>这个常量的值= &lt;strong>07 00 1C&lt;/strong>，结合第28个常量，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/24.png" alt="image-20201203124818815">&lt;/p>
&lt;p>再看演练代码，CONSTANT_Class类型的常量表达了演练代码中定义的Demo2类：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/25.png" alt="image-20201203124958357">&lt;/p>
&lt;h2 id="46constant_fieldref类型的常量">4.6.CONSTANT_Fieldref类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Fields, methods, and interface methods are represented by similar structures:&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，表示字段(例如：一个类中的成员变量)。JVM规范还告诉我们，实例方法、接口方法都是同样的Class格式。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/26.png" alt="image-20201203125455813">&lt;/p>
&lt;p>我们以第2个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/27.png" alt="image-20201203125918470">&lt;/p>
&lt;p>这个常量的值= &lt;strong>09 00 06 00 16&lt;/strong>，结合第6个常量和第22个常量，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/28.png" alt="image-20201203130857438">&lt;/p>
&lt;p>但是第22个常量=&lt;strong>0C 00 08 00 09&lt;/strong>表示了什么呢？我们看下一章节的解读&lt;/p>
&lt;h2 id="47constant_nameandtype类型的常量">4.7.CONSTANT_NameAndType类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：The &lt;code>CONSTANT_NameAndType_info&lt;/code> structure is used to represent a field or method, without indicating which class or interface type it belongs to&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，表示一个字段的类型信息&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/29.png" alt="image-20201203131307059">&lt;/p>
&lt;p>我们以第22个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/30.png" alt="image-20201203131134360">&lt;/p>
&lt;p>这个常量的值= &lt;strong>0C 00 08 00 09&lt;/strong>，结合第8个常量和第9个常量，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/31.png" alt="image-20201203131856257">&lt;/p>
&lt;p>至此，我们就看到了演练代码中在JVM中如何表达&lt;code>int field1&lt;/code>信息了：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/32.png" alt="image-20201203132039284">&lt;/p>
&lt;h2 id="48constant_methodref类型的常量">4.8.CONSTANT_Methodref类型的常量&lt;/h2>
&lt;blockquote>
&lt;p>JVM规范：Fields, methods, and interface methods are represented by similar structures:&lt;/p>
&lt;/blockquote>
&lt;p>这种类型的常量，表示方法。JVM规范还告诉我们，它的结构和字段类型常量都是同样的Class格式。&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/33.png" alt="image-20201203132452923">&lt;/p>
&lt;p>我们以第5个常量为例，尝试理解一下：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/34.png" alt="image-20201203132633860">&lt;/p>
&lt;p>这个常量的值= &lt;strong>0A 00 1A 00 1B&lt;/strong>，结合第26、27个常量，如下图所示的含义：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/35.png" alt="image-20201203134131024">&lt;/p>
&lt;h1 id="5总结常量池构建的静态全局观">5.总结：常量池构建的静态全局观&lt;/h1>
&lt;p>根据演练代码产生的Class文件，JVM构建了35个常量：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/36.png" alt="image-20201203134423990">&lt;/p>
&lt;p>我们以图形化的方式进一步看看，Class文件的常量池到底为JVM构建了怎样的&lt;strong>信息树&lt;/strong>？&lt;/p>
&lt;h2 id="51源代码中有哪些方法引用">5.1.源代码中有哪些方法引用&lt;/h2>
&lt;p>常量池构建了方法引用的信息树，我们可以看到&lt;strong>两颗方法引用树&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/37.png" alt="image-20201203143257328">&lt;/p>
&lt;p>以其中一棵树为例，遍历这棵树，我们可以得到如图的信息：&lt;/p>
&lt;blockquote>
&lt;p>源代码中有一个方法，此方法属于Object类，方法名为&lt;init>，方法无输入参数，无返回&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/38.png" alt="image-20201203143352283">&lt;/p>
&lt;h2 id="52源代码中有哪些字段引用">5.2.源代码中有哪些字段引用&lt;/h2>
&lt;p>常量池构建了字段引用的信息树，我们可以看到&lt;strong>两颗字段引用树&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/39.png" alt="image-20201203143527781">&lt;/p>
&lt;p>以其中一棵树为例，遍历这棵树，我们可以得到如图的信息：&lt;/p>
&lt;blockquote>
&lt;p>源代码中有一个字段，此字段属于Demo2类，字段名为field1，字段数据类型为int&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/40.png" alt="image-20201203143719972">&lt;/p>
&lt;h2 id="53源代码中有哪些字符串对象">5.3.源代码中有哪些字符串对象&lt;/h2>
&lt;p>常量池构建了字符串类型对象的信息树，我们可以看到&lt;strong>一颗字符串对象树&lt;/strong>，如下图：&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/41.png" alt="image-20201203143839084">&lt;/p>
&lt;p>以这棵树为例，遍历这棵树，我们可以得到如图的信息：&lt;/p>
&lt;blockquote>
&lt;p>源代码中有一个字符串对象，此字符串对象的值是hello world&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/42.png" alt="image-20201203143944970">&lt;/p>
&lt;h2 id="54源代码中其它的字符串字面量">5.4.源代码中其它的字符串字面量&lt;/h2>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/43.png" alt="image-20201203144014111">&lt;/p>
&lt;h2 id="55静态的全局观">5.5.静态的全局观&lt;/h2>
&lt;p>至此，我们已经看到了常量池为JVM诠释了Java源代码中的信息树。&lt;/p>
&lt;p>&lt;strong>常量池中的这些信息树，为JVM构建出了一个静态的全局观&lt;/strong>。&lt;/p>
&lt;p>通过这些信息树，我们已经能&lt;strong>反演出Java源代码中的静态结构&lt;/strong>：&lt;/p>
&lt;blockquote>
&lt;p>有几个类？&lt;/p>
&lt;p>类中有几个成员变量？&lt;/p>
&lt;p>类中有几个方法？&lt;/p>
&lt;p>每个成员变量的名称、数据类型&lt;/p>
&lt;p>每个方法的名称、输入参数列表、返回值类型&lt;/p>
&lt;/blockquote>
&lt;p>但常量池中还有一些信息孤点，我们无法反演出一些&lt;strong>动态结构&lt;/strong>：&lt;/p>
&lt;blockquote>
&lt;p>成员变量的状态变化过程&lt;/p>
&lt;p>方法体内的运行过程&lt;/p>
&lt;p>方法内局部变量的变化过程&lt;/p>
&lt;/blockquote>
&lt;h1 id="6下一步">6.下一步&lt;/h1>
&lt;p>笔者下篇会继续阅读本演练代码对应的Class文件剩余部分，包括&lt;/p>
&lt;blockquote>
&lt;p>访问标识&lt;/p>
&lt;p>类索引&lt;/p>
&lt;p>字段表&lt;/p>
&lt;p>方法表&lt;/p>
&lt;p>属性表&lt;/p>
&lt;/blockquote>
&lt;p>进一步理解Class字节码如何为JVM&lt;strong>构建动态全局观&lt;/strong>。&lt;/p>
&lt;p>**高能预警：**如果您能耐心地看到这句话，恭喜您，距离&amp;rdquo;&lt;strong>看着16进制享受而诡魅的微笑&lt;/strong>&amp;ldquo;又近了一步，加油！&lt;/p>
&lt;p>&lt;img src="https://jherculesqz.github.io/Java%E6%8B%BE%E9%81%97/%E3%80%90%E7%BC%96%E8%AF%91%E5%BC%95%E6%93%8E%E3%80%91-2-%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BBClass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84(16%E8%BF%9B%E5%88%B6%E7%89%88)-%E4%B8%8A/44.png" alt="image-20201203144947702">&lt;/p></description></item></channel></rss>